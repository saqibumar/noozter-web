{"ast":null,"code":"import { environment } from \"./../../environments/environment\";\nimport { HttpEvent, HttpHandler, HttpRequest, HttpResponse, HttpHeaders } from \"@angular/common/http\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { tap } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(activatedRoute, router) {\n      this.activatedRoute = activatedRoute;\n      this.router = router;\n    }\n    intercept(req, next) {\n      if (req.headers.get(\"No-Auth\") == \"True\") {\n        return next.handle(req.clone());\n      }\n      let res;\n      let ok;\n      // console.log('INTERCEPTED');\n      let token = environment.authToken;\n      if (token != null) {\n        let headers;\n        headers = new HttpHeaders({\n          /*  Authorization: `${token}`,\n            'Content-Type': 'application/json; charset=UTF-8' */\n          //\"Access-Control-Allow-Credentials\" : \"false\",\n          //  \"Access-Control-Allow-Origin\" : \"*\" //environment.noozDomain\n          Authorization: token,\n          \"Content-Type\": \"application/json; charset=UTF-8\"\n        });\n        const clonedreq = req.clone({\n          /* setParams: { CountryName: \"Mexico\", City: \"Mexico City\" }, */\n          headers\n        });\n        // console.log(clonedreq);\n        return next.handle(clonedreq).pipe(tap(event => {\n          ok = event instanceof HttpResponse ? \"succeeded\" : \"\";\n          if (ok) {\n            //Here we receive a new token from the header and set in local storage\n            res = event;\n            // console.log(res);\n          }\n        }, err => {\n          this.router.navigate([\"/home\"]);\n          if (err.status === 401) {\n            // console.log(err);\n          } else if (err.status === 600) {\n            // console.log(err.error + err.status);\n            //this.toastr.Error(\"Error de operación\", \"Error \" + err.statusText);\n          } else if (err.status === 415) {\n            // console.log(err.error + err.status);\n            // this.toastr.Error(\"Error de operación\", \"Error \" + err.statusText);\n          } else {\n            //console.log('ERROR in else ' + err.status);\n            // console.log(err);\n            //this.toastr.Error(err.error, \"Error \" + err.statusText);\n          }\n        }));\n      } else {\n        // console.log('Token was null. Redirecting...');\n      }\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i1.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}