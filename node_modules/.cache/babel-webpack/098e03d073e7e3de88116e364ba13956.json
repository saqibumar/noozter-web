{"ast":null,"code":"import _toConsumableArray from \"/Users/saqib/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _inherits from \"/Users/saqib/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/saqib/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"/Users/saqib/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/saqib/Documents/Git/noozter-web/node_modules/@babel/runtime/regenerator\";\nimport _createClass from \"/Users/saqib/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/saqib/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __awaiter } from 'tslib';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Optional, Inject, LOCALE_ID, Directive, Input, EventEmitter, Output, Self, Component, ElementRef, PLATFORM_ID, ContentChildren, QueryList, forwardRef, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject, from, timer, ReplaySubject, bindCallback, of, throwError, fromEventPattern, merge, Subject } from 'rxjs';\nimport { flatMap, sample, switchMap, map, shareReplay, multicast, startWith, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"*\"];\n\nvar MapsAPILoader = function MapsAPILoader() {\n  _classCallCheck(this, MapsAPILoader);\n};\n\nMapsAPILoader.ɵfac = function MapsAPILoader_Factory(t) {\n  return new (t || MapsAPILoader)();\n};\n\nMapsAPILoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MapsAPILoader,\n  factory: MapsAPILoader.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MapsAPILoader, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\n\n\nvar GoogleMapsAPIWrapper = /*#__PURE__*/function () {\n  function GoogleMapsAPIWrapper(_loader, _zone) {\n    var _this = this;\n\n    _classCallCheck(this, GoogleMapsAPIWrapper);\n\n    this._loader = _loader;\n    this._zone = _zone;\n    this._map = new Promise(function (resolve) {\n      _this._mapResolver = resolve;\n    });\n  }\n\n  _createClass(GoogleMapsAPIWrapper, [{\n    key: \"createMap\",\n    value: function createMap(el, mapOptions) {\n      var _this2 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this2._loader.load().then(function () {\n          var map = new google.maps.Map(el, mapOptions);\n\n          _this2._mapResolver(map);\n\n          return;\n        });\n      });\n    }\n  }, {\n    key: \"setMapOptions\",\n    value: function setMapOptions(options) {\n      var _this3 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        _this3._map.then(function (m) {\n          m.setOptions(options);\n        });\n      });\n    }\n    /**\n     * Creates a google map marker with the map context\n     */\n\n  }, {\n    key: \"createMarker\",\n    value: function createMarker() {\n      var _this4 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var addToMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this._zone.runOutsideAngular(function () {\n        return _this4._map.then(function (map) {\n          if (addToMap) {\n            options.map = map;\n          }\n\n          return new google.maps.Marker(options);\n        });\n      });\n    }\n  }, {\n    key: \"createInfoWindow\",\n    value: function createInfoWindow(options) {\n      var _this5 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this5._map.then(function () {\n          return new google.maps.InfoWindow(options);\n        });\n      });\n    }\n    /**\n     * Creates a google.map.Circle for the current map.\n     */\n\n  }, {\n    key: \"createCircle\",\n    value: function createCircle(options) {\n      var _this6 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this6._map.then(function (map) {\n          options.map = map;\n          return new google.maps.Circle(options);\n        });\n      });\n    }\n    /**\n     * Creates a google.map.Rectangle for the current map.\n     */\n\n  }, {\n    key: \"createRectangle\",\n    value: function createRectangle(options) {\n      var _this7 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this7._map.then(function (map) {\n          options.map = map;\n          return new google.maps.Rectangle(options);\n        });\n      });\n    }\n  }, {\n    key: \"createPolyline\",\n    value: function createPolyline(options) {\n      var _this8 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this8.getNativeMap().then(function (map) {\n          var line = new google.maps.Polyline(options);\n          line.setMap(map);\n          return line;\n        });\n      });\n    }\n  }, {\n    key: \"createPolygon\",\n    value: function createPolygon(options) {\n      var _this9 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this9.getNativeMap().then(function (map) {\n          var polygon = new google.maps.Polygon(options);\n          polygon.setMap(map);\n          return polygon;\n        });\n      });\n    }\n    /**\n     * Creates a new google.map.Data layer for the current map\n     */\n\n  }, {\n    key: \"createDataLayer\",\n    value: function createDataLayer(options) {\n      var _this10 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this10._map.then(function (m) {\n          var data = new google.maps.Data(options);\n          data.setMap(m);\n          return data;\n        });\n      });\n    }\n    /**\n     * Creates a TransitLayer instance for a map\n     * @returns a new transit layer object\n     */\n\n  }, {\n    key: \"createTransitLayer\",\n    value: function createTransitLayer() {\n      var _this11 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this11._map.then(function (map) {\n          var newLayer = new google.maps.TransitLayer();\n          newLayer.setMap(map);\n          return newLayer;\n        });\n      });\n    }\n    /**\n     * Creates a BicyclingLayer instance for a map\n     * @returns a new bicycling layer object\n     */\n\n  }, {\n    key: \"createBicyclingLayer\",\n    value: function createBicyclingLayer() {\n      var _this12 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this12._map.then(function (map) {\n          var newLayer = new google.maps.BicyclingLayer();\n          newLayer.setMap(map);\n          return newLayer;\n        });\n      });\n    }\n    /**\n     * Determines if given coordinates are insite a Polygon path.\n     */\n\n  }, {\n    key: \"containsLocation\",\n    value: function containsLocation(latLng, polygon) {\n      return this._map.then(function () {\n        return google.maps.geometry.poly.containsLocation(latLng, polygon);\n      });\n    }\n  }, {\n    key: \"subscribeToMapEvent\",\n    value: function subscribeToMapEvent(eventName) {\n      var _arguments = arguments,\n          _this13 = this;\n\n      return new Observable(function (observer) {\n        _this13._map.then(function (m) {\n          return m.addListener(eventName, function () {\n            return _this13._zone.run(function () {\n              return observer.next(_arguments[0]);\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"clearInstanceListeners\",\n    value: function clearInstanceListeners() {\n      var _this14 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        _this14._map.then(function (map) {\n          google.maps.event.clearInstanceListeners(map);\n        });\n      });\n    }\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(latLng) {\n      var _this15 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this15._map.then(function (map) {\n          return map.setCenter(latLng);\n        });\n      });\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      var _this16 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this16._map.then(function (map) {\n          return map.getZoom();\n        });\n      });\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      var _this17 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this17._map.then(function (map) {\n          return map.getBounds();\n        });\n      });\n    }\n  }, {\n    key: \"getMapTypeId\",\n    value: function getMapTypeId() {\n      var _this18 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this18._map.then(function (map) {\n          return map.getMapTypeId();\n        });\n      });\n    }\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(zoom) {\n      var _this19 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this19._map.then(function (map) {\n          return map.setZoom(zoom);\n        });\n      });\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var _this20 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this20._map.then(function (map) {\n          return map.getCenter();\n        });\n      });\n    }\n  }, {\n    key: \"panTo\",\n    value: function panTo(latLng) {\n      var _this21 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this21._map.then(function (map) {\n          return map.panTo(latLng);\n        });\n      });\n    }\n  }, {\n    key: \"panBy\",\n    value: function panBy(x, y) {\n      var _this22 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this22._map.then(function (map) {\n          return map.panBy(x, y);\n        });\n      });\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(latLng, padding) {\n      var _this23 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this23._map.then(function (map) {\n          return map.fitBounds(latLng, padding);\n        });\n      });\n    }\n  }, {\n    key: \"panToBounds\",\n    value: function panToBounds(latLng, padding) {\n      var _this24 = this;\n\n      return this._zone.runOutsideAngular(function () {\n        return _this24._map.then(function (map) {\n          return map.panToBounds(latLng, padding);\n        });\n      });\n    }\n    /**\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n     */\n\n  }, {\n    key: \"getNativeMap\",\n    value: function getNativeMap() {\n      return this._map;\n    }\n    /**\n     * Triggers the given event name on the map instance.\n     */\n\n  }, {\n    key: \"triggerMapEvent\",\n    value: function triggerMapEvent(eventName) {\n      return this._map.then(function (m) {\n        return google.maps.event.trigger(m, eventName);\n      });\n    }\n  }]);\n\n  return GoogleMapsAPIWrapper;\n}();\n\nGoogleMapsAPIWrapper.ɵfac = function GoogleMapsAPIWrapper_Factory(t) {\n  return new (t || GoogleMapsAPIWrapper)(ɵngcc0.ɵɵinject(MapsAPILoader), ɵngcc0.ɵɵinject(NgZone));\n};\n\nGoogleMapsAPIWrapper.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GoogleMapsAPIWrapper,\n  factory: GoogleMapsAPIWrapper.ɵfac\n});\n\nGoogleMapsAPIWrapper.ctorParameters = function () {\n  return [{\n    type: MapsAPILoader\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GoogleMapsAPIWrapper, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: MapsAPILoader\n    }, {\n      type: NgZone\n    }];\n  }, null);\n})();\n\nvar CircleManager = /*#__PURE__*/function () {\n  function CircleManager(_apiWrapper, _zone) {\n    _classCallCheck(this, CircleManager);\n\n    this._apiWrapper = _apiWrapper;\n    this._zone = _zone;\n    this._circles = new Map();\n  }\n\n  _createClass(CircleManager, [{\n    key: \"addCircle\",\n    value: function addCircle(circle) {\n      var _this25 = this;\n\n      this._apiWrapper.getNativeMap().then(function () {\n        return _this25._circles.set(circle, _this25._apiWrapper.createCircle({\n          center: {\n            lat: circle.latitude,\n            lng: circle.longitude\n          },\n          clickable: circle.clickable,\n          draggable: circle.draggable,\n          editable: circle.editable,\n          fillColor: circle.fillColor,\n          fillOpacity: circle.fillOpacity,\n          radius: circle.radius,\n          strokeColor: circle.strokeColor,\n          strokeOpacity: circle.strokeOpacity,\n          strokePosition: google.maps.StrokePosition[circle.strokePosition],\n          strokeWeight: circle.strokeWeight,\n          visible: circle.visible,\n          zIndex: circle.zIndex\n        }));\n      });\n    }\n    /**\n     * Removes the given circle from the map.\n     */\n\n  }, {\n    key: \"removeCircle\",\n    value: function removeCircle(circle) {\n      var _this26 = this;\n\n      return this._circles.get(circle).then(function (c) {\n        c.setMap(null);\n\n        _this26._circles.delete(circle);\n      });\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(circle, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this._circles.get(circle).then(function (c) {\n                  var actualParam = options.strokePosition;\n                  options.strokePosition = google.maps.StrokePosition[actualParam];\n                  c.setOptions(options);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.getBounds();\n      });\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.getCenter();\n      });\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.getRadius();\n      });\n    }\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.setCenter({\n          lat: circle.latitude,\n          lng: circle.longitude\n        });\n      });\n    }\n  }, {\n    key: \"setEditable\",\n    value: function setEditable(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.setEditable(circle.editable);\n      });\n    }\n  }, {\n    key: \"setDraggable\",\n    value: function setDraggable(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.setDraggable(circle.draggable);\n      });\n    }\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.setVisible(circle.visible);\n      });\n    }\n  }, {\n    key: \"setRadius\",\n    value: function setRadius(circle) {\n      return this._circles.get(circle).then(function (c) {\n        return c.setRadius(circle.radius);\n      });\n    }\n  }, {\n    key: \"getNativeCircle\",\n    value: function getNativeCircle(circle) {\n      return this._circles.get(circle);\n    }\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, circle) {\n      var _this27 = this;\n\n      return new Observable(function (observer) {\n        var listener = null;\n\n        _this27._circles.get(circle).then(function (c) {\n          listener = c.addListener(eventName, function (e) {\n            return _this27._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n\n        return function () {\n          if (listener !== null) {\n            listener.remove();\n          }\n        };\n      });\n    }\n  }]);\n\n  return CircleManager;\n}();\n\nCircleManager.ɵfac = function CircleManager_Factory(t) {\n  return new (t || CircleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(NgZone));\n};\n\nCircleManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: CircleManager,\n  factory: CircleManager.ɵfac\n});\n\nCircleManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CircleManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: NgZone\n    }];\n  }, null);\n})();\n/**\n * Manages all Data Layers for a Google Map instance.\n */\n\n\nvar DataLayerManager = /*#__PURE__*/function () {\n  function DataLayerManager(_wrapper, _zone) {\n    _classCallCheck(this, DataLayerManager);\n\n    this._wrapper = _wrapper;\n    this._zone = _zone;\n    this._layers = new Map();\n  }\n  /**\n   * Adds a new Data Layer to the map.\n   */\n\n\n  _createClass(DataLayerManager, [{\n    key: \"addDataLayer\",\n    value: function addDataLayer(layer) {\n      var _this28 = this;\n\n      var newLayer = this._wrapper.createDataLayer({\n        style: layer.style\n      }).then(function (d) {\n        if (layer.geoJson) {\n          // NOTE: accessing \"features\" on google.maps.Data is undocumented\n          _this28.getDataFeatures(d, layer.geoJson).then(function (features) {\n            return d.features = features;\n          });\n        }\n\n        return d;\n      });\n\n      this._layers.set(layer, newLayer);\n    }\n  }, {\n    key: \"deleteDataLayer\",\n    value: function deleteDataLayer(layer) {\n      var _this29 = this;\n\n      this._layers.get(layer).then(function (l) {\n        l.setMap(null);\n\n        _this29._layers.delete(layer);\n      });\n    }\n  }, {\n    key: \"updateGeoJson\",\n    value: function updateGeoJson(layer, geoJson) {\n      var _this30 = this;\n\n      this._layers.get(layer).then(function (l) {\n        l.forEach(function (feature) {\n          l.remove(feature); // NOTE: accessing \"features\" on google.maps.Data is undocumented\n\n          var index = l.features.indexOf(feature, 0);\n\n          if (index > -1) {\n            l.features.splice(index, 1);\n          }\n        });\n\n        _this30.getDataFeatures(l, geoJson).then(function (features) {\n          return l.features = features;\n        });\n      });\n    }\n  }, {\n    key: \"setDataOptions\",\n    value: function setDataOptions(layer, options) {\n      this._layers.get(layer).then(function (l) {\n        l.setControlPosition(options.controlPosition);\n        l.setControls(options.controls);\n        l.setDrawingMode(options.drawingMode);\n        l.setStyle(options.style);\n      });\n    }\n    /**\n     * Creates a Google Maps event listener for the given DataLayer as an Observable\n     */\n\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, layer) {\n      var _this31 = this;\n\n      return new Observable(function (observer) {\n        _this31._layers.get(layer).then(function (d) {\n          d.addListener(eventName, function (e) {\n            return _this31._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n    /**\n     * Extract features from a geoJson using google.maps Data Class\n     * @param d : google.maps.Data class instance\n     * @param geoJson : url or geojson object\n     */\n\n  }, {\n    key: \"getDataFeatures\",\n    value: function getDataFeatures(d, geoJson) {\n      return new Promise(function (resolve, reject) {\n        if (typeof geoJson === 'object') {\n          try {\n            var features = d.addGeoJson(geoJson);\n            resolve(features);\n          } catch (e) {\n            reject(e);\n          }\n        } else if (typeof geoJson === 'string') {\n          d.loadGeoJson(geoJson, null, resolve);\n        } else {\n          reject(\"Impossible to extract features from geoJson: wrong argument type\");\n        }\n      });\n    }\n  }]);\n\n  return DataLayerManager;\n}();\n\nDataLayerManager.ɵfac = function DataLayerManager_Factory(t) {\n  return new (t || DataLayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(NgZone));\n};\n\nDataLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: DataLayerManager,\n  factory: DataLayerManager.ɵfac\n});\n\nDataLayerManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DataLayerManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: NgZone\n    }];\n  }, null);\n})();\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\n\n\nvar FitBoundsAccessor = function FitBoundsAccessor() {\n  _classCallCheck(this, FitBoundsAccessor);\n};\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\n\n\nvar FitBoundsService = /*#__PURE__*/function () {\n  function FitBoundsService(loader) {\n    var _this32 = this;\n\n    _classCallCheck(this, FitBoundsService);\n\n    this._boundsChangeSampleTime$ = new BehaviorSubject(200);\n    this._includeInBounds$ = new BehaviorSubject(new Map());\n    this.bounds$ = from(loader.load()).pipe(flatMap(function () {\n      return _this32._includeInBounds$;\n    }), sample(this._boundsChangeSampleTime$.pipe(switchMap(function (time) {\n      return timer(0, time);\n    }))), map(function (includeInBounds) {\n      return _this32._generateBounds(includeInBounds);\n    }), shareReplay(1));\n  }\n\n  _createClass(FitBoundsService, [{\n    key: \"_generateBounds\",\n    value: function _generateBounds(includeInBounds) {\n      var bounds = new google.maps.LatLngBounds();\n      includeInBounds.forEach(function (b) {\n        return bounds.extend(b);\n      });\n      return bounds;\n    }\n  }, {\n    key: \"addToBounds\",\n    value: function addToBounds(latLng) {\n      var id = this._createIdentifier(latLng);\n\n      if (this._includeInBounds$.value.has(id)) {\n        return;\n      }\n\n      var boundsMap = this._includeInBounds$.value;\n      boundsMap.set(id, latLng);\n\n      this._includeInBounds$.next(boundsMap);\n    }\n  }, {\n    key: \"removeFromBounds\",\n    value: function removeFromBounds(latLng) {\n      var boundsMap = this._includeInBounds$.value;\n      boundsMap.delete(this._createIdentifier(latLng));\n\n      this._includeInBounds$.next(boundsMap);\n    }\n  }, {\n    key: \"changeFitBoundsChangeSampleTime\",\n    value: function changeFitBoundsChangeSampleTime(timeMs) {\n      this._boundsChangeSampleTime$.next(timeMs);\n    }\n  }, {\n    key: \"getBounds$\",\n    value: function getBounds$() {\n      return this.bounds$;\n    }\n  }, {\n    key: \"_createIdentifier\",\n    value: function _createIdentifier(latLng) {\n      return \"\".concat(latLng.lat, \"+\").concat(latLng.lng);\n    }\n  }]);\n\n  return FitBoundsService;\n}();\n\nFitBoundsService.ɵfac = function FitBoundsService_Factory(t) {\n  return new (t || FitBoundsService)(ɵngcc0.ɵɵinject(MapsAPILoader));\n};\n\nFitBoundsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: FitBoundsService,\n  factory: FitBoundsService.ɵfac\n});\n\nFitBoundsService.ctorParameters = function () {\n  return [{\n    type: MapsAPILoader\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FitBoundsService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: MapsAPILoader\n    }];\n  }, null);\n})();\n\nvar AgmGeocoder = /*#__PURE__*/function () {\n  function AgmGeocoder(loader) {\n    var _this33 = this;\n\n    _classCallCheck(this, AgmGeocoder);\n\n    var connectableGeocoder$ = new Observable(function (subscriber) {\n      loader.load().then(function () {\n        return subscriber.next();\n      });\n    }).pipe(map(function () {\n      return _this33._createGeocoder();\n    }), multicast(new ReplaySubject(1)));\n    connectableGeocoder$.connect(); // ignore the subscription\n    // since we will remain subscribed till application exits\n\n    this.geocoder$ = connectableGeocoder$;\n  }\n\n  _createClass(AgmGeocoder, [{\n    key: \"geocode\",\n    value: function geocode(request) {\n      var _this34 = this;\n\n      return this.geocoder$.pipe(switchMap(function (geocoder) {\n        return _this34._getGoogleResults(geocoder, request);\n      }));\n    }\n  }, {\n    key: \"_getGoogleResults\",\n    value: function _getGoogleResults(geocoder, request) {\n      var geocodeObservable = bindCallback(geocoder.geocode);\n      return geocodeObservable(request).pipe(switchMap(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            results = _ref2[0],\n            status = _ref2[1];\n\n        if (status === google.maps.GeocoderStatus.OK) {\n          return of(results);\n        }\n\n        return throwError(status);\n      }));\n    }\n  }, {\n    key: \"_createGeocoder\",\n    value: function _createGeocoder() {\n      return new google.maps.Geocoder();\n    }\n  }]);\n\n  return AgmGeocoder;\n}();\n\nAgmGeocoder.ɵfac = function AgmGeocoder_Factory(t) {\n  return new (t || AgmGeocoder)(ɵngcc0.ɵɵinject(MapsAPILoader));\n};\n\nAgmGeocoder.ɵprov = ɵɵdefineInjectable({\n  factory: function AgmGeocoder_Factory() {\n    return new AgmGeocoder(ɵɵinject(MapsAPILoader));\n  },\n  token: AgmGeocoder,\n  providedIn: \"root\"\n});\n\nAgmGeocoder.ctorParameters = function () {\n  return [{\n    type: MapsAPILoader\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmGeocoder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MapsAPILoader\n    }];\n  }, null);\n})();\n\nvar WindowRef = /*#__PURE__*/function () {\n  function WindowRef() {\n    _classCallCheck(this, WindowRef);\n  }\n\n  _createClass(WindowRef, [{\n    key: \"getNativeWindow\",\n    value: function getNativeWindow() {\n      return window;\n    }\n  }]);\n\n  return WindowRef;\n}();\n\nvar DocumentRef = /*#__PURE__*/function () {\n  function DocumentRef() {\n    _classCallCheck(this, DocumentRef);\n  }\n\n  _createClass(DocumentRef, [{\n    key: \"getNativeDocument\",\n    value: function getNativeDocument() {\n      return document;\n    }\n  }]);\n\n  return DocumentRef;\n}();\n\nvar BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];\nvar GoogleMapsScriptProtocol;\n\n(function (GoogleMapsScriptProtocol) {\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\n})(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\n\n\nvar LAZY_MAPS_API_CONFIG = new InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\n\nvar LazyMapsAPILoader = /*#__PURE__*/function (_MapsAPILoader) {\n  _inherits(LazyMapsAPILoader, _MapsAPILoader);\n\n  var _super = _createSuper(LazyMapsAPILoader);\n\n  function LazyMapsAPILoader() {\n    var _this35;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var w = arguments.length > 1 ? arguments[1] : undefined;\n    var d = arguments.length > 2 ? arguments[2] : undefined;\n    var localeId = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, LazyMapsAPILoader);\n\n    _this35 = _super.call(this);\n    _this35.localeId = localeId;\n    _this35._SCRIPT_ID = 'agmGoogleMapsApiScript';\n    _this35.callbackName = \"agmLazyMapsAPILoader\";\n    _this35._config = config || {};\n    _this35._windowRef = w;\n    _this35._documentRef = d;\n    return _this35;\n  }\n\n  _createClass(LazyMapsAPILoader, [{\n    key: \"load\",\n    value: function load() {\n      var window = this._windowRef.getNativeWindow();\n\n      if (window.google && window.google.maps) {\n        // Google maps already loaded on the page.\n        return Promise.resolve();\n      }\n\n      if (this._scriptLoadingPromise) {\n        return this._scriptLoadingPromise;\n      } // this can happen in HMR situations or Stackblitz.io editors.\n\n\n      var scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n\n      if (scriptOnPage) {\n        this._assignScriptLoadingPromise(scriptOnPage);\n\n        return this._scriptLoadingPromise;\n      }\n\n      var script = this._documentRef.getNativeDocument().createElement('script');\n\n      script.type = 'text/javascript';\n      script.async = true;\n      script.defer = true;\n      script.id = this._SCRIPT_ID;\n      script.src = this._getScriptSrc(this.callbackName);\n\n      this._assignScriptLoadingPromise(script);\n\n      this._documentRef.getNativeDocument().body.appendChild(script);\n\n      return this._scriptLoadingPromise;\n    }\n  }, {\n    key: \"_assignScriptLoadingPromise\",\n    value: function _assignScriptLoadingPromise(scriptElem) {\n      var _this36 = this;\n\n      this._scriptLoadingPromise = new Promise(function (resolve, reject) {\n        _this36._windowRef.getNativeWindow()[_this36.callbackName] = function () {\n          resolve();\n        };\n\n        scriptElem.onerror = function (error) {\n          reject(error);\n        };\n      });\n    }\n  }, {\n    key: \"_getScriptSrc\",\n    value: function _getScriptSrc(callbackName) {\n      var protocolType = this._config && this._config.protocol || GoogleMapsScriptProtocol.HTTPS;\n      var protocol;\n\n      switch (protocolType) {\n        case GoogleMapsScriptProtocol.AUTO:\n          protocol = '';\n          break;\n\n        case GoogleMapsScriptProtocol.HTTP:\n          protocol = 'http:';\n          break;\n\n        case GoogleMapsScriptProtocol.HTTPS:\n          protocol = 'https:';\n          break;\n      }\n\n      var hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n      var queryParams = {\n        v: this._config.apiVersion || 'quarterly',\n        callback: callbackName,\n        key: this._config.apiKey,\n        client: this._config.clientId,\n        channel: this._config.channel,\n        libraries: this._config.libraries,\n        region: this._config.region,\n        language: this._config.language || (this.localeId !== 'en-US' ? this.localeId : null)\n      };\n      var params = Object.keys(queryParams).filter(function (k) {\n        return queryParams[k] != null;\n      }).filter(function (k) {\n        // remove empty arrays\n        return !Array.isArray(queryParams[k]) || Array.isArray(queryParams[k]) && queryParams[k].length > 0;\n      }).map(function (k) {\n        // join arrays as comma seperated strings\n        var i = queryParams[k];\n\n        if (Array.isArray(i)) {\n          return {\n            key: k,\n            value: i.join(',')\n          };\n        }\n\n        return {\n          key: k,\n          value: queryParams[k]\n        };\n      }).map(function (entry) {\n        return \"\".concat(entry.key, \"=\").concat(entry.value);\n      }).join('&');\n      return \"\".concat(protocol, \"//\").concat(hostAndPath, \"?\").concat(params);\n    }\n  }]);\n\n  return LazyMapsAPILoader;\n}(MapsAPILoader);\n\nLazyMapsAPILoader.ɵfac = function LazyMapsAPILoader_Factory(t) {\n  return new (t || LazyMapsAPILoader)(ɵngcc0.ɵɵinject(LAZY_MAPS_API_CONFIG, 8), ɵngcc0.ɵɵinject(WindowRef), ɵngcc0.ɵɵinject(DocumentRef), ɵngcc0.ɵɵinject(LOCALE_ID));\n};\n\nLazyMapsAPILoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: LazyMapsAPILoader,\n  factory: LazyMapsAPILoader.ɵfac\n});\n\nLazyMapsAPILoader.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LAZY_MAPS_API_CONFIG]\n    }]\n  }, {\n    type: WindowRef\n  }, {\n    type: DocumentRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [LOCALE_ID]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LazyMapsAPILoader, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LAZY_MAPS_API_CONFIG]\n      }]\n    }, {\n      type: WindowRef\n    }, {\n      type: DocumentRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }];\n  }, null);\n})();\n\nvar MarkerManager = /*#__PURE__*/function () {\n  function MarkerManager(_mapsWrapper, _zone) {\n    _classCallCheck(this, MarkerManager);\n\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._markers = new Map();\n  }\n\n  _createClass(MarkerManager, [{\n    key: \"convertAnimation\",\n    value: function convertAnimation(uiAnim) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(uiAnim === null)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 4:\n                return _context2.abrupt(\"return\", this._mapsWrapper.getNativeMap().then(function () {\n                  return google.maps.Animation[uiAnim];\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"deleteMarker\",\n    value: function deleteMarker(markerDirective) {\n      var _this37 = this;\n\n      var markerPromise = this._markers.get(markerDirective);\n\n      if (markerPromise == null) {\n        // marker already deleted\n        return Promise.resolve();\n      }\n\n      return markerPromise.then(function (marker) {\n        return _this37._zone.run(function () {\n          marker.setMap(null);\n\n          _this37._markers.delete(markerDirective);\n        });\n      });\n    }\n  }, {\n    key: \"updateMarkerPosition\",\n    value: function updateMarkerPosition(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setPosition({\n          lat: marker.latitude,\n          lng: marker.longitude\n        });\n      });\n    }\n  }, {\n    key: \"updateTitle\",\n    value: function updateTitle(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setTitle(marker.title);\n      });\n    }\n  }, {\n    key: \"updateLabel\",\n    value: function updateLabel(marker) {\n      return this._markers.get(marker).then(function (m) {\n        m.setLabel(marker.label);\n      });\n    }\n  }, {\n    key: \"updateDraggable\",\n    value: function updateDraggable(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setDraggable(marker.draggable);\n      });\n    }\n  }, {\n    key: \"updateIcon\",\n    value: function updateIcon(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setIcon(marker.iconUrl);\n      });\n    }\n  }, {\n    key: \"updateOpacity\",\n    value: function updateOpacity(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setOpacity(marker.opacity);\n      });\n    }\n  }, {\n    key: \"updateVisible\",\n    value: function updateVisible(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setVisible(marker.visible);\n      });\n    }\n  }, {\n    key: \"updateZIndex\",\n    value: function updateZIndex(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setZIndex(marker.zIndex);\n      });\n    }\n  }, {\n    key: \"updateClickable\",\n    value: function updateClickable(marker) {\n      return this._markers.get(marker).then(function (m) {\n        return m.setClickable(marker.clickable);\n      });\n    }\n  }, {\n    key: \"updateAnimation\",\n    value: function updateAnimation(marker) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var m;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._markers.get(marker);\n\n              case 2:\n                m = _context3.sent;\n                _context3.t0 = m;\n                _context3.next = 6;\n                return this.convertAnimation(marker.animation);\n\n              case 6:\n                _context3.t1 = _context3.sent;\n\n                _context3.t0.setAnimation.call(_context3.t0, _context3.t1);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(marker) {\n      var _this38 = this;\n\n      var markerPromise = new Promise(function (resolve) {\n        return __awaiter(_this38, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.t0 = this._mapsWrapper;\n                  _context4.t1 = {\n                    lat: marker.latitude,\n                    lng: marker.longitude\n                  };\n                  _context4.t2 = marker.label;\n                  _context4.t3 = marker.draggable;\n                  _context4.t4 = marker.iconUrl;\n                  _context4.t5 = marker.opacity;\n                  _context4.t6 = marker.visible;\n                  _context4.t7 = marker.zIndex;\n                  _context4.t8 = marker.title;\n                  _context4.t9 = marker.clickable;\n                  _context4.next = 12;\n                  return this.convertAnimation(marker.animation);\n\n                case 12:\n                  _context4.t10 = _context4.sent;\n                  _context4.t11 = {\n                    position: _context4.t1,\n                    label: _context4.t2,\n                    draggable: _context4.t3,\n                    icon: _context4.t4,\n                    opacity: _context4.t5,\n                    visible: _context4.t6,\n                    zIndex: _context4.t7,\n                    title: _context4.t8,\n                    clickable: _context4.t9,\n                    animation: _context4.t10\n                  };\n                  return _context4.abrupt(\"return\", _context4.t0.createMarker.call(_context4.t0, _context4.t11).then(resolve));\n\n                case 15:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n      });\n\n      this._markers.set(marker, markerPromise);\n    }\n  }, {\n    key: \"getNativeMarker\",\n    value: function getNativeMarker(marker) {\n      return this._markers.get(marker);\n    }\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, marker) {\n      var _this39 = this;\n\n      return new Observable(function (observer) {\n        _this39._markers.get(marker).then(function (m) {\n          return m.addListener(eventName, function (e) {\n            return _this39._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return MarkerManager;\n}();\n\nMarkerManager.ɵfac = function MarkerManager_Factory(t) {\n  return new (t || MarkerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(NgZone));\n};\n\nMarkerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MarkerManager,\n  factory: MarkerManager.ɵfac\n});\n\nMarkerManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MarkerManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: NgZone\n    }];\n  }, null);\n})();\n\nvar InfoWindowManager = /*#__PURE__*/function () {\n  function InfoWindowManager(_mapsWrapper, _zone, _markerManager) {\n    _classCallCheck(this, InfoWindowManager);\n\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._markerManager = _markerManager;\n    this._infoWindows = new Map();\n  }\n\n  _createClass(InfoWindowManager, [{\n    key: \"deleteInfoWindow\",\n    value: function deleteInfoWindow(infoWindow) {\n      var _this40 = this;\n\n      var iWindow = this._infoWindows.get(infoWindow);\n\n      if (iWindow == null) {\n        // info window already deleted\n        return Promise.resolve();\n      }\n\n      return iWindow.then(function (i) {\n        return _this40._zone.run(function () {\n          i.close();\n\n          _this40._infoWindows.delete(infoWindow);\n        });\n      });\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(infoWindow) {\n      return this._infoWindows.get(infoWindow).then(function (i) {\n        return i.setPosition({\n          lat: infoWindow.latitude,\n          lng: infoWindow.longitude\n        });\n      });\n    }\n  }, {\n    key: \"setZIndex\",\n    value: function setZIndex(infoWindow) {\n      return this._infoWindows.get(infoWindow).then(function (i) {\n        return i.setZIndex(infoWindow.zIndex);\n      });\n    }\n  }, {\n    key: \"open\",\n    value: function open(infoWindow) {\n      var _this41 = this;\n\n      return this._infoWindows.get(infoWindow).then(function (w) {\n        if (infoWindow.hostMarker != null) {\n          return _this41._markerManager.getNativeMarker(infoWindow.hostMarker).then(function (marker) {\n            return _this41._mapsWrapper.getNativeMap().then(function (map) {\n              return w.open(map, marker);\n            });\n          });\n        }\n\n        return _this41._mapsWrapper.getNativeMap().then(function (map) {\n          return w.open(map);\n        });\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close(infoWindow) {\n      return this._infoWindows.get(infoWindow).then(function (w) {\n        return w.close();\n      });\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(infoWindow, options) {\n      return this._infoWindows.get(infoWindow).then(function (i) {\n        return i.setOptions(options);\n      });\n    }\n  }, {\n    key: \"addInfoWindow\",\n    value: function addInfoWindow(infoWindow) {\n      var options = {\n        content: infoWindow.content,\n        maxWidth: infoWindow.maxWidth,\n        zIndex: infoWindow.zIndex,\n        disableAutoPan: infoWindow.disableAutoPan\n      };\n\n      if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n        options.position = {\n          lat: infoWindow.latitude,\n          lng: infoWindow.longitude\n        };\n      }\n\n      var infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n\n      this._infoWindows.set(infoWindow, infoWindowPromise);\n    }\n    /**\n     * Creates a Google Maps event listener for the given InfoWindow as an Observable\n     */\n\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, infoWindow) {\n      var _this42 = this;\n\n      return new Observable(function (observer) {\n        _this42._infoWindows.get(infoWindow).then(function (i) {\n          i.addListener(eventName, function (e) {\n            return _this42._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return InfoWindowManager;\n}();\n\nInfoWindowManager.ɵfac = function InfoWindowManager_Factory(t) {\n  return new (t || InfoWindowManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(NgZone), ɵngcc0.ɵɵinject(MarkerManager));\n};\n\nInfoWindowManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: InfoWindowManager,\n  factory: InfoWindowManager.ɵfac\n});\n\nInfoWindowManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }, {\n    type: MarkerManager\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(InfoWindowManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: NgZone\n    }, {\n      type: MarkerManager\n    }];\n  }, null);\n})();\n/**\n * Manages all KML Layers for a Google Map instance.\n */\n\n\nvar KmlLayerManager = /*#__PURE__*/function () {\n  function KmlLayerManager(_wrapper, _zone) {\n    _classCallCheck(this, KmlLayerManager);\n\n    this._wrapper = _wrapper;\n    this._zone = _zone;\n    this._layers = new Map();\n  }\n  /**\n   * Adds a new KML Layer to the map.\n   */\n\n\n  _createClass(KmlLayerManager, [{\n    key: \"addKmlLayer\",\n    value: function addKmlLayer(layer) {\n      var newLayer = this._wrapper.getNativeMap().then(function (m) {\n        return new google.maps.KmlLayer({\n          clickable: layer.clickable,\n          map: m,\n          preserveViewport: layer.preserveViewport,\n          screenOverlays: layer.screenOverlays,\n          suppressInfoWindows: layer.suppressInfoWindows,\n          url: layer.url,\n          zIndex: layer.zIndex\n        });\n      });\n\n      this._layers.set(layer, newLayer);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(layer, options) {\n      this._layers.get(layer).then(function (l) {\n        return l.setOptions(options);\n      });\n    }\n  }, {\n    key: \"deleteKmlLayer\",\n    value: function deleteKmlLayer(layer) {\n      var _this43 = this;\n\n      this._layers.get(layer).then(function (l) {\n        l.setMap(null);\n\n        _this43._layers.delete(layer);\n      });\n    }\n    /**\n     * Creates a Google Maps event listener for the given KmlLayer as an Observable\n     */\n\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, layer) {\n      var _this44 = this;\n\n      return new Observable(function (observer) {\n        _this44._layers.get(layer).then(function (m) {\n          m.addListener(eventName, function (e) {\n            return _this44._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return KmlLayerManager;\n}();\n\nKmlLayerManager.ɵfac = function KmlLayerManager_Factory(t) {\n  return new (t || KmlLayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(NgZone));\n};\n\nKmlLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: KmlLayerManager,\n  factory: KmlLayerManager.ɵfac\n});\n\nKmlLayerManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(KmlLayerManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: NgZone\n    }];\n  }, null);\n})();\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\n\n\nvar LayerManager = /*#__PURE__*/function () {\n  function LayerManager(_wrapper) {\n    _classCallCheck(this, LayerManager);\n\n    this._wrapper = _wrapper;\n    this._layers = new Map();\n  }\n  /**\n   * Adds a transit layer to a map instance.\n   * @param layer - a TransitLayer object\n   * @param _options - TransitLayerOptions options\n   * @returns void\n   */\n\n\n  _createClass(LayerManager, [{\n    key: \"addTransitLayer\",\n    value: function addTransitLayer(layer) {\n      var newLayer = this._wrapper.createTransitLayer();\n\n      this._layers.set(layer, newLayer);\n    }\n    /**\n     * Adds a bicycling layer to a map instance.\n     * @param layer - a bicycling layer object\n     * @param _options - BicyclingLayer options\n     * @returns void\n     */\n\n  }, {\n    key: \"addBicyclingLayer\",\n    value: function addBicyclingLayer(layer) {\n      var newLayer = this._wrapper.createBicyclingLayer();\n\n      this._layers.set(layer, newLayer);\n    }\n    /**\n     * Deletes a map layer\n     * @param layer - the layer to delete\n     */\n\n  }, {\n    key: \"deleteLayer\",\n    value: function deleteLayer(layer) {\n      var _this45 = this;\n\n      return this._layers.get(layer).then(function (currentLayer) {\n        currentLayer.setMap(null);\n\n        _this45._layers.delete(layer);\n      });\n    }\n  }]);\n\n  return LayerManager;\n}();\n\nLayerManager.ɵfac = function LayerManager_Factory(t) {\n  return new (t || LayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper));\n};\n\nLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: LayerManager,\n  factory: LayerManager.ɵfac\n});\n\nLayerManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LayerManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }];\n  }, null);\n})();\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\n\n\nvar NoOpMapsAPILoader = /*#__PURE__*/function () {\n  function NoOpMapsAPILoader() {\n    _classCallCheck(this, NoOpMapsAPILoader);\n  }\n\n  _createClass(NoOpMapsAPILoader, [{\n    key: \"load\",\n    value: function load() {\n      if (!window.google || !window.google.maps) {\n        throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\n      }\n\n      return Promise.resolve();\n    }\n  }]);\n\n  return NoOpMapsAPILoader;\n}();\n\nfunction createMVCEventObservable(array) {\n  var eventNames = ['insert_at', 'remove_at', 'set_at'];\n  return fromEventPattern(function (handler) {\n    return eventNames.map(function (eventName) {\n      return array.addListener(eventName, function (index, previous) {\n        return handler.apply(array, [{\n          newArr: array.getArray(),\n          eventName: eventName,\n          index: index,\n          previous: previous\n        }]);\n      });\n    });\n  }, function (_handler, evListeners) {\n    return evListeners.forEach(function (evListener) {\n      return evListener.remove();\n    });\n  });\n}\n\nvar MvcArrayMock = /*#__PURE__*/function () {\n  function MvcArrayMock() {\n    _classCallCheck(this, MvcArrayMock);\n\n    this.vals = [];\n    this.listeners = {\n      remove_at: [],\n      insert_at: [],\n      set_at: []\n    };\n  }\n\n  _createClass(MvcArrayMock, [{\n    key: \"clear\",\n    value: function clear() {\n      for (var i = this.vals.length - 1; i >= 0; i--) {\n        this.removeAt(i);\n      }\n    }\n  }, {\n    key: \"getArray\",\n    value: function getArray() {\n      return _toConsumableArray(this.vals);\n    }\n  }, {\n    key: \"getAt\",\n    value: function getAt(i) {\n      return this.vals[i];\n    }\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.vals.length;\n    }\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(i, elem) {\n      this.vals.splice(i, 0, elem);\n      this.listeners.insert_at.forEach(function (listener) {\n        return listener(i);\n      });\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var _this46 = this;\n\n      var deleted = this.vals.pop();\n      this.listeners.remove_at.forEach(function (listener) {\n        return listener(_this46.vals.length, deleted);\n      });\n      return deleted;\n    }\n  }, {\n    key: \"push\",\n    value: function push(elem) {\n      var _this47 = this;\n\n      this.vals.push(elem);\n      this.listeners.insert_at.forEach(function (listener) {\n        return listener(_this47.vals.length - 1);\n      });\n      return this.vals.length;\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(i) {\n      var deleted = this.vals.splice(i, 1)[0];\n      this.listeners.remove_at.forEach(function (listener) {\n        return listener(i, deleted);\n      });\n      return deleted;\n    }\n  }, {\n    key: \"setAt\",\n    value: function setAt(i, elem) {\n      var deleted = this.vals[i];\n      this.vals[i] = elem;\n      this.listeners.set_at.forEach(function (listener) {\n        return listener(i, deleted);\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      this.vals.forEach(callback);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(eventName, handler) {\n      var listenerArr = this.listeners[eventName];\n      listenerArr.push(handler);\n      return {\n        remove: function remove() {\n          listenerArr.splice(listenerArr.indexOf(handler), 1);\n        }\n      };\n    }\n  }, {\n    key: \"bindTo\",\n    value: function bindTo() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"changed\",\n    value: function changed() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"notify\",\n    value: function notify() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"setValues\",\n    value: function setValues() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"unbindAll\",\n    value: function unbindAll() {\n      throw new Error('Not implemented');\n    }\n  }]);\n\n  return MvcArrayMock;\n}();\n\nvar PolygonManager = /*#__PURE__*/function () {\n  function PolygonManager(_mapsWrapper, _zone) {\n    _classCallCheck(this, PolygonManager);\n\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._polygons = new Map();\n  }\n\n  _createClass(PolygonManager, [{\n    key: \"addPolygon\",\n    value: function addPolygon(path) {\n      var polygonPromise = this._mapsWrapper.createPolygon({\n        clickable: path.clickable,\n        draggable: path.draggable,\n        editable: path.editable,\n        fillColor: path.fillColor,\n        fillOpacity: path.fillOpacity,\n        geodesic: path.geodesic,\n        paths: path.paths,\n        strokeColor: path.strokeColor,\n        strokeOpacity: path.strokeOpacity,\n        strokeWeight: path.strokeWeight,\n        visible: path.visible,\n        zIndex: path.zIndex\n      });\n\n      this._polygons.set(path, polygonPromise);\n    }\n  }, {\n    key: \"updatePolygon\",\n    value: function updatePolygon(polygon) {\n      var _this48 = this;\n\n      var m = this._polygons.get(polygon);\n\n      if (m == null) {\n        return Promise.resolve();\n      }\n\n      return m.then(function (l) {\n        return _this48._zone.run(function () {\n          l.setPaths(polygon.paths);\n        });\n      });\n    }\n  }, {\n    key: \"setPolygonOptions\",\n    value: function setPolygonOptions(path, options) {\n      return this._polygons.get(path).then(function (l) {\n        l.setOptions(options);\n      });\n    }\n  }, {\n    key: \"deletePolygon\",\n    value: function deletePolygon(paths) {\n      var _this49 = this;\n\n      var m = this._polygons.get(paths);\n\n      if (m == null) {\n        return Promise.resolve();\n      }\n\n      return m.then(function (l) {\n        return _this49._zone.run(function () {\n          l.setMap(null);\n\n          _this49._polygons.delete(paths);\n        });\n      });\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath(polygonDirective) {\n      return this._polygons.get(polygonDirective).then(function (polygon) {\n        return polygon.getPath().getArray();\n      });\n    }\n  }, {\n    key: \"getPaths\",\n    value: function getPaths(polygonDirective) {\n      return this._polygons.get(polygonDirective).then(function (polygon) {\n        return polygon.getPaths().getArray().map(function (p) {\n          return p.getArray();\n        });\n      });\n    }\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, path) {\n      var _this50 = this;\n\n      return new Observable(function (observer) {\n        _this50._polygons.get(path).then(function (l) {\n          l.addListener(eventName, function (e) {\n            return _this50._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"createPathEventObservable\",\n    value: function createPathEventObservable(agmPolygon) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var polygon, paths, pathsChanges$;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._polygons.get(agmPolygon);\n\n              case 2:\n                polygon = _context5.sent;\n                paths = polygon.getPaths();\n                pathsChanges$ = createMVCEventObservable(paths);\n                return _context5.abrupt(\"return\", pathsChanges$.pipe(startWith({\n                  newArr: paths.getArray()\n                }), // in order to subscribe to them all\n                switchMap(function (parentMVEvent) {\n                  return merge.apply(void 0, _toConsumableArray( // rest parameter\n                  parentMVEvent.newArr.map(function (chMVC, index) {\n                    return createMVCEventObservable(chMVC).pipe(map(function (chMVCEvent) {\n                      return {\n                        parentMVEvent: parentMVEvent,\n                        chMVCEvent: chMVCEvent,\n                        pathIndex: index\n                      };\n                    }));\n                  }))).pipe( // start the merged ob with an event signinifing change to parent\n                  startWith({\n                    parentMVEvent: parentMVEvent,\n                    chMVCEvent: null,\n                    pathIndex: null\n                  }));\n                }), skip(1), // skip the manually added event\n                map(function (_ref3) {\n                  var parentMVEvent = _ref3.parentMVEvent,\n                      chMVCEvent = _ref3.chMVCEvent,\n                      pathIndex = _ref3.pathIndex;\n                  var retVal;\n\n                  if (!chMVCEvent) {\n                    retVal = {\n                      newArr: parentMVEvent.newArr.map(function (subArr) {\n                        return subArr.getArray().map(function (latLng) {\n                          return latLng.toJSON();\n                        });\n                      }),\n                      eventName: parentMVEvent.eventName,\n                      index: parentMVEvent.index\n                    };\n\n                    if (parentMVEvent.previous) {\n                      retVal.previous = parentMVEvent.previous.getArray();\n                    }\n                  } else {\n                    retVal = {\n                      newArr: parentMVEvent.newArr.map(function (subArr) {\n                        return subArr.getArray().map(function (latLng) {\n                          return latLng.toJSON();\n                        });\n                      }),\n                      pathIndex: pathIndex,\n                      eventName: chMVCEvent.eventName,\n                      index: chMVCEvent.index\n                    };\n\n                    if (chMVCEvent.previous) {\n                      retVal.previous = chMVCEvent.previous;\n                    }\n                  }\n\n                  return retVal;\n                })));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }]);\n\n  return PolygonManager;\n}();\n\nPolygonManager.ɵfac = function PolygonManager_Factory(t) {\n  return new (t || PolygonManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(NgZone));\n};\n\nPolygonManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: PolygonManager,\n  factory: PolygonManager.ɵfac\n});\n\nPolygonManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PolygonManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: NgZone\n    }];\n  }, null);\n})();\n\nvar PolylineManager = /*#__PURE__*/function () {\n  function PolylineManager(_mapsWrapper, _zone) {\n    _classCallCheck(this, PolylineManager);\n\n    this._mapsWrapper = _mapsWrapper;\n    this._zone = _zone;\n    this._polylines = new Map();\n  }\n\n  _createClass(PolylineManager, [{\n    key: \"addPolyline\",\n    value: function addPolyline(line) {\n      var _this51 = this;\n\n      var polylinePromise = this._mapsWrapper.getNativeMap().then(function () {\n        return [PolylineManager._convertPoints(line), PolylineManager._convertIcons(line)];\n      }).then(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n            path = _ref5[0],\n            icons = _ref5[1];\n\n        return _this51._mapsWrapper.createPolyline({\n          clickable: line.clickable,\n          draggable: line.draggable,\n          editable: line.editable,\n          geodesic: line.geodesic,\n          strokeColor: line.strokeColor,\n          strokeOpacity: line.strokeOpacity,\n          strokeWeight: line.strokeWeight,\n          visible: line.visible,\n          zIndex: line.zIndex,\n          path: path,\n          icons: icons\n        });\n      });\n\n      this._polylines.set(line, polylinePromise);\n    }\n  }, {\n    key: \"updatePolylinePoints\",\n    value: function updatePolylinePoints(line) {\n      var _this52 = this;\n\n      var path = PolylineManager._convertPoints(line);\n\n      var m = this._polylines.get(line);\n\n      if (m == null) {\n        return Promise.resolve();\n      }\n\n      return m.then(function (l) {\n        return _this52._zone.run(function () {\n          return l.setPath(path);\n        });\n      });\n    }\n  }, {\n    key: \"updateIconSequences\",\n    value: function updateIconSequences(line) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _this53 = this;\n\n        var icons, m;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._mapsWrapper.getNativeMap();\n\n              case 2:\n                icons = PolylineManager._convertIcons(line);\n                m = this._polylines.get(line);\n\n                if (!(m == null)) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 6:\n                return _context6.abrupt(\"return\", m.then(function (l) {\n                  return _this53._zone.run(function () {\n                    return l.setOptions({\n                      icons: icons\n                    });\n                  });\n                }));\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"setPolylineOptions\",\n    value: function setPolylineOptions(line, options) {\n      return this._polylines.get(line).then(function (l) {\n        l.setOptions(options);\n      });\n    }\n  }, {\n    key: \"deletePolyline\",\n    value: function deletePolyline(line) {\n      var _this54 = this;\n\n      var m = this._polylines.get(line);\n\n      if (m == null) {\n        return Promise.resolve();\n      }\n\n      return m.then(function (l) {\n        return _this54._zone.run(function () {\n          l.setMap(null);\n\n          _this54._polylines.delete(line);\n        });\n      });\n    }\n  }, {\n    key: \"getMVCPath\",\n    value: function getMVCPath(agmPolyline) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var polyline;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._polylines.get(agmPolyline);\n\n              case 2:\n                polyline = _context7.sent;\n                return _context7.abrupt(\"return\", polyline.getPath());\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath(agmPolyline) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getMVCPath(agmPolyline);\n\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent.getArray());\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, line) {\n      var _this55 = this;\n\n      return new Observable(function (observer) {\n        _this55._polylines.get(line).then(function (l) {\n          l.addListener(eventName, function (e) {\n            return _this55._zone.run(function () {\n              return observer.next(e);\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"createPathEventObservable\",\n    value: function createPathEventObservable(line) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var mvcPath;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getMVCPath(line);\n\n              case 2:\n                mvcPath = _context9.sent;\n                return _context9.abrupt(\"return\", createMVCEventObservable(mvcPath));\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n  }], [{\n    key: \"_convertPoints\",\n    value: function _convertPoints(line) {\n      var path = line._getPoints().map(function (point) {\n        return {\n          lat: point.latitude,\n          lng: point.longitude\n        };\n      });\n\n      return path;\n    }\n  }, {\n    key: \"_convertPath\",\n    value: function _convertPath(path) {\n      var symbolPath = google.maps.SymbolPath[path];\n\n      if (typeof symbolPath === 'number') {\n        return symbolPath;\n      } else {\n        return path;\n      }\n    }\n  }, {\n    key: \"_convertIcons\",\n    value: function _convertIcons(line) {\n      var icons = line._getIcons().map(function (agmIcon) {\n        return {\n          fixedRotation: agmIcon.fixedRotation,\n          offset: agmIcon.offset,\n          repeat: agmIcon.repeat,\n          icon: {\n            anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n            fillColor: agmIcon.fillColor,\n            fillOpacity: agmIcon.fillOpacity,\n            path: PolylineManager._convertPath(agmIcon.path),\n            rotation: agmIcon.rotation,\n            scale: agmIcon.scale,\n            strokeColor: agmIcon.strokeColor,\n            strokeOpacity: agmIcon.strokeOpacity,\n            strokeWeight: agmIcon.strokeWeight\n          }\n        };\n      }); // prune undefineds;\n\n\n      icons.forEach(function (icon) {\n        Object.entries(icon).forEach(function (_ref6) {\n          var _ref7 = _slicedToArray(_ref6, 2),\n              key = _ref7[0],\n              val = _ref7[1];\n\n          if (typeof val === 'undefined') {\n            delete icon[key];\n          }\n        });\n\n        if (typeof icon.icon.anchor.x === 'undefined' || typeof icon.icon.anchor.y === 'undefined') {\n          delete icon.icon.anchor;\n        }\n      });\n      return icons;\n    }\n  }]);\n\n  return PolylineManager;\n}();\n\nPolylineManager.ɵfac = function PolylineManager_Factory(t) {\n  return new (t || PolylineManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(NgZone));\n};\n\nPolylineManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: PolylineManager,\n  factory: PolylineManager.ɵfac\n});\n\nPolylineManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PolylineManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: NgZone\n    }];\n  }, null);\n})();\n\nvar RectangleManager = /*#__PURE__*/function () {\n  function RectangleManager(_apiWrapper, _zone) {\n    _classCallCheck(this, RectangleManager);\n\n    this._apiWrapper = _apiWrapper;\n    this._zone = _zone;\n    this._rectangles = new Map();\n  }\n\n  _createClass(RectangleManager, [{\n    key: \"addRectangle\",\n    value: function addRectangle(rectangle) {\n      var _this56 = this;\n\n      this._apiWrapper.getNativeMap().then(function () {\n        return _this56._rectangles.set(rectangle, _this56._apiWrapper.createRectangle({\n          bounds: {\n            north: rectangle.north,\n            east: rectangle.east,\n            south: rectangle.south,\n            west: rectangle.west\n          },\n          clickable: rectangle.clickable,\n          draggable: rectangle.draggable,\n          editable: rectangle.editable,\n          fillColor: rectangle.fillColor,\n          fillOpacity: rectangle.fillOpacity,\n          strokeColor: rectangle.strokeColor,\n          strokeOpacity: rectangle.strokeOpacity,\n          strokePosition: google.maps.StrokePosition[rectangle.strokePosition],\n          strokeWeight: rectangle.strokeWeight,\n          visible: rectangle.visible,\n          zIndex: rectangle.zIndex\n        }));\n      });\n    }\n    /**\n     * Removes the given rectangle from the map.\n     */\n\n  }, {\n    key: \"removeRectangle\",\n    value: function removeRectangle(rectangle) {\n      var _this57 = this;\n\n      return this._rectangles.get(rectangle).then(function (r) {\n        r.setMap(null);\n\n        _this57._rectangles.delete(rectangle);\n      });\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(rectangle, options) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        var actualStrokePosition = options.strokePosition;\n        options.strokePosition = google.maps.StrokePosition[actualStrokePosition];\n        r.setOptions(options);\n      });\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(rectangle) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.getBounds();\n      });\n    }\n  }, {\n    key: \"setBounds\",\n    value: function setBounds(rectangle) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.setBounds({\n          north: rectangle.north,\n          east: rectangle.east,\n          south: rectangle.south,\n          west: rectangle.west\n        });\n      });\n    }\n  }, {\n    key: \"setEditable\",\n    value: function setEditable(rectangle) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.setEditable(rectangle.editable);\n      });\n    }\n  }, {\n    key: \"setDraggable\",\n    value: function setDraggable(rectangle) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.setDraggable(rectangle.draggable);\n      });\n    }\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(rectangle) {\n      return this._rectangles.get(rectangle).then(function (r) {\n        return r.setVisible(rectangle.visible);\n      });\n    }\n  }, {\n    key: \"createEventObservable\",\n    value: function createEventObservable(eventName, rectangle) {\n      var _this58 = this;\n\n      return new Observable(function (subsrciber) {\n        var listener = null;\n\n        _this58._rectangles.get(rectangle).then(function (r) {\n          listener = r.addListener(eventName, function (e) {\n            return _this58._zone.run(function () {\n              return subsrciber.next(e);\n            });\n          });\n        });\n\n        return function () {\n          if (listener !== null) {\n            listener.remove();\n          }\n        };\n      });\n    }\n  }]);\n\n  return RectangleManager;\n}();\n\nRectangleManager.ɵfac = function RectangleManager_Factory(t) {\n  return new (t || RectangleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(NgZone));\n};\n\nRectangleManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: RectangleManager,\n  factory: RectangleManager.ɵfac\n});\n\nRectangleManager.ctorParameters = function () {\n  return [{\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RectangleManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: NgZone\n    }];\n  }, null);\n})();\n\nvar layerId = 0;\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\n\nvar AgmBicyclingLayer = /*#__PURE__*/function () {\n  function AgmBicyclingLayer(_manager) {\n    _classCallCheck(this, AgmBicyclingLayer);\n\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId++).toString();\n    /**\n     * Hide/show bicycling layer\n     */\n\n    this.visible = true;\n  }\n\n  _createClass(AgmBicyclingLayer, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this._addedToManager) {\n        return;\n      }\n\n      this._manager.addBicyclingLayer(this);\n\n      this._addedToManager = true;\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AgmBicyclingLayer-\".concat(this._id.toString());\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._manager.deleteLayer(this);\n    }\n  }]);\n\n  return AgmBicyclingLayer;\n}();\n\nAgmBicyclingLayer.ɵfac = function AgmBicyclingLayer_Factory(t) {\n  return new (t || AgmBicyclingLayer)(ɵngcc0.ɵɵdirectiveInject(LayerManager));\n};\n\nAgmBicyclingLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmBicyclingLayer,\n  selectors: [[\"agm-bicycling-layer\"]],\n  inputs: {\n    visible: \"visible\"\n  }\n});\n\nAgmBicyclingLayer.ctorParameters = function () {\n  return [{\n    type: LayerManager\n  }];\n};\n\nAgmBicyclingLayer.propDecorators = {\n  visible: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmBicyclingLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-bicycling-layer'\n    }]\n  }], function () {\n    return [{\n      type: LayerManager\n    }];\n  }, {\n    visible: [{\n      type: Input\n    }]\n  });\n})();\n\nvar AgmCircle = /*#__PURE__*/function () {\n  function AgmCircle(_manager) {\n    _classCallCheck(this, AgmCircle);\n\n    this._manager = _manager;\n    /**\n     * Indicates whether this Circle handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this circle over the map. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this circle by dragging the control points shown at\n     * the center and around the circumference of the circle. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * The radius in meters on the Earth's surface.\n     */\n\n    this.radius = 0;\n    /**\n     * The stroke position. Defaults to CENTER.\n     * This property is not supported on Internet Explorer 8 and earlier.\n     */\n\n    this.strokePosition = 'CENTER';\n    /**\n     * The stroke width in pixels.\n     */\n\n    this.strokeWeight = 0;\n    /**\n     * Whether this circle is visible on the map. Defaults to true.\n     */\n\n    this.visible = true;\n    /**\n     * This event is fired when the circle's center is changed.\n     */\n\n    this.centerChange = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the circle.\n     */\n\n    this.circleClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the circle.\n     */\n\n    this.circleDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the circle.\n     */\n    // tslint:disable-next-line: no-output-native\n\n    this.drag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the circle.\n     */\n\n    this.dragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the circle.\n     */\n\n    this.dragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the circle.\n     */\n\n    this.mouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the circle.\n     */\n\n    this.mouseMove = new EventEmitter();\n    /**\n     * This event is fired on circle mouseout.\n     */\n\n    this.mouseOut = new EventEmitter();\n    /**\n     * This event is fired on circle mouseover.\n     */\n\n    this.mouseOver = new EventEmitter();\n    /**\n     * This event is fired when the DOM mouseup event is fired on the circle.\n     */\n\n    this.mouseUp = new EventEmitter();\n    /**\n     * This event is fired when the circle's radius is changed.\n     */\n\n    this.radiusChange = new EventEmitter();\n    /**\n     * This event is fired when the circle is right-clicked on.\n     */\n\n    this.rightClick = new EventEmitter();\n    this._circleAddedToManager = false;\n    this._eventSubscriptions = [];\n  }\n  /** @internal */\n\n\n  _createClass(AgmCircle, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._manager.addCircle(this);\n\n      this._circleAddedToManager = true;\n\n      this._registerEventListeners();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._circleAddedToManager) {\n        return;\n      } // tslint:disable: no-string-literal\n\n\n      if (changes['latitude'] || changes['longitude']) {\n        this._manager.setCenter(this);\n      }\n\n      if (changes['editable']) {\n        this._manager.setEditable(this);\n      }\n\n      if (changes['draggable']) {\n        this._manager.setDraggable(this);\n      }\n\n      if (changes['visible']) {\n        this._manager.setVisible(this);\n      }\n\n      if (changes['radius']) {\n        this._manager.setRadius(this);\n      } // tslint:enable: no-string-literal\n\n\n      this._updateCircleOptionsChanges(changes);\n    }\n  }, {\n    key: \"_updateCircleOptionsChanges\",\n    value: function _updateCircleOptionsChanges(changes) {\n      var options = {};\n      var optionKeys = Object.keys(changes).filter(function (k) {\n        return AgmCircle._mapOptions.indexOf(k) !== -1;\n      });\n      optionKeys.forEach(function (k) {\n        options[k] = changes[k].currentValue;\n      });\n\n      if (optionKeys.length > 0) {\n        this._manager.setOptions(this, options);\n      }\n    }\n  }, {\n    key: \"_registerEventListeners\",\n    value: function _registerEventListeners() {\n      var _this59 = this;\n\n      var events = new Map();\n      events.set('center_changed', this.centerChange);\n      events.set('click', this.circleClick);\n      events.set('dblclick', this.circleDblClick);\n      events.set('drag', this.drag);\n      events.set('dragend', this.dragEnd);\n      events.set('dragstart', this.dragStart);\n      events.set('mousedown', this.mouseDown);\n      events.set('mousemove', this.mouseMove);\n      events.set('mouseout', this.mouseOut);\n      events.set('mouseover', this.mouseOver);\n      events.set('mouseup', this.mouseUp);\n      events.set('radius_changed', this.radiusChange);\n      events.set('rightclick', this.rightClick);\n      events.forEach(function (eventEmitter, eventName) {\n        _this59._eventSubscriptions.push(_this59._manager.createEventObservable(eventName, _this59).subscribe(function (value) {\n          switch (eventName) {\n            case 'radius_changed':\n              _this59._manager.getRadius(_this59).then(function (radius) {\n                return eventEmitter.emit(radius);\n              });\n\n              break;\n\n            case 'center_changed':\n              _this59._manager.getCenter(_this59).then(function (center) {\n                return eventEmitter.emit({\n                  lat: center.lat(),\n                  lng: center.lng()\n                });\n              });\n\n              break;\n\n            default:\n              eventEmitter.emit(value);\n          }\n        }));\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventSubscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n\n      this._eventSubscriptions = null;\n\n      this._manager.removeCircle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Circle.\n     */\n\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return this._manager.getBounds(this);\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return this._manager.getCenter(this);\n    }\n  }]);\n\n  return AgmCircle;\n}();\n\nAgmCircle.ɵfac = function AgmCircle_Factory(t) {\n  return new (t || AgmCircle)(ɵngcc0.ɵɵdirectiveInject(CircleManager));\n};\n\nAgmCircle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmCircle,\n  selectors: [[\"agm-circle\"]],\n  inputs: {\n    clickable: \"clickable\",\n    draggable: [\"circleDraggable\", \"draggable\"],\n    editable: \"editable\",\n    radius: \"radius\",\n    strokePosition: \"strokePosition\",\n    strokeWeight: \"strokeWeight\",\n    visible: \"visible\",\n    latitude: \"latitude\",\n    longitude: \"longitude\",\n    fillColor: \"fillColor\",\n    fillOpacity: \"fillOpacity\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    zIndex: \"zIndex\"\n  },\n  outputs: {\n    centerChange: \"centerChange\",\n    circleClick: \"circleClick\",\n    circleDblClick: \"circleDblClick\",\n    drag: \"drag\",\n    dragEnd: \"dragEnd\",\n    dragStart: \"dragStart\",\n    mouseDown: \"mouseDown\",\n    mouseMove: \"mouseMove\",\n    mouseOut: \"mouseOut\",\n    mouseOver: \"mouseOver\",\n    mouseUp: \"mouseUp\",\n    radiusChange: \"radiusChange\",\n    rightClick: \"rightClick\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmCircle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];\n\nAgmCircle.ctorParameters = function () {\n  return [{\n    type: CircleManager\n  }];\n};\n\nAgmCircle.propDecorators = {\n  latitude: [{\n    type: Input\n  }],\n  longitude: [{\n    type: Input\n  }],\n  clickable: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['circleDraggable']\n  }],\n  editable: [{\n    type: Input\n  }],\n  fillColor: [{\n    type: Input\n  }],\n  fillOpacity: [{\n    type: Input\n  }],\n  radius: [{\n    type: Input\n  }],\n  strokeColor: [{\n    type: Input\n  }],\n  strokeOpacity: [{\n    type: Input\n  }],\n  strokePosition: [{\n    type: Input\n  }],\n  strokeWeight: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  centerChange: [{\n    type: Output\n  }],\n  circleClick: [{\n    type: Output\n  }],\n  circleDblClick: [{\n    type: Output\n  }],\n  drag: [{\n    type: Output\n  }],\n  dragEnd: [{\n    type: Output\n  }],\n  dragStart: [{\n    type: Output\n  }],\n  mouseDown: [{\n    type: Output\n  }],\n  mouseMove: [{\n    type: Output\n  }],\n  mouseOut: [{\n    type: Output\n  }],\n  mouseOver: [{\n    type: Output\n  }],\n  mouseUp: [{\n    type: Output\n  }],\n  radiusChange: [{\n    type: Output\n  }],\n  rightClick: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmCircle, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-circle'\n    }]\n  }], function () {\n    return [{\n      type: CircleManager\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: ['circleDraggable']\n    }],\n    editable: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    strokePosition: [{\n      type: Input\n    }],\n    strokeWeight: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    centerChange: [{\n      type: Output\n    }],\n    circleClick: [{\n      type: Output\n    }],\n    circleDblClick: [{\n      type: Output\n    }],\n    drag: [{\n      type: Output\n    }],\n    dragEnd: [{\n      type: Output\n    }],\n    dragStart: [{\n      type: Output\n    }],\n    mouseDown: [{\n      type: Output\n    }],\n    mouseMove: [{\n      type: Output\n    }],\n    mouseOut: [{\n      type: Output\n    }],\n    mouseOver: [{\n      type: Output\n    }],\n    mouseUp: [{\n      type: Output\n    }],\n    radiusChange: [{\n      type: Output\n    }],\n    rightClick: [{\n      type: Output\n    }],\n    latitude: [{\n      type: Input\n    }],\n    longitude: [{\n      type: Input\n    }],\n    fillColor: [{\n      type: Input\n    }],\n    fillOpacity: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeOpacity: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }]\n  });\n})();\n\nvar layerId$1 = 0;\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\n\nvar AgmDataLayer = /*#__PURE__*/function () {\n  function AgmDataLayer(_manager) {\n    _classCallCheck(this, AgmDataLayer);\n\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId$1++).toString();\n    this._subscriptions = [];\n    /**\n     * This event is fired when a feature in the layer is clicked.\n     */\n\n    this.layerClick = new EventEmitter();\n    /**\n     * The geoJson to be displayed\n     */\n\n    this.geoJson = null;\n  }\n\n  _createClass(AgmDataLayer, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this._addedToManager) {\n        return;\n      }\n\n      this._manager.addDataLayer(this);\n\n      this._addedToManager = true;\n\n      this._addEventListeners();\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this60 = this;\n\n      var listeners = [{\n        name: 'click',\n        handler: function handler(ev) {\n          return _this60.layerClick.emit(ev);\n        }\n      }];\n      listeners.forEach(function (obj) {\n        var os = _this60._manager.createEventObservable(obj.name, _this60).subscribe(obj.handler);\n\n        _this60._subscriptions.push(os);\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AgmDataLayer-\".concat(this._id.toString());\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._manager.deleteDataLayer(this); // unsubscribe all registered observable subscriptions\n\n\n      this._subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this61 = this;\n\n      if (!this._addedToManager) {\n        return;\n      } // tslint:disable-next-line: no-string-literal\n\n\n      var geoJsonChange = changes['geoJson'];\n\n      if (geoJsonChange) {\n        this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n      }\n\n      var dataOptions = AgmDataLayer._dataOptionsAttributes.reduce(function (options, k) {\n        return options[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : _this61[k];\n      }, {});\n\n      this._manager.setDataOptions(this, dataOptions);\n    }\n  }]);\n\n  return AgmDataLayer;\n}();\n\nAgmDataLayer.ɵfac = function AgmDataLayer_Factory(t) {\n  return new (t || AgmDataLayer)(ɵngcc0.ɵɵdirectiveInject(DataLayerManager));\n};\n\nAgmDataLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmDataLayer,\n  selectors: [[\"agm-data-layer\"]],\n  inputs: {\n    geoJson: \"geoJson\",\n    style: \"style\"\n  },\n  outputs: {\n    layerClick: \"layerClick\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmDataLayer._dataOptionsAttributes = ['style'];\n\nAgmDataLayer.ctorParameters = function () {\n  return [{\n    type: DataLayerManager\n  }];\n};\n\nAgmDataLayer.propDecorators = {\n  layerClick: [{\n    type: Output\n  }],\n  geoJson: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmDataLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-data-layer'\n    }]\n  }], function () {\n    return [{\n      type: DataLayerManager\n    }];\n  }, {\n    layerClick: [{\n      type: Output\n    }],\n    geoJson: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\n\n\nvar AgmFitBounds = /*#__PURE__*/function () {\n  function AgmFitBounds(_fitBoundsAccessor, _fitBoundsService) {\n    _classCallCheck(this, AgmFitBounds);\n\n    this._fitBoundsAccessor = _fitBoundsAccessor;\n    this._fitBoundsService = _fitBoundsService;\n    /**\n     * If the value is true, the element gets added to the bounds of the map.\n     * Default: true.\n     */\n\n    this.agmFitBounds = true;\n    this._destroyed$ = new Subject();\n    this._latestFitBoundsDetails = null;\n  }\n  /**\n   * @internal\n   */\n\n\n  _createClass(AgmFitBounds, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._updateBounds();\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this62 = this;\n\n      this._fitBoundsAccessor.getFitBoundsDetails$().pipe(distinctUntilChanged(function (x, y) {\n        return x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng;\n      }), takeUntil(this._destroyed$)).subscribe(function (details) {\n        return _this62._updateBounds(details);\n      });\n    }\n    /*\n     Either the location changed, or visible status changed.\n     Possible state changes are\n     invisible -> visible\n     visible -> invisible\n     visible -> visible (new location)\n    */\n\n  }, {\n    key: \"_updateBounds\",\n    value: function _updateBounds(newFitBoundsDetails) {\n      // either visibility will change, or location, so remove the old one anyway\n      if (this._latestFitBoundsDetails) {\n        this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng); // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n        // true -> false -> true, in which case we still need old value cached here\n\n      }\n\n      if (newFitBoundsDetails) {\n        this._latestFitBoundsDetails = newFitBoundsDetails;\n      }\n\n      if (!this._latestFitBoundsDetails) {\n        return;\n      }\n\n      if (this.agmFitBounds === true) {\n        this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed$.next();\n\n      this._destroyed$.complete();\n\n      if (this._latestFitBoundsDetails !== null) {\n        this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n      }\n    }\n  }]);\n\n  return AgmFitBounds;\n}();\n\nAgmFitBounds.ɵfac = function AgmFitBounds_Factory(t) {\n  return new (t || AgmFitBounds)(ɵngcc0.ɵɵdirectiveInject(FitBoundsAccessor, 2), ɵngcc0.ɵɵdirectiveInject(FitBoundsService));\n};\n\nAgmFitBounds.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmFitBounds,\n  selectors: [[\"\", \"agmFitBounds\", \"\"]],\n  inputs: {\n    agmFitBounds: \"agmFitBounds\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nAgmFitBounds.ctorParameters = function () {\n  return [{\n    type: FitBoundsAccessor,\n    decorators: [{\n      type: Self\n    }]\n  }, {\n    type: FitBoundsService\n  }];\n};\n\nAgmFitBounds.propDecorators = {\n  agmFitBounds: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmFitBounds, [{\n    type: Directive,\n    args: [{\n      selector: '[agmFitBounds]'\n    }]\n  }], function () {\n    return [{\n      type: FitBoundsAccessor,\n      decorators: [{\n        type: Self\n      }]\n    }, {\n      type: FitBoundsService\n    }];\n  }, {\n    agmFitBounds: [{\n      type: Input\n    }]\n  });\n})();\n\nvar infoWindowId = 0;\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nvar AgmInfoWindow = /*#__PURE__*/function () {\n  function AgmInfoWindow(_infoWindowManager, _el) {\n    _classCallCheck(this, AgmInfoWindow);\n\n    this._infoWindowManager = _infoWindowManager;\n    this._el = _el;\n    /**\n     * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n     */\n\n    this.isOpen = false;\n    /**\n     * Emits an event when the info window is closed.\n     */\n\n    this.infoWindowClose = new EventEmitter();\n    this._infoWindowAddedToManager = false;\n    this._id = (infoWindowId++).toString();\n  }\n\n  _createClass(AgmInfoWindow, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n\n      this._infoWindowManager.addInfoWindow(this);\n\n      this._infoWindowAddedToManager = true;\n\n      this._updateOpenState();\n\n      this._registerEventListeners();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._infoWindowAddedToManager) {\n        return;\n      } // tslint:disable: no-string-literal\n\n\n      if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' && typeof this.longitude === 'number') {\n        this._infoWindowManager.setPosition(this);\n      }\n\n      if (changes['zIndex']) {\n        this._infoWindowManager.setZIndex(this);\n      }\n\n      if (changes['isOpen']) {\n        this._updateOpenState();\n      }\n\n      this._setInfoWindowOptions(changes);\n    } // tslint:enable: no-string-literal\n\n  }, {\n    key: \"_registerEventListeners\",\n    value: function _registerEventListeners() {\n      var _this63 = this;\n\n      this._infoWindowManager.createEventObservable('closeclick', this).subscribe(function () {\n        _this63.isOpen = false;\n\n        _this63.infoWindowClose.emit();\n      });\n    }\n  }, {\n    key: \"_updateOpenState\",\n    value: function _updateOpenState() {\n      this.isOpen ? this.open() : this.close();\n    }\n  }, {\n    key: \"_setInfoWindowOptions\",\n    value: function _setInfoWindowOptions(changes) {\n      var options = {};\n      var optionKeys = Object.keys(changes).filter(function (k) {\n        return AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1;\n      });\n      optionKeys.forEach(function (k) {\n        options[k] = changes[k].currentValue;\n      });\n\n      this._infoWindowManager.setOptions(this, options);\n    }\n    /**\n     * Opens the info window.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this._infoWindowManager.open(this);\n    }\n    /**\n     * Closes the info window.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this64 = this;\n\n      return this._infoWindowManager.close(this).then(function () {\n        _this64.infoWindowClose.emit();\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'AgmInfoWindow-' + this._id.toString();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._infoWindowManager.deleteInfoWindow(this);\n    }\n  }]);\n\n  return AgmInfoWindow;\n}();\n\nAgmInfoWindow.ɵfac = function AgmInfoWindow_Factory(t) {\n  return new (t || AgmInfoWindow)(ɵngcc0.ɵɵdirectiveInject(InfoWindowManager), ɵngcc0.ɵɵdirectiveInject(ElementRef));\n};\n\nAgmInfoWindow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AgmInfoWindow,\n  selectors: [[\"agm-info-window\"]],\n  inputs: {\n    isOpen: \"isOpen\",\n    latitude: \"latitude\",\n    longitude: \"longitude\",\n    disableAutoPan: \"disableAutoPan\",\n    zIndex: \"zIndex\",\n    maxWidth: \"maxWidth\"\n  },\n  outputs: {\n    infoWindowClose: \"infoWindowClose\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"agm-info-window-content\"]],\n  template: function AgmInfoWindow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\nAgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\n\nAgmInfoWindow.ctorParameters = function () {\n  return [{\n    type: InfoWindowManager\n  }, {\n    type: ElementRef\n  }];\n};\n\nAgmInfoWindow.propDecorators = {\n  latitude: [{\n    type: Input\n  }],\n  longitude: [{\n    type: Input\n  }],\n  disableAutoPan: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  maxWidth: [{\n    type: Input\n  }],\n  isOpen: [{\n    type: Input\n  }],\n  infoWindowClose: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmInfoWindow, [{\n    type: Component,\n    args: [{\n      selector: 'agm-info-window',\n      template: \"<div class='agm-info-window-content'>\\n      <ng-content></ng-content>\\n    </div>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: InfoWindowManager\n    }, {\n      type: ElementRef\n    }];\n  }, {\n    isOpen: [{\n      type: Input\n    }],\n    infoWindowClose: [{\n      type: Output\n    }],\n    latitude: [{\n      type: Input\n    }],\n    longitude: [{\n      type: Input\n    }],\n    disableAutoPan: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    maxWidth: [{\n      type: Input\n    }]\n  });\n})();\n\nvar layerId$2 = 0;\n\nvar AgmKmlLayer = /*#__PURE__*/function () {\n  function AgmKmlLayer(_manager) {\n    _classCallCheck(this, AgmKmlLayer);\n\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId$2++).toString();\n    this._subscriptions = [];\n    /**\n     * If true, the layer receives mouse events. Default value is true.\n     */\n\n    this.clickable = true;\n    /**\n     * By default, the input map is centered and zoomed to the bounding box of the contents of the\n     * layer.\n     * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n     * were never set.\n     */\n\n    this.preserveViewport = false;\n    /**\n     * Whether to render the screen overlays. Default true.\n     */\n\n    this.screenOverlays = true;\n    /**\n     * Suppress the rendering of info windows when layer features are clicked.\n     */\n\n    this.suppressInfoWindows = false;\n    /**\n     * The URL of the KML document to display.\n     */\n\n    this.url = null;\n    /**\n     * The z-index of the layer.\n     */\n\n    this.zIndex = null;\n    /**\n     * This event is fired when a feature in the layer is clicked.\n     */\n\n    this.layerClick = new EventEmitter();\n    /**\n     * This event is fired when the KML layers default viewport has changed.\n     */\n\n    this.defaultViewportChange = new EventEmitter();\n    /**\n     * This event is fired when the KML layer has finished loading.\n     * At this point it is safe to read the status property to determine if the layer loaded\n     * successfully.\n     */\n\n    this.statusChange = new EventEmitter();\n  }\n\n  _createClass(AgmKmlLayer, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this._addedToManager) {\n        return;\n      }\n\n      this._manager.addKmlLayer(this);\n\n      this._addedToManager = true;\n\n      this._addEventListeners();\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._addedToManager) {\n        return;\n      }\n\n      this._updatePolygonOptions(changes);\n    }\n  }, {\n    key: \"_updatePolygonOptions\",\n    value: function _updatePolygonOptions(changes) {\n      var options = Object.keys(changes).filter(function (k) {\n        return AgmKmlLayer._kmlLayerOptions.indexOf(k) !== -1;\n      }).reduce(function (obj, k) {\n        obj[k] = changes[k].currentValue;\n        return obj;\n      }, {});\n\n      if (Object.keys(options).length > 0) {\n        this._manager.setOptions(this, options);\n      }\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this65 = this;\n\n      var listeners = [{\n        name: 'click',\n        handler: function handler(ev) {\n          return _this65.layerClick.emit(ev);\n        }\n      }, {\n        name: 'defaultviewport_changed',\n        handler: function handler() {\n          return _this65.defaultViewportChange.emit();\n        }\n      }, {\n        name: 'status_changed',\n        handler: function handler() {\n          return _this65.statusChange.emit();\n        }\n      }];\n      listeners.forEach(function (obj) {\n        var os = _this65._manager.createEventObservable(obj.name, _this65).subscribe(obj.handler);\n\n        _this65._subscriptions.push(os);\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AgmKmlLayer-\".concat(this._id.toString());\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._manager.deleteKmlLayer(this); // unsubscribe all registered observable subscriptions\n\n\n      this._subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n  }]);\n\n  return AgmKmlLayer;\n}();\n\nAgmKmlLayer.ɵfac = function AgmKmlLayer_Factory(t) {\n  return new (t || AgmKmlLayer)(ɵngcc0.ɵɵdirectiveInject(KmlLayerManager));\n};\n\nAgmKmlLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmKmlLayer,\n  selectors: [[\"agm-kml-layer\"]],\n  inputs: {\n    clickable: \"clickable\",\n    preserveViewport: \"preserveViewport\",\n    screenOverlays: \"screenOverlays\",\n    suppressInfoWindows: \"suppressInfoWindows\",\n    url: \"url\",\n    zIndex: \"zIndex\"\n  },\n  outputs: {\n    layerClick: \"layerClick\",\n    defaultViewportChange: \"defaultViewportChange\",\n    statusChange: \"statusChange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\n\nAgmKmlLayer.ctorParameters = function () {\n  return [{\n    type: KmlLayerManager\n  }];\n};\n\nAgmKmlLayer.propDecorators = {\n  clickable: [{\n    type: Input\n  }],\n  preserveViewport: [{\n    type: Input\n  }],\n  screenOverlays: [{\n    type: Input\n  }],\n  suppressInfoWindows: [{\n    type: Input\n  }],\n  url: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  layerClick: [{\n    type: Output\n  }],\n  defaultViewportChange: [{\n    type: Output\n  }],\n  statusChange: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmKmlLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-kml-layer'\n    }]\n  }], function () {\n    return [{\n      type: KmlLayerManager\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    preserveViewport: [{\n      type: Input\n    }],\n    screenOverlays: [{\n      type: Input\n    }],\n    suppressInfoWindows: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    layerClick: [{\n      type: Output\n    }],\n    defaultViewportChange: [{\n      type: Output\n    }],\n    statusChange: [{\n      type: Output\n    }]\n  });\n})();\n\nvar AgmMapControl = function AgmMapControl() {\n  _classCallCheck(this, AgmMapControl);\n};\n\nAgmMapControl.ɵfac = function AgmMapControl_Factory(t) {\n  return new (t || AgmMapControl)();\n};\n\nAgmMapControl.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmMapControl,\n  inputs: {\n    position: \"position\"\n  }\n});\nAgmMapControl.propDecorators = {\n  position: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmMapControl, [{\n    type: Directive\n  }], null, {\n    position: [{\n      type: Input\n    }]\n  });\n})();\n\nvar AgmFullscreenControl = /*#__PURE__*/function (_AgmMapControl) {\n  _inherits(AgmFullscreenControl, _AgmMapControl);\n\n  var _super2 = _createSuper(AgmFullscreenControl);\n\n  function AgmFullscreenControl() {\n    _classCallCheck(this, AgmFullscreenControl);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(AgmFullscreenControl, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return {\n        fullscreenControl: true,\n        fullscreenControlOptions: {\n          position: this.position && google.maps.ControlPosition[this.position]\n        }\n      };\n    }\n  }]);\n\n  return AgmFullscreenControl;\n}(AgmMapControl);\n\nAgmFullscreenControl.ɵfac = function AgmFullscreenControl_Factory(t) {\n  return ɵAgmFullscreenControl_BaseFactory(t || AgmFullscreenControl);\n};\n\nAgmFullscreenControl.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmFullscreenControl,\n  selectors: [[\"agm-fullscreen-control\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: AgmMapControl,\n    useExisting: AgmFullscreenControl\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵAgmFullscreenControl_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AgmFullscreenControl);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmFullscreenControl, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-map agm-fullscreen-control',\n      providers: [{\n        provide: AgmMapControl,\n        useExisting: AgmFullscreenControl\n      }]\n    }]\n  }], null, null);\n})();\n\nvar AgmMapTypeControl = /*#__PURE__*/function (_AgmMapControl2) {\n  _inherits(AgmMapTypeControl, _AgmMapControl2);\n\n  var _super3 = _createSuper(AgmMapTypeControl);\n\n  function AgmMapTypeControl() {\n    _classCallCheck(this, AgmMapTypeControl);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(AgmMapTypeControl, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return {\n        mapTypeControl: true,\n        mapTypeControlOptions: {\n          position: this.position && google.maps.ControlPosition[this.position],\n          style: this.style && google.maps.MapTypeControlStyle[this.style],\n          mapTypeIds: this.mapTypeIds && this.mapTypeIds.map(function (mapTypeId) {\n            return google.maps.MapTypeId[mapTypeId];\n          })\n        }\n      };\n    }\n  }]);\n\n  return AgmMapTypeControl;\n}(AgmMapControl);\n\nAgmMapTypeControl.ɵfac = function AgmMapTypeControl_Factory(t) {\n  return ɵAgmMapTypeControl_BaseFactory(t || AgmMapTypeControl);\n};\n\nAgmMapTypeControl.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmMapTypeControl,\n  selectors: [[\"agm-map-type-control\"]],\n  inputs: {\n    mapTypeIds: \"mapTypeIds\",\n    style: \"style\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: AgmMapControl,\n    useExisting: AgmMapTypeControl\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nAgmMapTypeControl.propDecorators = {\n  mapTypeIds: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }]\n};\nvar ɵAgmMapTypeControl_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AgmMapTypeControl);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmMapTypeControl, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-map agm-map-type-control',\n      providers: [{\n        provide: AgmMapControl,\n        useExisting: AgmMapTypeControl\n      }]\n    }]\n  }], null, {\n    mapTypeIds: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }]\n  });\n})();\n\nvar AgmPanControl = /*#__PURE__*/function (_AgmMapControl3) {\n  _inherits(AgmPanControl, _AgmMapControl3);\n\n  var _super4 = _createSuper(AgmPanControl);\n\n  function AgmPanControl() {\n    _classCallCheck(this, AgmPanControl);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(AgmPanControl, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return {\n        panControl: true,\n        panControlOptions: {\n          position: this.position && google.maps.ControlPosition[this.position]\n        }\n      };\n    }\n  }]);\n\n  return AgmPanControl;\n}(AgmMapControl);\n\nAgmPanControl.ɵfac = function AgmPanControl_Factory(t) {\n  return ɵAgmPanControl_BaseFactory(t || AgmPanControl);\n};\n\nAgmPanControl.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmPanControl,\n  selectors: [[\"agm-pan-control\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: AgmMapControl,\n    useExisting: AgmPanControl\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵAgmPanControl_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AgmPanControl);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmPanControl, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-map agm-pan-control',\n      providers: [{\n        provide: AgmMapControl,\n        useExisting: AgmPanControl\n      }]\n    }]\n  }], null, null);\n})();\n\nvar AgmRotateControl = /*#__PURE__*/function (_AgmMapControl4) {\n  _inherits(AgmRotateControl, _AgmMapControl4);\n\n  var _super5 = _createSuper(AgmRotateControl);\n\n  function AgmRotateControl() {\n    _classCallCheck(this, AgmRotateControl);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(AgmRotateControl, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return {\n        rotateControl: true,\n        rotateControlOptions: {\n          position: this.position && google.maps.ControlPosition[this.position]\n        }\n      };\n    }\n  }]);\n\n  return AgmRotateControl;\n}(AgmMapControl);\n\nAgmRotateControl.ɵfac = function AgmRotateControl_Factory(t) {\n  return ɵAgmRotateControl_BaseFactory(t || AgmRotateControl);\n};\n\nAgmRotateControl.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmRotateControl,\n  selectors: [[\"agm-rotate-control\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: AgmMapControl,\n    useExisting: AgmRotateControl\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵAgmRotateControl_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AgmRotateControl);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmRotateControl, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-map agm-rotate-control',\n      providers: [{\n        provide: AgmMapControl,\n        useExisting: AgmRotateControl\n      }]\n    }]\n  }], null, null);\n})();\n\nvar AgmScaleControl = /*#__PURE__*/function (_AgmMapControl5) {\n  _inherits(AgmScaleControl, _AgmMapControl5);\n\n  var _super6 = _createSuper(AgmScaleControl);\n\n  function AgmScaleControl() {\n    _classCallCheck(this, AgmScaleControl);\n\n    return _super6.apply(this, arguments);\n  }\n\n  _createClass(AgmScaleControl, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return {\n        scaleControl: true\n      };\n    }\n  }]);\n\n  return AgmScaleControl;\n}(AgmMapControl);\n\nAgmScaleControl.ɵfac = function AgmScaleControl_Factory(t) {\n  return ɵAgmScaleControl_BaseFactory(t || AgmScaleControl);\n};\n\nAgmScaleControl.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmScaleControl,\n  selectors: [[\"agm-scale-control\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: AgmMapControl,\n    useExisting: AgmScaleControl\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵAgmScaleControl_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AgmScaleControl);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmScaleControl, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-map agm-scale-control',\n      providers: [{\n        provide: AgmMapControl,\n        useExisting: AgmScaleControl\n      }]\n    }]\n  }], null, null);\n})();\n\nvar AgmStreetViewControl = /*#__PURE__*/function (_AgmMapControl6) {\n  _inherits(AgmStreetViewControl, _AgmMapControl6);\n\n  var _super7 = _createSuper(AgmStreetViewControl);\n\n  function AgmStreetViewControl() {\n    _classCallCheck(this, AgmStreetViewControl);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(AgmStreetViewControl, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return {\n        streetViewControl: true,\n        streetViewControlOptions: {\n          position: this.position && google.maps.ControlPosition[this.position]\n        }\n      };\n    }\n  }]);\n\n  return AgmStreetViewControl;\n}(AgmMapControl);\n\nAgmStreetViewControl.ɵfac = function AgmStreetViewControl_Factory(t) {\n  return ɵAgmStreetViewControl_BaseFactory(t || AgmStreetViewControl);\n};\n\nAgmStreetViewControl.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmStreetViewControl,\n  selectors: [[\"agm-street-view-control\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: AgmMapControl,\n    useExisting: AgmStreetViewControl\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵAgmStreetViewControl_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AgmStreetViewControl);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmStreetViewControl, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-map agm-street-view-control',\n      providers: [{\n        provide: AgmMapControl,\n        useExisting: AgmStreetViewControl\n      }]\n    }]\n  }], null, null);\n})();\n\nvar AgmZoomControl = /*#__PURE__*/function (_AgmMapControl7) {\n  _inherits(AgmZoomControl, _AgmMapControl7);\n\n  var _super8 = _createSuper(AgmZoomControl);\n\n  function AgmZoomControl() {\n    _classCallCheck(this, AgmZoomControl);\n\n    return _super8.apply(this, arguments);\n  }\n\n  _createClass(AgmZoomControl, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return {\n        zoomControl: true,\n        zoomControlOptions: {\n          position: this.position && google.maps.ControlPosition[this.position],\n          style: this.style && google.maps.ZoomControlStyle[this.style]\n        }\n      };\n    }\n  }]);\n\n  return AgmZoomControl;\n}(AgmMapControl);\n\nAgmZoomControl.ɵfac = function AgmZoomControl_Factory(t) {\n  return ɵAgmZoomControl_BaseFactory(t || AgmZoomControl);\n};\n\nAgmZoomControl.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmZoomControl,\n  selectors: [[\"agm-zoom-control\"]],\n  inputs: {\n    style: \"style\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: AgmMapControl,\n    useExisting: AgmZoomControl\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nAgmZoomControl.propDecorators = {\n  style: [{\n    type: Input\n  }]\n};\nvar ɵAgmZoomControl_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AgmZoomControl);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmZoomControl, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-map agm-zoom-control',\n      providers: [{\n        provide: AgmMapControl,\n        useExisting: AgmZoomControl\n      }]\n    }]\n  }], null, {\n    style: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\n\nvar AgmMap = /*#__PURE__*/function () {\n  function AgmMap(_elem, _mapsWrapper, // tslint:disable-next-line: ban-types\n  _platformId, _fitBoundsService, _zone) {\n    _classCallCheck(this, AgmMap);\n\n    this._elem = _elem;\n    this._mapsWrapper = _mapsWrapper;\n    this._platformId = _platformId;\n    this._fitBoundsService = _fitBoundsService;\n    this._zone = _zone;\n    /**\n     * The longitude that defines the center of the map.\n     */\n\n    this.longitude = 0;\n    /**\n     * The latitude that defines the center of the map.\n     */\n\n    this.latitude = 0;\n    /**\n     * The zoom level of the map. The default zoom level is 8.\n     */\n\n    this.zoom = 8;\n    /**\n     * Enables/disables if map is draggable.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = true;\n    /**\n     * Enables/disables zoom and center on double click. Enabled by default.\n     */\n\n    this.disableDoubleClickZoom = false;\n    /**\n     * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n     * value cannot get updated.\n     */\n\n    this.disableDefaultUI = false;\n    /**\n     * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n     */\n\n    this.scrollwheel = true;\n    /**\n     * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n     * enabled by default.\n     */\n\n    this.keyboardShortcuts = true;\n    /**\n     * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n     * modes, these styles will only apply to labels and geometry.\n     */\n\n    this.styles = [];\n    /**\n     * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n     * used to\n     * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n     */\n\n    this.usePanning = false;\n    /**\n     * Sets the viewport to contain the given bounds.\n     * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n     */\n\n    this.fitBounds = false;\n    /**\n     * The map mapTypeId. Defaults to 'roadmap'.\n     */\n\n    this.mapTypeId = 'ROADMAP';\n    /**\n     * When false, map icons are not clickable. A map icon represents a point of interest,\n     * also known as a POI. By default map icons are clickable.\n     */\n\n    this.clickableIcons = true;\n    /**\n     * A map icon represents a point of interest, also known as a POI.\n     * When map icons are clickable by default, an info window is displayed.\n     * When this property is set to false, the info window will not be shown but the click event\n     * will still fire\n     */\n\n    this.showDefaultInfoWindow = true;\n    /**\n     * This setting controls how gestures on the map are handled.\n     * Allowed values:\n     * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n     * - 'greedy'      (All touch gestures pan or zoom the map.)\n     * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n     * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n     */\n\n    this.gestureHandling = 'auto';\n    /**\n     * Controls the automatic switching behavior for the angle of incidence of\n     * the map. The only allowed values are 0 and 45. The value 0 causes the map\n     * to always use a 0° overhead view regardless of the zoom level and\n     * viewport. The value 45 causes the tilt angle to automatically switch to\n     * 45 whenever 45° imagery is available for the current zoom level and\n     * viewport, and switch back to 0 whenever 45° imagery is not available\n     * (this is the default behavior). 45° imagery is only available for\n     * satellite and hybrid map types, within some locations, and at some zoom\n     * levels. Note: getTilt returns the current tilt angle, not the value\n     * specified by this option. Because getTilt and this option refer to\n     * different things, do not bind() the tilt property; doing so may yield\n     * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n     */\n\n    this.tilt = 0;\n    this._observableSubscriptions = [];\n    /**\n     * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n     * marker or infoWindow).\n     */\n    // tslint:disable-next-line: max-line-length\n\n    this.mapClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     */\n\n    this.mapRightClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     */\n\n    this.mapDblClick = new EventEmitter();\n    /**\n     * This event emitter is fired when the map center changes.\n     */\n\n    this.centerChange = new EventEmitter();\n    /**\n     * This event is fired when the viewport bounds have changed.\n     */\n\n    this.boundsChange = new EventEmitter();\n    /**\n     * This event is fired when the mapTypeId property changes.\n     */\n\n    this.mapTypeIdChange = new EventEmitter();\n    /**\n     * This event is fired when the map becomes idle after panning or zooming.\n     */\n\n    this.idle = new EventEmitter();\n    /**\n     * This event is fired when the zoom level has changed.\n     */\n\n    this.zoomChange = new EventEmitter();\n    /**\n     * This event is fired when the google map is fully initialized.\n     * You get the google.maps.Map instance as a result of this EventEmitter.\n     */\n\n    this.mapReady = new EventEmitter();\n    /**\n     * This event is fired when the visible tiles have finished loading.\n     */\n\n    this.tilesLoaded = new EventEmitter();\n  }\n  /** @internal */\n\n\n  _createClass(AgmMap, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      if (isPlatformServer(this._platformId)) {\n        // The code is running on the server, do nothing\n        return;\n      } // todo: this should be solved with a new component and a viewChild decorator\n\n\n      var container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n\n      this._initMapInstance(container);\n    }\n  }, {\n    key: \"_initMapInstance\",\n    value: function _initMapInstance(el) {\n      var _this66 = this;\n\n      this._mapsWrapper.createMap(el, {\n        center: {\n          lat: this.latitude || 0,\n          lng: this.longitude || 0\n        },\n        zoom: this.zoom,\n        minZoom: this.minZoom,\n        maxZoom: this.maxZoom,\n        controlSize: this.controlSize,\n        disableDefaultUI: this.disableDefaultUI,\n        disableDoubleClickZoom: this.disableDoubleClickZoom,\n        scrollwheel: this.scrollwheel,\n        backgroundColor: this.backgroundColor,\n        draggable: this.draggable,\n        draggableCursor: this.draggableCursor,\n        draggingCursor: this.draggingCursor,\n        keyboardShortcuts: this.keyboardShortcuts,\n        styles: this.styles,\n        mapTypeId: this.mapTypeId.toLocaleLowerCase(),\n        clickableIcons: this.clickableIcons,\n        gestureHandling: this.gestureHandling,\n        tilt: this.tilt,\n        restriction: this.restriction\n      }).then(function () {\n        return _this66._mapsWrapper.getNativeMap();\n      }).then(function (map) {\n        return _this66.mapReady.emit(map);\n      }); // register event listeners\n\n\n      this._handleMapCenterChange();\n\n      this._handleMapZoomChange();\n\n      this._handleMapMouseEvents();\n\n      this._handleBoundsChange();\n\n      this._handleMapTypeIdChange();\n\n      this._handleTilesLoadedEvent();\n\n      this._handleIdleEvent();\n\n      this._handleControlChange();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // unsubscribe all registered observable subscriptions\n      this._observableSubscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      }); // remove all listeners from the map instance\n\n\n      this._mapsWrapper.clearInstanceListeners();\n\n      if (this._fitBoundsSubscription) {\n        this._fitBoundsSubscription.unsubscribe();\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this._updateMapOptionsChanges(changes);\n\n      this._updatePosition(changes);\n    }\n  }, {\n    key: \"_updateMapOptionsChanges\",\n    value: function _updateMapOptionsChanges(changes) {\n      var options = {};\n      var optionKeys = Object.keys(changes).filter(function (k) {\n        return AgmMap._mapOptionsAttributes.indexOf(k) !== -1;\n      });\n      optionKeys.forEach(function (k) {\n        options[k] = changes[k].currentValue;\n      });\n\n      this._mapsWrapper.setMapOptions(options);\n    }\n    /**\n     * Triggers a resize event on the google map instance.\n     * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n     * Returns a promise that gets resolved after the event was triggered.\n     */\n\n  }, {\n    key: \"triggerResize\",\n    value: function triggerResize() {\n      var _this67 = this;\n\n      var recenter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      // Note: When we would trigger the resize event and show the map in the same turn (which is a\n      // common case for triggering a resize event), then the resize event would not\n      // work (to show the map), so we trigger the event in a timeout.\n      return new Promise(function (resolve) {\n        setTimeout(function () {\n          return _this67._mapsWrapper.triggerMapEvent('resize').then(function () {\n            if (recenter) {\n              _this67.fitBounds != null ? _this67._fitBounds() : _this67._setCenter();\n            }\n\n            resolve();\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_updatePosition\",\n    value: function _updatePosition(changes) {\n      // tslint:disable: no-string-literal\n      if (changes['latitude'] == null && changes['longitude'] == null && !changes['fitBounds']) {\n        // no position update needed\n        return;\n      } // tslint:enable: no-string-literal\n      // we prefer fitBounds in changes\n\n\n      if ('fitBounds' in changes) {\n        this._fitBounds();\n\n        return;\n      }\n\n      if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n        return;\n      }\n\n      this._setCenter();\n    }\n  }, {\n    key: \"_setCenter\",\n    value: function _setCenter() {\n      var newCenter = {\n        lat: this.latitude,\n        lng: this.longitude\n      };\n\n      if (this.usePanning) {\n        this._mapsWrapper.panTo(newCenter);\n      } else {\n        this._mapsWrapper.setCenter(newCenter);\n      }\n    }\n  }, {\n    key: \"_fitBounds\",\n    value: function _fitBounds() {\n      switch (this.fitBounds) {\n        case true:\n          this._subscribeToFitBoundsUpdates();\n\n          break;\n\n        case false:\n          if (this._fitBoundsSubscription) {\n            this._fitBoundsSubscription.unsubscribe();\n          }\n\n          break;\n\n        default:\n          if (this._fitBoundsSubscription) {\n            this._fitBoundsSubscription.unsubscribe();\n          }\n\n          this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n\n      }\n    }\n  }, {\n    key: \"_subscribeToFitBoundsUpdates\",\n    value: function _subscribeToFitBoundsUpdates() {\n      var _this68 = this;\n\n      this._zone.runOutsideAngular(function () {\n        _this68._fitBoundsSubscription = _this68._fitBoundsService.getBounds$().subscribe(function (b) {\n          _this68._zone.run(function () {\n            return _this68._updateBounds(b, _this68.fitBoundsPadding);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_updateBounds\",\n    value: function _updateBounds(bounds, padding) {\n      if (!bounds) {\n        return;\n      }\n\n      if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n        var newBounds = new google.maps.LatLngBounds();\n        newBounds.union(bounds);\n        bounds = newBounds;\n      }\n\n      if (this.usePanning) {\n        this._mapsWrapper.panToBounds(bounds, padding);\n\n        return;\n      }\n\n      this._mapsWrapper.fitBounds(bounds, padding);\n    }\n  }, {\n    key: \"_isLatLngBoundsLiteral\",\n    value: function _isLatLngBoundsLiteral(bounds) {\n      return bounds != null && bounds.extend === undefined;\n    }\n  }, {\n    key: \"_handleMapCenterChange\",\n    value: function _handleMapCenterChange() {\n      var _this69 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(function () {\n        _this69._mapsWrapper.getCenter().then(function (center) {\n          _this69.latitude = center.lat();\n          _this69.longitude = center.lng();\n\n          _this69.centerChange.emit({\n            lat: _this69.latitude,\n            lng: _this69.longitude\n          });\n        });\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleBoundsChange\",\n    value: function _handleBoundsChange() {\n      var _this70 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(function () {\n        _this70._mapsWrapper.getBounds().then(function (bounds) {\n          _this70.boundsChange.emit(bounds);\n        });\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleMapTypeIdChange\",\n    value: function _handleMapTypeIdChange() {\n      var _this71 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(function () {\n        _this71._mapsWrapper.getMapTypeId().then(function (mapTypeId) {\n          _this71.mapTypeIdChange.emit(mapTypeId);\n        });\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleMapZoomChange\",\n    value: function _handleMapZoomChange() {\n      var _this72 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(function () {\n        _this72._mapsWrapper.getZoom().then(function (z) {\n          _this72.zoom = z;\n\n          _this72.zoomChange.emit(z);\n        });\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleIdleEvent\",\n    value: function _handleIdleEvent() {\n      var _this73 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(function () {\n        _this73.idle.emit(void 0);\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleTilesLoadedEvent\",\n    value: function _handleTilesLoadedEvent() {\n      var _this74 = this;\n\n      var s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(function () {\n        return _this74.tilesLoaded.emit(void 0);\n      });\n\n      this._observableSubscriptions.push(s);\n    }\n  }, {\n    key: \"_handleMapMouseEvents\",\n    value: function _handleMapMouseEvents() {\n      var _this75 = this;\n\n      var events = [{\n        name: 'click',\n        emitter: this.mapClick\n      }, {\n        name: 'rightclick',\n        emitter: this.mapRightClick\n      }, {\n        name: 'dblclick',\n        emitter: this.mapDblClick\n      }];\n      events.forEach(function (e) {\n        var s = _this75._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 1),\n              event = _ref9[0];\n\n          // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n          if (event.placeId && !_this75.showDefaultInfoWindow) {\n            event.stop();\n          }\n\n          e.emitter.emit(event);\n        });\n\n        _this75._observableSubscriptions.push(s);\n      });\n    }\n  }, {\n    key: \"_handleControlChange\",\n    value: function _handleControlChange() {\n      var _this76 = this;\n\n      this._setControls();\n\n      this.mapControls.changes.subscribe(function () {\n        return _this76._setControls();\n      });\n    }\n  }, {\n    key: \"_setControls\",\n    value: function _setControls() {\n      var _this77 = this;\n\n      var controlOptions = {\n        fullscreenControl: !this.disableDefaultUI,\n        mapTypeControl: false,\n        panControl: false,\n        rotateControl: false,\n        scaleControl: false,\n        streetViewControl: !this.disableDefaultUI,\n        zoomControl: !this.disableDefaultUI\n      };\n\n      this._mapsWrapper.getNativeMap().then(function () {\n        _this77.mapControls.forEach(function (control) {\n          return Object.assign(controlOptions, control.getOptions());\n        });\n\n        _this77._mapsWrapper.setMapOptions(controlOptions);\n      });\n    }\n  }]);\n\n  return AgmMap;\n}();\n\nAgmMap.ɵfac = function AgmMap_Factory(t) {\n  return new (t || AgmMap)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(FitBoundsService), ɵngcc0.ɵɵdirectiveInject(NgZone));\n};\n\nAgmMap.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AgmMap,\n  selectors: [[\"agm-map\"]],\n  contentQueries: function AgmMap_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, AgmMapControl, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mapControls = _t);\n    }\n  },\n  inputs: {\n    longitude: \"longitude\",\n    latitude: \"latitude\",\n    zoom: \"zoom\",\n    draggable: [\"mapDraggable\", \"draggable\"],\n    disableDoubleClickZoom: \"disableDoubleClickZoom\",\n    disableDefaultUI: \"disableDefaultUI\",\n    scrollwheel: \"scrollwheel\",\n    keyboardShortcuts: \"keyboardShortcuts\",\n    styles: \"styles\",\n    usePanning: \"usePanning\",\n    fitBounds: \"fitBounds\",\n    mapTypeId: \"mapTypeId\",\n    clickableIcons: \"clickableIcons\",\n    showDefaultInfoWindow: \"showDefaultInfoWindow\",\n    gestureHandling: \"gestureHandling\",\n    tilt: \"tilt\",\n    minZoom: \"minZoom\",\n    maxZoom: \"maxZoom\",\n    controlSize: \"controlSize\",\n    backgroundColor: \"backgroundColor\",\n    draggableCursor: \"draggableCursor\",\n    draggingCursor: \"draggingCursor\",\n    fitBoundsPadding: \"fitBoundsPadding\",\n    restriction: \"restriction\"\n  },\n  outputs: {\n    mapClick: \"mapClick\",\n    mapRightClick: \"mapRightClick\",\n    mapDblClick: \"mapDblClick\",\n    centerChange: \"centerChange\",\n    boundsChange: \"boundsChange\",\n    mapTypeIdChange: \"mapTypeIdChange\",\n    idle: \"idle\",\n    zoomChange: \"zoomChange\",\n    mapReady: \"mapReady\",\n    tilesLoaded: \"tilesLoaded\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([CircleManager, DataLayerManager, DataLayerManager, FitBoundsService, GoogleMapsAPIWrapper, InfoWindowManager, KmlLayerManager, LayerManager, MarkerManager, PolygonManager, PolylineManager, RectangleManager]), ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[1, \"agm-map-container-inner\", \"sebm-google-map-container-inner\"], [1, \"agm-map-content\"]],\n  template: function AgmMap_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelement(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".agm-map-container-inner[_ngcontent-%COMP%] {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content[_ngcontent-%COMP%] {\\n      display:none;\\n    }\"]\n});\n/**\n * Map option attributes that can change over time\n */\n\nAgmMap._mapOptionsAttributes = ['disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor', 'keyboardShortcuts', 'styles', 'zoom', 'minZoom', 'maxZoom', 'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction'];\n\nAgmMap.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GoogleMapsAPIWrapper\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: FitBoundsService\n  }, {\n    type: NgZone\n  }];\n};\n\nAgmMap.propDecorators = {\n  longitude: [{\n    type: Input\n  }],\n  latitude: [{\n    type: Input\n  }],\n  zoom: [{\n    type: Input\n  }],\n  minZoom: [{\n    type: Input\n  }],\n  maxZoom: [{\n    type: Input\n  }],\n  controlSize: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['mapDraggable']\n  }],\n  disableDoubleClickZoom: [{\n    type: Input\n  }],\n  disableDefaultUI: [{\n    type: Input\n  }],\n  scrollwheel: [{\n    type: Input\n  }],\n  backgroundColor: [{\n    type: Input\n  }],\n  draggableCursor: [{\n    type: Input\n  }],\n  draggingCursor: [{\n    type: Input\n  }],\n  keyboardShortcuts: [{\n    type: Input\n  }],\n  styles: [{\n    type: Input\n  }],\n  usePanning: [{\n    type: Input\n  }],\n  fitBounds: [{\n    type: Input\n  }],\n  fitBoundsPadding: [{\n    type: Input\n  }],\n  mapTypeId: [{\n    type: Input\n  }],\n  clickableIcons: [{\n    type: Input\n  }],\n  showDefaultInfoWindow: [{\n    type: Input\n  }],\n  gestureHandling: [{\n    type: Input\n  }],\n  tilt: [{\n    type: Input\n  }],\n  restriction: [{\n    type: Input\n  }],\n  mapClick: [{\n    type: Output\n  }],\n  mapRightClick: [{\n    type: Output\n  }],\n  mapDblClick: [{\n    type: Output\n  }],\n  centerChange: [{\n    type: Output\n  }],\n  boundsChange: [{\n    type: Output\n  }],\n  mapTypeIdChange: [{\n    type: Output\n  }],\n  idle: [{\n    type: Output\n  }],\n  zoomChange: [{\n    type: Output\n  }],\n  mapReady: [{\n    type: Output\n  }],\n  tilesLoaded: [{\n    type: Output\n  }],\n  mapControls: [{\n    type: ContentChildren,\n    args: [AgmMapControl]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmMap, [{\n    type: Component,\n    args: [{\n      selector: 'agm-map',\n      providers: [CircleManager, DataLayerManager, DataLayerManager, FitBoundsService, GoogleMapsAPIWrapper, InfoWindowManager, KmlLayerManager, LayerManager, MarkerManager, PolygonManager, PolylineManager, RectangleManager],\n      template: \"\\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\\n              <div class='agm-map-content'>\\n                <ng-content></ng-content>\\n              </div>\\n  \",\n      styles: [\"\\n    .agm-map-container-inner {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content {\\n      display:none;\\n    }\\n  \"]\n    }]\n  }], function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: GoogleMapsAPIWrapper\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: FitBoundsService\n    }, {\n      type: NgZone\n    }];\n  }, {\n    longitude: [{\n      type: Input\n    }],\n    latitude: [{\n      type: Input\n    }],\n    zoom: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: ['mapDraggable']\n    }],\n    disableDoubleClickZoom: [{\n      type: Input\n    }],\n    disableDefaultUI: [{\n      type: Input\n    }],\n    scrollwheel: [{\n      type: Input\n    }],\n    keyboardShortcuts: [{\n      type: Input\n    }],\n    styles: [{\n      type: Input\n    }],\n    usePanning: [{\n      type: Input\n    }],\n    fitBounds: [{\n      type: Input\n    }],\n    mapTypeId: [{\n      type: Input\n    }],\n    clickableIcons: [{\n      type: Input\n    }],\n    showDefaultInfoWindow: [{\n      type: Input\n    }],\n    gestureHandling: [{\n      type: Input\n    }],\n    tilt: [{\n      type: Input\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    mapRightClick: [{\n      type: Output\n    }],\n    mapDblClick: [{\n      type: Output\n    }],\n    centerChange: [{\n      type: Output\n    }],\n    boundsChange: [{\n      type: Output\n    }],\n    mapTypeIdChange: [{\n      type: Output\n    }],\n    idle: [{\n      type: Output\n    }],\n    zoomChange: [{\n      type: Output\n    }],\n    mapReady: [{\n      type: Output\n    }],\n    tilesLoaded: [{\n      type: Output\n    }],\n    minZoom: [{\n      type: Input\n    }],\n    maxZoom: [{\n      type: Input\n    }],\n    controlSize: [{\n      type: Input\n    }],\n    backgroundColor: [{\n      type: Input\n    }],\n    draggableCursor: [{\n      type: Input\n    }],\n    draggingCursor: [{\n      type: Input\n    }],\n    fitBoundsPadding: [{\n      type: Input\n    }],\n    restriction: [{\n      type: Input\n    }],\n    mapControls: [{\n      type: ContentChildren,\n      args: [AgmMapControl]\n    }]\n  });\n})();\n\nvar markerId = 0;\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nvar AgmMarker = /*#__PURE__*/function () {\n  function AgmMarker(_markerManager) {\n    _classCallCheck(this, AgmMarker);\n\n    this._markerManager = _markerManager;\n    /**\n     * If true, the marker can be dragged. Default value is false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If true, the marker is visible\n     */\n\n    this.visible = true;\n    /**\n     * Whether to automatically open the child info window when the marker is clicked.\n     */\n\n    this.openInfoWindow = true;\n    /**\n     * The marker's opacity between 0.0 and 1.0.\n     */\n\n    this.opacity = 1;\n    /**\n     * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n     * front of markers with lower values. By default, markers are displayed according to their\n     * vertical position on screen, with lower markers appearing in front of markers further up the\n     * screen.\n     */\n\n    this.zIndex = 1;\n    /**\n     * If true, the marker can be clicked. Default value is true.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.clickable = true;\n    /**\n     * This event is fired when the marker's animation property changes.\n     */\n\n    this.animationChange = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the marker.\n     */\n\n    this.markerClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks twice on the marker.\n     */\n\n    this.markerDblClick = new EventEmitter();\n    /**\n     * This event is fired when the user rightclicks on the marker.\n     */\n\n    this.markerRightClick = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the marker.\n     */\n\n    this.dragStart = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the marker.\n     */\n    // tslint:disable-next-line: no-output-native\n\n    this.drag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the marker.\n     */\n\n    this.dragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user mouses over the marker.\n     */\n\n    this.mouseOver = new EventEmitter();\n    /**\n     * This event is fired when the user mouses outside the marker.\n     */\n\n    this.mouseOut = new EventEmitter();\n    /** @internal */\n\n    this.infoWindow = new QueryList();\n    this._markerAddedToManger = false;\n    this._observableSubscriptions = [];\n    this._fitBoundsDetails$ = new ReplaySubject(1);\n    this._id = (markerId++).toString();\n  }\n  /* @internal */\n\n\n  _createClass(AgmMarker, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this78 = this;\n\n      this.handleInfoWindowUpdate();\n      this.infoWindow.changes.subscribe(function () {\n        return _this78.handleInfoWindowUpdate();\n      });\n    }\n  }, {\n    key: \"handleInfoWindowUpdate\",\n    value: function handleInfoWindowUpdate() {\n      var _this79 = this;\n\n      if (this.infoWindow.length > 1) {\n        throw new Error('Expected no more than one info window.');\n      }\n\n      this.infoWindow.forEach(function (marker) {\n        marker.hostMarker = _this79;\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (typeof this.latitude === 'string') {\n        this.latitude = Number(this.latitude);\n      }\n\n      if (typeof this.longitude === 'string') {\n        this.longitude = Number(this.longitude);\n      }\n\n      if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n        return;\n      }\n\n      if (!this._markerAddedToManger) {\n        this._markerManager.addMarker(this);\n\n        this._updateFitBoundsDetails();\n\n        this._markerAddedToManger = true;\n\n        this._addEventListeners();\n\n        return;\n      } // tslint:disable: no-string-literal\n\n\n      if (changes['latitude'] || changes['longitude']) {\n        this._markerManager.updateMarkerPosition(this);\n\n        this._updateFitBoundsDetails();\n      }\n\n      if (changes['title']) {\n        this._markerManager.updateTitle(this);\n      }\n\n      if (changes['label']) {\n        this._markerManager.updateLabel(this);\n      }\n\n      if (changes['draggable']) {\n        this._markerManager.updateDraggable(this);\n      }\n\n      if (changes['iconUrl']) {\n        this._markerManager.updateIcon(this);\n      }\n\n      if (changes['opacity']) {\n        this._markerManager.updateOpacity(this);\n      }\n\n      if (changes['visible']) {\n        this._markerManager.updateVisible(this);\n      }\n\n      if (changes['zIndex']) {\n        this._markerManager.updateZIndex(this);\n      }\n\n      if (changes['clickable']) {\n        this._markerManager.updateClickable(this);\n      }\n\n      if (changes['animation']) {\n        this._markerManager.updateAnimation(this);\n      } // tslint:enable: no-string-literal\n\n    }\n    /** @internal */\n\n  }, {\n    key: \"getFitBoundsDetails$\",\n    value: function getFitBoundsDetails$() {\n      return this._fitBoundsDetails$.asObservable();\n    }\n  }, {\n    key: \"_updateFitBoundsDetails\",\n    value: function _updateFitBoundsDetails() {\n      this._fitBoundsDetails$.next({\n        latLng: {\n          lat: this.latitude,\n          lng: this.longitude\n        }\n      });\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this80 = this;\n\n      var cs = this._markerManager.createEventObservable('click', this).subscribe(function () {\n        if (_this80.openInfoWindow) {\n          _this80.infoWindow.forEach(function (infoWindow) {\n            return infoWindow.open();\n          });\n        }\n\n        _this80.markerClick.emit(_this80);\n      });\n\n      this._observableSubscriptions.push(cs);\n\n      var dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(function () {\n        _this80.markerDblClick.emit(null);\n      });\n\n      this._observableSubscriptions.push(dcs);\n\n      var rc = this._markerManager.createEventObservable('rightclick', this).subscribe(function () {\n        _this80.markerRightClick.emit(null);\n      });\n\n      this._observableSubscriptions.push(rc);\n\n      var ds = this._markerManager.createEventObservable('dragstart', this).subscribe(function (e) {\n        return _this80.dragStart.emit(e);\n      });\n\n      this._observableSubscriptions.push(ds);\n\n      var d = this._markerManager.createEventObservable('drag', this).subscribe(function (e) {\n        return _this80.drag.emit(e);\n      });\n\n      this._observableSubscriptions.push(d);\n\n      var de = this._markerManager.createEventObservable('dragend', this).subscribe(function (e) {\n        return _this80.dragEnd.emit(e);\n      });\n\n      this._observableSubscriptions.push(de);\n\n      var mover = this._markerManager.createEventObservable('mouseover', this).subscribe(function (e) {\n        return _this80.mouseOver.emit(e);\n      });\n\n      this._observableSubscriptions.push(mover);\n\n      var mout = this._markerManager.createEventObservable('mouseout', this).subscribe(function (e) {\n        return _this80.mouseOut.emit(e);\n      });\n\n      this._observableSubscriptions.push(mout);\n\n      var anChng = this._markerManager.createEventObservable('animation_changed', this).subscribe(function () {\n        _this80.animationChange.emit(_this80.animation);\n      });\n\n      this._observableSubscriptions.push(anChng);\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'AgmMarker-' + this._id.toString();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._markerManager.deleteMarker(this); // unsubscribe all registered observable subscriptions\n\n\n      this._observableSubscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n  }]);\n\n  return AgmMarker;\n}();\n\nAgmMarker.ɵfac = function AgmMarker_Factory(t) {\n  return new (t || AgmMarker)(ɵngcc0.ɵɵdirectiveInject(MarkerManager));\n};\n\nAgmMarker.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmMarker,\n  selectors: [[\"agm-marker\"]],\n  contentQueries: function AgmMarker_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, AgmInfoWindow, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infoWindow = _t);\n    }\n  },\n  inputs: {\n    draggable: [\"markerDraggable\", \"draggable\"],\n    visible: \"visible\",\n    openInfoWindow: \"openInfoWindow\",\n    opacity: \"opacity\",\n    zIndex: \"zIndex\",\n    clickable: [\"markerClickable\", \"clickable\"],\n    latitude: \"latitude\",\n    longitude: \"longitude\",\n    title: \"title\",\n    label: \"label\",\n    iconUrl: \"iconUrl\",\n    animation: \"animation\"\n  },\n  outputs: {\n    animationChange: \"animationChange\",\n    markerClick: \"markerClick\",\n    markerDblClick: \"markerDblClick\",\n    markerRightClick: \"markerRightClick\",\n    dragStart: \"dragStart\",\n    drag: \"drag\",\n    dragEnd: \"dragEnd\",\n    mouseOver: \"mouseOver\",\n    mouseOut: \"mouseOut\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: FitBoundsAccessor,\n    useExisting: forwardRef(function () {\n      return AgmMarker;\n    })\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nAgmMarker.ctorParameters = function () {\n  return [{\n    type: MarkerManager\n  }];\n};\n\nAgmMarker.propDecorators = {\n  latitude: [{\n    type: Input\n  }],\n  longitude: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['markerDraggable']\n  }],\n  iconUrl: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  openInfoWindow: [{\n    type: Input\n  }],\n  opacity: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  clickable: [{\n    type: Input,\n    args: ['markerClickable']\n  }],\n  animation: [{\n    type: Input\n  }],\n  animationChange: [{\n    type: Output\n  }],\n  markerClick: [{\n    type: Output\n  }],\n  markerDblClick: [{\n    type: Output\n  }],\n  markerRightClick: [{\n    type: Output\n  }],\n  dragStart: [{\n    type: Output\n  }],\n  drag: [{\n    type: Output\n  }],\n  dragEnd: [{\n    type: Output\n  }],\n  mouseOver: [{\n    type: Output\n  }],\n  mouseOut: [{\n    type: Output\n  }],\n  infoWindow: [{\n    type: ContentChildren,\n    args: [AgmInfoWindow]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmMarker, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-marker',\n      providers: [{\n        provide: FitBoundsAccessor,\n        useExisting: forwardRef(function () {\n          return AgmMarker;\n        })\n      }]\n    }]\n  }], function () {\n    return [{\n      type: MarkerManager\n    }];\n  }, {\n    draggable: [{\n      type: Input,\n      args: ['markerDraggable']\n    }],\n    visible: [{\n      type: Input\n    }],\n    openInfoWindow: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    clickable: [{\n      type: Input,\n      args: ['markerClickable']\n    }],\n    animationChange: [{\n      type: Output\n    }],\n    markerClick: [{\n      type: Output\n    }],\n    markerDblClick: [{\n      type: Output\n    }],\n    markerRightClick: [{\n      type: Output\n    }],\n    dragStart: [{\n      type: Output\n    }],\n    drag: [{\n      type: Output\n    }],\n    dragEnd: [{\n      type: Output\n    }],\n    mouseOver: [{\n      type: Output\n    }],\n    mouseOut: [{\n      type: Output\n    }],\n    infoWindow: [{\n      type: ContentChildren,\n      args: [AgmInfoWindow]\n    }],\n    latitude: [{\n      type: Input\n    }],\n    longitude: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    iconUrl: [{\n      type: Input\n    }],\n    animation: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: LatLngLiteral[] = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: LatLngLiteral[][] = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\n\n\nvar AgmPolygon = /*#__PURE__*/function () {\n  function AgmPolygon(_polygonManager) {\n    _classCallCheck(this, AgmPolygon);\n\n    this._polygonManager = _polygonManager;\n    /**\n     * Indicates whether this Polygon handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this shape over the map. The geodesic\n     * property defines the mode of dragging. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this shape by dragging the control\n     * points shown at the vertices and on each segment. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * When true, edges of the polygon are interpreted as geodesic and will\n     * follow the curvature of the Earth. When false, edges of the polygon are\n     * rendered as straight lines in screen space. Note that the shape of a\n     * geodesic polygon may appear to change when dragged, as the dimensions\n     * are maintained relative to the surface of the earth. Defaults to false.\n     */\n\n    this.geodesic = false;\n    /**\n     * The ordered sequence of coordinates that designates a closed loop.\n     * Unlike polylines, a polygon may consist of one or more paths.\n     *  As a result, the paths property may specify one or more arrays of\n     * LatLng coordinates. Paths are closed automatically; do not repeat the\n     * first vertex of the path as the last vertex. Simple polygons may be\n     * defined using a single array of LatLngs. More complex polygons may\n     * specify an array of arrays. Any simple arrays are converted into Arrays.\n     * Inserting or removing LatLngs from the Array will automatically update\n     * the polygon on the map.\n     */\n\n    this.paths = [];\n    /**\n     * This event is fired when the DOM click event is fired on the Polygon.\n     */\n\n    this.polyClick = new EventEmitter();\n    /**\n     * This event is fired when the DOM dblclick event is fired on the Polygon.\n     */\n\n    this.polyDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the polygon.\n     */\n\n    this.polyDrag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the polygon.\n     */\n\n    this.polyDragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the polygon.\n     */\n\n    this.polyDragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the Polygon.\n     */\n\n    this.polyMouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the Polygon.\n     */\n\n    this.polyMouseMove = new EventEmitter();\n    /**\n     * This event is fired on Polygon mouseout.\n     */\n\n    this.polyMouseOut = new EventEmitter();\n    /**\n     * This event is fired on Polygon mouseover.\n     */\n\n    this.polyMouseOver = new EventEmitter();\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the Polygon\n     */\n\n    this.polyMouseUp = new EventEmitter();\n    /**\n     * This event is fired when the Polygon is right-clicked on.\n     */\n\n    this.polyRightClick = new EventEmitter();\n    /**\n     * This event is fired after Polygon first path changes.\n     */\n\n    this.polyPathsChange = new EventEmitter();\n    this._polygonAddedToManager = false;\n    this._subscriptions = [];\n  }\n  /** @internal */\n\n\n  _createClass(AgmPolygon, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      if (!this._polygonAddedToManager) {\n        this._init();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._polygonAddedToManager) {\n        this._init();\n\n        return;\n      }\n\n      this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      this._polygonManager.addPolygon(this);\n\n      this._polygonAddedToManager = true;\n\n      this._addEventListeners();\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this81 = this;\n\n      var handlers = [{\n        name: 'click',\n        handler: function handler(ev) {\n          return _this81.polyClick.emit(ev);\n        }\n      }, {\n        name: 'dblclick',\n        handler: function handler(ev) {\n          return _this81.polyDblClick.emit(ev);\n        }\n      }, {\n        name: 'drag',\n        handler: function handler(ev) {\n          return _this81.polyDrag.emit(ev);\n        }\n      }, {\n        name: 'dragend',\n        handler: function handler(ev) {\n          return _this81.polyDragEnd.emit(ev);\n        }\n      }, {\n        name: 'dragstart',\n        handler: function handler(ev) {\n          return _this81.polyDragStart.emit(ev);\n        }\n      }, {\n        name: 'mousedown',\n        handler: function handler(ev) {\n          return _this81.polyMouseDown.emit(ev);\n        }\n      }, {\n        name: 'mousemove',\n        handler: function handler(ev) {\n          return _this81.polyMouseMove.emit(ev);\n        }\n      }, {\n        name: 'mouseout',\n        handler: function handler(ev) {\n          return _this81.polyMouseOut.emit(ev);\n        }\n      }, {\n        name: 'mouseover',\n        handler: function handler(ev) {\n          return _this81.polyMouseOver.emit(ev);\n        }\n      }, {\n        name: 'mouseup',\n        handler: function handler(ev) {\n          return _this81.polyMouseUp.emit(ev);\n        }\n      }, {\n        name: 'rightclick',\n        handler: function handler(ev) {\n          return _this81.polyRightClick.emit(ev);\n        }\n      }];\n      handlers.forEach(function (obj) {\n        var os = _this81._polygonManager.createEventObservable(obj.name, _this81).subscribe(obj.handler);\n\n        _this81._subscriptions.push(os);\n      });\n\n      this._polygonManager.createPathEventObservable(this).then(function (paths$) {\n        var os = paths$.subscribe(function (pathEvent) {\n          return _this81.polyPathsChange.emit(pathEvent);\n        });\n\n        _this81._subscriptions.push(os);\n      });\n    }\n  }, {\n    key: \"_updatePolygonOptions\",\n    value: function _updatePolygonOptions(changes) {\n      return Object.keys(changes).filter(function (k) {\n        return AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1;\n      }).reduce(function (obj, k) {\n        obj[k] = changes[k].currentValue;\n        return obj;\n      }, {});\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._polygonManager.deletePolygon(this); // unsubscribe all registered observable subscriptions\n\n\n      this._subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      return this._polygonManager.getPath(this);\n    }\n  }, {\n    key: \"getPaths\",\n    value: function getPaths() {\n      return this._polygonManager.getPaths(this);\n    }\n  }]);\n\n  return AgmPolygon;\n}();\n\nAgmPolygon.ɵfac = function AgmPolygon_Factory(t) {\n  return new (t || AgmPolygon)(ɵngcc0.ɵɵdirectiveInject(PolygonManager));\n};\n\nAgmPolygon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmPolygon,\n  selectors: [[\"agm-polygon\"]],\n  inputs: {\n    clickable: \"clickable\",\n    draggable: [\"polyDraggable\", \"draggable\"],\n    editable: \"editable\",\n    geodesic: \"geodesic\",\n    paths: \"paths\",\n    fillColor: \"fillColor\",\n    fillOpacity: \"fillOpacity\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    strokeWeight: \"strokeWeight\",\n    visible: \"visible\",\n    zIndex: \"zIndex\"\n  },\n  outputs: {\n    polyClick: \"polyClick\",\n    polyDblClick: \"polyDblClick\",\n    polyDrag: \"polyDrag\",\n    polyDragEnd: \"polyDragEnd\",\n    polyDragStart: \"polyDragStart\",\n    polyMouseDown: \"polyMouseDown\",\n    polyMouseMove: \"polyMouseMove\",\n    polyMouseOut: \"polyMouseOut\",\n    polyMouseOver: \"polyMouseOver\",\n    polyMouseUp: \"polyMouseUp\",\n    polyRightClick: \"polyRightClick\",\n    polyPathsChange: \"polyPathsChange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmPolygon._polygonOptionsAttributes = ['clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map', 'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable', 'editable', 'visible'];\n\nAgmPolygon.ctorParameters = function () {\n  return [{\n    type: PolygonManager\n  }];\n};\n\nAgmPolygon.propDecorators = {\n  clickable: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['polyDraggable']\n  }],\n  editable: [{\n    type: Input\n  }],\n  fillColor: [{\n    type: Input\n  }],\n  fillOpacity: [{\n    type: Input\n  }],\n  geodesic: [{\n    type: Input\n  }],\n  paths: [{\n    type: Input\n  }],\n  strokeColor: [{\n    type: Input\n  }],\n  strokeOpacity: [{\n    type: Input\n  }],\n  strokeWeight: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  polyClick: [{\n    type: Output\n  }],\n  polyDblClick: [{\n    type: Output\n  }],\n  polyDrag: [{\n    type: Output\n  }],\n  polyDragEnd: [{\n    type: Output\n  }],\n  polyDragStart: [{\n    type: Output\n  }],\n  polyMouseDown: [{\n    type: Output\n  }],\n  polyMouseMove: [{\n    type: Output\n  }],\n  polyMouseOut: [{\n    type: Output\n  }],\n  polyMouseOver: [{\n    type: Output\n  }],\n  polyMouseUp: [{\n    type: Output\n  }],\n  polyRightClick: [{\n    type: Output\n  }],\n  polyPathsChange: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmPolygon, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-polygon'\n    }]\n  }], function () {\n    return [{\n      type: PolygonManager\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: ['polyDraggable']\n    }],\n    editable: [{\n      type: Input\n    }],\n    geodesic: [{\n      type: Input\n    }],\n    paths: [{\n      type: Input\n    }],\n    polyClick: [{\n      type: Output\n    }],\n    polyDblClick: [{\n      type: Output\n    }],\n    polyDrag: [{\n      type: Output\n    }],\n    polyDragEnd: [{\n      type: Output\n    }],\n    polyDragStart: [{\n      type: Output\n    }],\n    polyMouseDown: [{\n      type: Output\n    }],\n    polyMouseMove: [{\n      type: Output\n    }],\n    polyMouseOut: [{\n      type: Output\n    }],\n    polyMouseOver: [{\n      type: Output\n    }],\n    polyMouseUp: [{\n      type: Output\n    }],\n    polyRightClick: [{\n      type: Output\n    }],\n    polyPathsChange: [{\n      type: Output\n    }],\n    fillColor: [{\n      type: Input\n    }],\n    fillOpacity: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeOpacity: [{\n      type: Input\n    }],\n    strokeWeight: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n */\n\n\nvar AgmPolylineIcon = /*#__PURE__*/function () {\n  function AgmPolylineIcon() {\n    _classCallCheck(this, AgmPolylineIcon);\n  }\n\n  _createClass(AgmPolylineIcon, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.path == null) {\n        throw new Error('Icon Sequence path is required');\n      }\n    }\n  }]);\n\n  return AgmPolylineIcon;\n}();\n\nAgmPolylineIcon.ɵfac = function AgmPolylineIcon_Factory(t) {\n  return new (t || AgmPolylineIcon)();\n};\n\nAgmPolylineIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmPolylineIcon,\n  selectors: [[\"agm-icon-sequence\"]],\n  inputs: {\n    fixedRotation: \"fixedRotation\",\n    offset: \"offset\",\n    repeat: \"repeat\",\n    anchorX: \"anchorX\",\n    anchorY: \"anchorY\",\n    fillColor: \"fillColor\",\n    fillOpacity: \"fillOpacity\",\n    path: \"path\",\n    rotation: \"rotation\",\n    scale: \"scale\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    strokeWeight: \"strokeWeight\"\n  }\n});\nAgmPolylineIcon.propDecorators = {\n  fixedRotation: [{\n    type: Input\n  }],\n  offset: [{\n    type: Input\n  }],\n  repeat: [{\n    type: Input\n  }],\n  anchorX: [{\n    type: Input\n  }],\n  anchorY: [{\n    type: Input\n  }],\n  fillColor: [{\n    type: Input\n  }],\n  fillOpacity: [{\n    type: Input\n  }],\n  path: [{\n    type: Input\n  }],\n  rotation: [{\n    type: Input\n  }],\n  scale: [{\n    type: Input\n  }],\n  strokeColor: [{\n    type: Input\n  }],\n  strokeOpacity: [{\n    type: Input\n  }],\n  strokeWeight: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmPolylineIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-polyline agm-icon-sequence'\n    }]\n  }], null, {\n    fixedRotation: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    repeat: [{\n      type: Input\n    }],\n    anchorX: [{\n      type: Input\n    }],\n    anchorY: [{\n      type: Input\n    }],\n    fillColor: [{\n      type: Input\n    }],\n    fillOpacity: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }],\n    rotation: [{\n      type: Input\n    }],\n    scale: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeOpacity: [{\n      type: Input\n    }],\n    strokeWeight: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\n\n\nvar AgmPolylinePoint = /*#__PURE__*/function () {\n  function AgmPolylinePoint() {\n    _classCallCheck(this, AgmPolylinePoint);\n\n    /**\n     * This event emitter gets emitted when the position of the point changed.\n     */\n    this.positionChanged = new EventEmitter();\n  }\n\n  _createClass(AgmPolylinePoint, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // tslint:disable: no-string-literal\n      if (changes['latitude'] || changes['longitude']) {\n        this.positionChanged.emit({\n          lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n          lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude\n        });\n      } // tslint:enable: no-string-literal\n\n    }\n    /** @internal */\n\n  }, {\n    key: \"getFitBoundsDetails$\",\n    value: function getFitBoundsDetails$() {\n      return this.positionChanged.pipe(startWith({\n        lat: this.latitude,\n        lng: this.longitude\n      }), map(function (position) {\n        return {\n          latLng: position\n        };\n      }));\n    }\n  }]);\n\n  return AgmPolylinePoint;\n}();\n\nAgmPolylinePoint.ɵfac = function AgmPolylinePoint_Factory(t) {\n  return new (t || AgmPolylinePoint)();\n};\n\nAgmPolylinePoint.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmPolylinePoint,\n  selectors: [[\"agm-polyline-point\"]],\n  inputs: {\n    latitude: \"latitude\",\n    longitude: \"longitude\"\n  },\n  outputs: {\n    positionChanged: \"positionChanged\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: FitBoundsAccessor,\n    useExisting: forwardRef(function () {\n      return AgmPolylinePoint;\n    })\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nAgmPolylinePoint.ctorParameters = function () {\n  return [];\n};\n\nAgmPolylinePoint.propDecorators = {\n  latitude: [{\n    type: Input\n  }],\n  longitude: [{\n    type: Input\n  }],\n  positionChanged: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmPolylinePoint, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-polyline-point',\n      providers: [{\n        provide: FitBoundsAccessor,\n        useExisting: forwardRef(function () {\n          return AgmPolylinePoint;\n        })\n      }]\n    }]\n  }], function () {\n    return [];\n  }, {\n    positionChanged: [{\n      type: Output\n    }],\n    latitude: [{\n      type: Input\n    }],\n    longitude: [{\n      type: Input\n    }]\n  });\n})();\n\nvar polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n\nvar AgmPolyline = /*#__PURE__*/function () {\n  function AgmPolyline(_polylineManager) {\n    _classCallCheck(this, AgmPolyline);\n\n    this._polylineManager = _polylineManager;\n    /**\n     * Indicates whether this Polyline handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this shape over the map. The geodesic property defines the\n     * mode of dragging. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this shape by dragging the control points shown at the\n     * vertices and on each segment. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n     * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n     * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n     * are maintained relative to the surface of the earth. Defaults to false.\n     */\n\n    this.geodesic = false;\n    /**\n     * Whether this polyline is visible on the map. Defaults to true.\n     */\n\n    this.visible = true;\n    /**\n     * This event is fired when the DOM click event is fired on the Polyline.\n     */\n\n    this.lineClick = new EventEmitter();\n    /**\n     * This event is fired when the DOM dblclick event is fired on the Polyline.\n     */\n\n    this.lineDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the polyline.\n     */\n\n    this.lineDrag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the polyline.\n     */\n\n    this.lineDragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the polyline.\n     */\n\n    this.lineDragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the Polyline.\n     */\n\n    this.lineMouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the Polyline.\n     */\n\n    this.lineMouseMove = new EventEmitter();\n    /**\n     * This event is fired on Polyline mouseout.\n     */\n\n    this.lineMouseOut = new EventEmitter();\n    /**\n     * This event is fired on Polyline mouseover.\n     */\n\n    this.lineMouseOver = new EventEmitter();\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the Polyline\n     */\n\n    this.lineMouseUp = new EventEmitter();\n    /**\n     * This event is fired when the Polyline is right-clicked on.\n     */\n\n    this.lineRightClick = new EventEmitter();\n    /**\n     * This event is fired after Polyline's path changes.\n     */\n\n    this.polyPathChange = new EventEmitter();\n    this._polylineAddedToManager = false;\n    this._subscriptions = [];\n    this._id = (polylineId++).toString();\n  }\n  /** @internal */\n\n\n  _createClass(AgmPolyline, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this82 = this;\n\n      if (this.points.length) {\n        this.points.forEach(function (point) {\n          var s = point.positionChanged.subscribe(function () {\n            _this82._polylineManager.updatePolylinePoints(_this82);\n          });\n\n          _this82._subscriptions.push(s);\n        });\n      }\n\n      if (!this._polylineAddedToManager) {\n        this._init();\n      }\n\n      var pointSub = this.points.changes.subscribe(function () {\n        return _this82._polylineManager.updatePolylinePoints(_this82);\n      });\n\n      this._subscriptions.push(pointSub);\n\n      this._polylineManager.updatePolylinePoints(this);\n\n      var iconSub = this.iconSequences.changes.subscribe(function () {\n        return _this82._polylineManager.updateIconSequences(_this82);\n      });\n\n      this._subscriptions.push(iconSub);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._polylineAddedToManager) {\n        this._init();\n\n        return;\n      }\n\n      var options = {};\n      var optionKeys = Object.keys(changes).filter(function (k) {\n        return AgmPolyline._polylineOptionsAttributes.indexOf(k) !== -1;\n      });\n      optionKeys.forEach(function (k) {\n        return options[k] = changes[k].currentValue;\n      });\n\n      this._polylineManager.setPolylineOptions(this, options);\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      return this._polylineManager.getPath(this);\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      this._polylineManager.addPolyline(this);\n\n      this._polylineAddedToManager = true;\n\n      this._addEventListeners();\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners() {\n      var _this83 = this;\n\n      var handlers = [{\n        name: 'click',\n        handler: function handler(ev) {\n          return _this83.lineClick.emit(ev);\n        }\n      }, {\n        name: 'dblclick',\n        handler: function handler(ev) {\n          return _this83.lineDblClick.emit(ev);\n        }\n      }, {\n        name: 'drag',\n        handler: function handler(ev) {\n          return _this83.lineDrag.emit(ev);\n        }\n      }, {\n        name: 'dragend',\n        handler: function handler(ev) {\n          return _this83.lineDragEnd.emit(ev);\n        }\n      }, {\n        name: 'dragstart',\n        handler: function handler(ev) {\n          return _this83.lineDragStart.emit(ev);\n        }\n      }, {\n        name: 'mousedown',\n        handler: function handler(ev) {\n          return _this83.lineMouseDown.emit(ev);\n        }\n      }, {\n        name: 'mousemove',\n        handler: function handler(ev) {\n          return _this83.lineMouseMove.emit(ev);\n        }\n      }, {\n        name: 'mouseout',\n        handler: function handler(ev) {\n          return _this83.lineMouseOut.emit(ev);\n        }\n      }, {\n        name: 'mouseover',\n        handler: function handler(ev) {\n          return _this83.lineMouseOver.emit(ev);\n        }\n      }, {\n        name: 'mouseup',\n        handler: function handler(ev) {\n          return _this83.lineMouseUp.emit(ev);\n        }\n      }, {\n        name: 'rightclick',\n        handler: function handler(ev) {\n          return _this83.lineRightClick.emit(ev);\n        }\n      }];\n      handlers.forEach(function (obj) {\n        var os = _this83._polylineManager.createEventObservable(obj.name, _this83).subscribe(obj.handler);\n\n        _this83._subscriptions.push(os);\n      });\n\n      this._polylineManager.createPathEventObservable(this).then(function (ob$) {\n        var os = ob$.subscribe(function (pathEvent) {\n          return _this83.polyPathChange.emit(pathEvent);\n        });\n\n        _this83._subscriptions.push(os);\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"_getPoints\",\n    value: function _getPoints() {\n      if (this.points) {\n        return this.points.toArray();\n      }\n\n      return [];\n    }\n  }, {\n    key: \"_getIcons\",\n    value: function _getIcons() {\n      if (this.iconSequences) {\n        return this.iconSequences.toArray();\n      }\n\n      return [];\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._polylineManager.deletePolyline(this); // unsubscribe all registered observable subscriptions\n\n\n      this._subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n  }]);\n\n  return AgmPolyline;\n}();\n\nAgmPolyline.ɵfac = function AgmPolyline_Factory(t) {\n  return new (t || AgmPolyline)(ɵngcc0.ɵɵdirectiveInject(PolylineManager));\n};\n\nAgmPolyline.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmPolyline,\n  selectors: [[\"agm-polyline\"]],\n  contentQueries: function AgmPolyline_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, AgmPolylinePoint, false);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, AgmPolylineIcon, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.points = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iconSequences = _t);\n    }\n  },\n  inputs: {\n    clickable: \"clickable\",\n    draggable: [\"polylineDraggable\", \"draggable\"],\n    editable: \"editable\",\n    geodesic: \"geodesic\",\n    visible: \"visible\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    strokeWeight: \"strokeWeight\",\n    zIndex: \"zIndex\"\n  },\n  outputs: {\n    lineClick: \"lineClick\",\n    lineDblClick: \"lineDblClick\",\n    lineDrag: \"lineDrag\",\n    lineDragEnd: \"lineDragEnd\",\n    lineDragStart: \"lineDragStart\",\n    lineMouseDown: \"lineMouseDown\",\n    lineMouseMove: \"lineMouseMove\",\n    lineMouseOut: \"lineMouseOut\",\n    lineMouseOver: \"lineMouseOver\",\n    lineMouseUp: \"lineMouseUp\",\n    lineRightClick: \"lineRightClick\",\n    polyPathChange: \"polyPathChange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmPolyline._polylineOptionsAttributes = ['draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'zIndex'];\n\nAgmPolyline.ctorParameters = function () {\n  return [{\n    type: PolylineManager\n  }];\n};\n\nAgmPolyline.propDecorators = {\n  clickable: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['polylineDraggable']\n  }],\n  editable: [{\n    type: Input\n  }],\n  geodesic: [{\n    type: Input\n  }],\n  strokeColor: [{\n    type: Input\n  }],\n  strokeOpacity: [{\n    type: Input\n  }],\n  strokeWeight: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  lineClick: [{\n    type: Output\n  }],\n  lineDblClick: [{\n    type: Output\n  }],\n  lineDrag: [{\n    type: Output\n  }],\n  lineDragEnd: [{\n    type: Output\n  }],\n  lineDragStart: [{\n    type: Output\n  }],\n  lineMouseDown: [{\n    type: Output\n  }],\n  lineMouseMove: [{\n    type: Output\n  }],\n  lineMouseOut: [{\n    type: Output\n  }],\n  lineMouseOver: [{\n    type: Output\n  }],\n  lineMouseUp: [{\n    type: Output\n  }],\n  lineRightClick: [{\n    type: Output\n  }],\n  polyPathChange: [{\n    type: Output\n  }],\n  points: [{\n    type: ContentChildren,\n    args: [AgmPolylinePoint]\n  }],\n  iconSequences: [{\n    type: ContentChildren,\n    args: [AgmPolylineIcon]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmPolyline, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-polyline'\n    }]\n  }], function () {\n    return [{\n      type: PolylineManager\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: ['polylineDraggable']\n    }],\n    editable: [{\n      type: Input\n    }],\n    geodesic: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    lineClick: [{\n      type: Output\n    }],\n    lineDblClick: [{\n      type: Output\n    }],\n    lineDrag: [{\n      type: Output\n    }],\n    lineDragEnd: [{\n      type: Output\n    }],\n    lineDragStart: [{\n      type: Output\n    }],\n    lineMouseDown: [{\n      type: Output\n    }],\n    lineMouseMove: [{\n      type: Output\n    }],\n    lineMouseOut: [{\n      type: Output\n    }],\n    lineMouseOver: [{\n      type: Output\n    }],\n    lineMouseUp: [{\n      type: Output\n    }],\n    lineRightClick: [{\n      type: Output\n    }],\n    polyPathChange: [{\n      type: Output\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeOpacity: [{\n      type: Input\n    }],\n    strokeWeight: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    points: [{\n      type: ContentChildren,\n      args: [AgmPolylinePoint]\n    }],\n    iconSequences: [{\n      type: ContentChildren,\n      args: [AgmPolylineIcon]\n    }]\n  });\n})();\n\nvar AgmRectangle = /*#__PURE__*/function () {\n  function AgmRectangle(_manager) {\n    _classCallCheck(this, AgmRectangle);\n\n    this._manager = _manager;\n    /**\n     * Indicates whether this Rectangle handles mouse events. Defaults to true.\n     */\n\n    this.clickable = true;\n    /**\n     * If set to true, the user can drag this rectangle over the map. Defaults to false.\n     */\n    // tslint:disable-next-line:no-input-rename\n\n    this.draggable = false;\n    /**\n     * If set to true, the user can edit this rectangle by dragging the control points shown at\n     * the center and around the circumference of the rectangle. Defaults to false.\n     */\n\n    this.editable = false;\n    /**\n     * The stroke position. Defaults to CENTER.\n     * This property is not supported on Internet Explorer 8 and earlier.\n     */\n\n    this.strokePosition = 'CENTER';\n    /**\n     * The stroke width in pixels.\n     */\n\n    this.strokeWeight = 0;\n    /**\n     * Whether this rectangle is visible on the map. Defaults to true.\n     */\n\n    this.visible = true;\n    /**\n     * This event is fired when the rectangle's is changed.\n     */\n\n    this.boundsChange = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the rectangle.\n     */\n\n    this.rectangleClick = new EventEmitter();\n    /**\n     * This event emitter gets emitted when the user clicks on the rectangle.\n     */\n\n    this.rectangleDblClick = new EventEmitter();\n    /**\n     * This event is repeatedly fired while the user drags the rectangle.\n     */\n    // tslint:disable-next-line: no-output-native\n\n    this.drag = new EventEmitter();\n    /**\n     * This event is fired when the user stops dragging the rectangle.\n     */\n\n    this.dragEnd = new EventEmitter();\n    /**\n     * This event is fired when the user starts dragging the rectangle.\n     */\n\n    this.dragStart = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousedown event is fired on the rectangle.\n     */\n\n    this.mouseDown = new EventEmitter();\n    /**\n     * This event is fired when the DOM mousemove event is fired on the rectangle.\n     */\n\n    this.mouseMove = new EventEmitter();\n    /**\n     * This event is fired on rectangle mouseout.\n     */\n\n    this.mouseOut = new EventEmitter();\n    /**\n     * This event is fired on rectangle mouseover.\n     */\n\n    this.mouseOver = new EventEmitter();\n    /**\n     * This event is fired when the DOM mouseup event is fired on the rectangle.\n     */\n\n    this.mouseUp = new EventEmitter();\n    /**\n     * This event is fired when the rectangle is right-clicked on.\n     */\n\n    this.rightClick = new EventEmitter();\n    this._rectangleAddedToManager = false;\n    this._eventSubscriptions = [];\n  }\n  /** @internal */\n\n\n  _createClass(AgmRectangle, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._manager.addRectangle(this);\n\n      this._rectangleAddedToManager = true;\n\n      this._registerEventListeners();\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this._rectangleAddedToManager) {\n        return;\n      } // tslint:disable: no-string-literal\n\n\n      if (changes['north'] || changes['east'] || changes['south'] || changes['west']) {\n        this._manager.setBounds(this);\n      }\n\n      if (changes['editable']) {\n        this._manager.setEditable(this);\n      }\n\n      if (changes['draggable']) {\n        this._manager.setDraggable(this);\n      }\n\n      if (changes['visible']) {\n        this._manager.setVisible(this);\n      } // tslint:enable: no-string-literal\n\n\n      this._updateRectangleOptionsChanges(changes);\n    }\n  }, {\n    key: \"_updateRectangleOptionsChanges\",\n    value: function _updateRectangleOptionsChanges(changes) {\n      var options = {};\n      var optionKeys = Object.keys(changes).filter(function (k) {\n        return AgmRectangle._mapOptions.indexOf(k) !== -1;\n      });\n      optionKeys.forEach(function (k) {\n        options[k] = changes[k].currentValue;\n      });\n\n      if (optionKeys.length > 0) {\n        this._manager.setOptions(this, options);\n      }\n    }\n  }, {\n    key: \"_registerEventListeners\",\n    value: function _registerEventListeners() {\n      var _this84 = this;\n\n      var events = new Map();\n      events.set('bounds_changed', this.boundsChange);\n      events.set('click', this.rectangleClick);\n      events.set('dblclick', this.rectangleDblClick);\n      events.set('drag', this.drag);\n      events.set('dragend', this.dragEnd);\n      events.set('dragStart', this.dragStart);\n      events.set('mousedown', this.mouseDown);\n      events.set('mousemove', this.mouseMove);\n      events.set('mouseout', this.mouseOut);\n      events.set('mouseover', this.mouseOver);\n      events.set('mouseup', this.mouseUp);\n      events.set('rightclick', this.rightClick);\n      events.forEach(function (eventEmitter, eventName) {\n        _this84._eventSubscriptions.push(_this84._manager.createEventObservable(eventName, _this84).subscribe(function (value) {\n          switch (eventName) {\n            case 'bounds_changed':\n              _this84._manager.getBounds(_this84).then(function (bounds) {\n                return eventEmitter.emit({\n                  north: bounds.getNorthEast().lat(),\n                  east: bounds.getNorthEast().lng(),\n                  south: bounds.getSouthWest().lat(),\n                  west: bounds.getSouthWest().lng()\n                });\n              });\n\n              break;\n\n            default:\n              eventEmitter.emit(value);\n          }\n        }));\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventSubscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n\n      this._eventSubscriptions = null;\n\n      this._manager.removeRectangle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Rectangle.\n     */\n\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return this._manager.getBounds(this);\n    }\n  }]);\n\n  return AgmRectangle;\n}();\n\nAgmRectangle.ɵfac = function AgmRectangle_Factory(t) {\n  return new (t || AgmRectangle)(ɵngcc0.ɵɵdirectiveInject(RectangleManager));\n};\n\nAgmRectangle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmRectangle,\n  selectors: [[\"agm-rectangle\"]],\n  inputs: {\n    clickable: \"clickable\",\n    draggable: [\"rectangleDraggable\", \"draggable\"],\n    editable: \"editable\",\n    strokePosition: \"strokePosition\",\n    strokeWeight: \"strokeWeight\",\n    visible: \"visible\",\n    north: \"north\",\n    east: \"east\",\n    south: \"south\",\n    west: \"west\",\n    fillColor: \"fillColor\",\n    fillOpacity: \"fillOpacity\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    zIndex: \"zIndex\"\n  },\n  outputs: {\n    boundsChange: \"boundsChange\",\n    rectangleClick: \"rectangleClick\",\n    rectangleDblClick: \"rectangleDblClick\",\n    drag: \"drag\",\n    dragEnd: \"dragEnd\",\n    dragStart: \"dragStart\",\n    mouseDown: \"mouseDown\",\n    mouseMove: \"mouseMove\",\n    mouseOut: \"mouseOut\",\n    mouseOver: \"mouseOver\",\n    mouseUp: \"mouseUp\",\n    rightClick: \"rightClick\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nAgmRectangle._mapOptions = ['fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'clickable'];\n\nAgmRectangle.ctorParameters = function () {\n  return [{\n    type: RectangleManager\n  }];\n};\n\nAgmRectangle.propDecorators = {\n  north: [{\n    type: Input\n  }],\n  east: [{\n    type: Input\n  }],\n  south: [{\n    type: Input\n  }],\n  west: [{\n    type: Input\n  }],\n  clickable: [{\n    type: Input\n  }],\n  draggable: [{\n    type: Input,\n    args: ['rectangleDraggable']\n  }],\n  editable: [{\n    type: Input\n  }],\n  fillColor: [{\n    type: Input\n  }],\n  fillOpacity: [{\n    type: Input\n  }],\n  strokeColor: [{\n    type: Input\n  }],\n  strokeOpacity: [{\n    type: Input\n  }],\n  strokePosition: [{\n    type: Input\n  }],\n  strokeWeight: [{\n    type: Input\n  }],\n  visible: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  boundsChange: [{\n    type: Output\n  }],\n  rectangleClick: [{\n    type: Output\n  }],\n  rectangleDblClick: [{\n    type: Output\n  }],\n  drag: [{\n    type: Output\n  }],\n  dragEnd: [{\n    type: Output\n  }],\n  dragStart: [{\n    type: Output\n  }],\n  mouseDown: [{\n    type: Output\n  }],\n  mouseMove: [{\n    type: Output\n  }],\n  mouseOut: [{\n    type: Output\n  }],\n  mouseOver: [{\n    type: Output\n  }],\n  mouseUp: [{\n    type: Output\n  }],\n  rightClick: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmRectangle, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-rectangle'\n    }]\n  }], function () {\n    return [{\n      type: RectangleManager\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: ['rectangleDraggable']\n    }],\n    editable: [{\n      type: Input\n    }],\n    strokePosition: [{\n      type: Input\n    }],\n    strokeWeight: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    boundsChange: [{\n      type: Output\n    }],\n    rectangleClick: [{\n      type: Output\n    }],\n    rectangleDblClick: [{\n      type: Output\n    }],\n    drag: [{\n      type: Output\n    }],\n    dragEnd: [{\n      type: Output\n    }],\n    dragStart: [{\n      type: Output\n    }],\n    mouseDown: [{\n      type: Output\n    }],\n    mouseMove: [{\n      type: Output\n    }],\n    mouseOut: [{\n      type: Output\n    }],\n    mouseOver: [{\n      type: Output\n    }],\n    mouseUp: [{\n      type: Output\n    }],\n    rightClick: [{\n      type: Output\n    }],\n    north: [{\n      type: Input\n    }],\n    east: [{\n      type: Input\n    }],\n    south: [{\n      type: Input\n    }],\n    west: [{\n      type: Input\n    }],\n    fillColor: [{\n      type: Input\n    }],\n    fillOpacity: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeOpacity: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }]\n  });\n})();\n\nvar layerId$3 = 0;\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\n\nvar AgmTransitLayer = /*#__PURE__*/function () {\n  function AgmTransitLayer(_manager) {\n    _classCallCheck(this, AgmTransitLayer);\n\n    this._manager = _manager;\n    this._addedToManager = false;\n    this._id = (layerId$3++).toString();\n    /**\n     * Hide/show transit layer\n     */\n\n    this.visible = true;\n  }\n\n  _createClass(AgmTransitLayer, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this._addedToManager) {\n        return;\n      }\n\n      this._manager.addTransitLayer(this);\n\n      this._addedToManager = true;\n    }\n    /** @internal */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /** @internal */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AgmTransitLayer-\".concat(this._id.toString());\n    }\n    /** @internal */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._manager.deleteLayer(this);\n    }\n  }]);\n\n  return AgmTransitLayer;\n}();\n\nAgmTransitLayer.ɵfac = function AgmTransitLayer_Factory(t) {\n  return new (t || AgmTransitLayer)(ɵngcc0.ɵɵdirectiveInject(LayerManager));\n};\n\nAgmTransitLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: AgmTransitLayer,\n  selectors: [[\"agm-transit-layer\"]],\n  inputs: {\n    visible: \"visible\"\n  }\n});\n\nAgmTransitLayer.ctorParameters = function () {\n  return [{\n    type: LayerManager\n  }];\n};\n\nAgmTransitLayer.propDecorators = {\n  visible: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmTransitLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'agm-transit-layer'\n    }]\n  }], function () {\n    return [{\n      type: LayerManager\n    }];\n  }, {\n    visible: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @internal\n */\n\n\nfunction coreDirectives() {\n  return [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl];\n}\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\n\n\nvar AgmCoreModule = /*#__PURE__*/function () {\n  function AgmCoreModule() {\n    _classCallCheck(this, AgmCoreModule);\n  }\n\n  _createClass(AgmCoreModule, null, [{\n    key: \"forRoot\",\n\n    /**\n     * Please use this method when you register the module at the root level.\n     */\n    value: function forRoot(lazyMapsAPILoaderConfig) {\n      return {\n        ngModule: AgmCoreModule,\n        providers: [].concat(BROWSER_GLOBALS_PROVIDERS, [{\n          provide: MapsAPILoader,\n          useClass: LazyMapsAPILoader\n        }, {\n          provide: LAZY_MAPS_API_CONFIG,\n          useValue: lazyMapsAPILoaderConfig\n        }])\n      };\n    }\n  }]);\n\n  return AgmCoreModule;\n}();\n\nAgmCoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AgmCoreModule\n});\nAgmCoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AgmCoreModule_Factory(t) {\n    return new (t || AgmCoreModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgmCoreModule, {\n    declarations: [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl],\n    exports: [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AgmCoreModule, [{\n    type: NgModule,\n    args: [{\n      declarations: coreDirectives(),\n      exports: coreDirectives()\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl, CircleManager, DataLayerManager, FitBoundsAccessor, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, coreDirectives, FitBoundsService as ɵa, AgmMapControl as ɵb, WindowRef as ɵc, DocumentRef as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵe };","map":{"version":3,"sources":["../../../packages/core/src/lib/services/maps-api-loader/maps-api-loader.ts","../../../packages/core/src/lib/services/google-maps-api-wrapper.ts","../../../packages/core/src/lib/services/managers/circle-manager.ts","../../../packages/core/src/lib/services/managers/data-layer-manager.ts","../../../packages/core/src/lib/services/fit-bounds.ts","../../../packages/core/src/lib/services/geocoder-service.ts","../../../packages/core/src/lib/utils/browser-globals.ts","../../../packages/core/src/lib/services/maps-api-loader/lazy-maps-api-loader.ts","../../../packages/core/src/lib/services/managers/marker-manager.ts","../../../packages/core/src/lib/services/managers/info-window-manager.ts","../../../packages/core/src/lib/services/managers/kml-layer-manager.ts","../../../packages/core/src/lib/services/managers/layer-manager.ts","../../../packages/core/src/lib/services/maps-api-loader/noop-maps-api-loader.ts","../../../packages/core/src/lib/utils/mvcarray-utils.ts","../../../packages/core/src/lib/services/managers/polygon-manager.ts","../../../packages/core/src/lib/services/managers/polyline-manager.ts","../../../packages/core/src/lib/services/managers/rectangle-manager.ts","../../../packages/core/src/lib/directives/bicycling-layer.ts","../../../packages/core/src/lib/directives/circle.ts","../../../packages/core/src/lib/directives/data-layer.ts","../../../packages/core/src/lib/directives/fit-bounds.ts","../../../packages/core/src/lib/directives/info-window.ts","../../../packages/core/src/lib/directives/kml-layer.ts","../../../packages/core/src/lib/directives/map.ts","../../../packages/core/src/lib/directives/marker.ts","../../../packages/core/src/lib/directives/polygon.ts","../../../packages/core/src/lib/directives/polyline-icon.ts","../../../packages/core/src/lib/directives/polyline-point.ts","../../../packages/core/src/lib/directives/polyline.ts","../../../packages/core/src/lib/directives/rectangle.ts","../../../packages/core/src/lib/directives/transit-layer.ts","../../../packages/core/src/lib/core.module.ts","../../../packages/core/src/public-api.ts","../../../packages/core/src/agm-core.ts"],"names":["layerId"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport abstract class MapsAPILoader {\n  abstract load(): Promise<void>;\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\n@Injectable()\nexport class GoogleMapsAPIWrapper {\n  private _map: Promise<google.maps.Map>;\n  private _mapResolver: (value?: google.maps.Map) => void;\n\n  constructor(private _loader: MapsAPILoader, private _zone: NgZone) {\n    this._map =\n        new Promise<google.maps.Map>((resolve: () => void) => { this._mapResolver = resolve; });\n  }\n\n  createMap(el: HTMLElement, mapOptions: google.maps.MapOptions): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._loader.load().then(() => {\n        const map = new google.maps.Map(el, mapOptions);\n        this._mapResolver(map);\n        return;\n      });\n    });\n  }\n\n  setMapOptions(options: google.maps.MapOptions) {\n    return this._zone.runOutsideAngular(() => {\n      this._map.then((m: google.maps.Map) => { m.setOptions(options); });\n    });\n  }\n\n  /**\n   * Creates a google map marker with the map context\n   */\n  createMarker(options: google.maps.MarkerOptions = {}, addToMap: boolean = true):\n      Promise<google.maps.Marker> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => {\n        if (addToMap) {\n          options.map = map;\n        }\n        return new google.maps.Marker(options);\n      });\n    });\n  }\n\n  createInfoWindow(options?: google.maps.InfoWindowOptions): Promise<google.maps.InfoWindow> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(() => new google.maps.InfoWindow(options));\n    });\n  }\n\n  /**\n   * Creates a google.map.Circle for the current map.\n   */\n  createCircle(options: google.maps.CircleOptions): Promise<google.maps.Circle> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => {\n        options.map = map;\n        return new google.maps.Circle(options);\n      });\n    });\n  }\n\n  /**\n   * Creates a google.map.Rectangle for the current map.\n   */\n  createRectangle(options: google.maps.RectangleOptions): Promise<google.maps.Rectangle> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => {\n        options.map = map;\n        return new google.maps.Rectangle(options);\n      });\n    });\n  }\n\n  createPolyline(options: google.maps.PolylineOptions): Promise<google.maps.Polyline> {\n    return this._zone.runOutsideAngular(() => {\n      return this.getNativeMap().then((map: google.maps.Map) => {\n        const line = new google.maps.Polyline(options);\n        line.setMap(map);\n        return line;\n      });\n    });\n  }\n\n  createPolygon(options: google.maps.PolygonOptions): Promise<google.maps.Polygon> {\n    return this._zone.runOutsideAngular(() => {\n      return this.getNativeMap().then((map: google.maps.Map) => {\n        const polygon = new google.maps.Polygon(options);\n        polygon.setMap(map);\n        return polygon;\n      });\n    });\n  }\n\n  /**\n   * Creates a new google.map.Data layer for the current map\n   */\n  createDataLayer(options?: google.maps.Data.DataOptions): Promise<google.maps.Data> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(m => {\n        const data = new google.maps.Data(options);\n        data.setMap(m);\n        return data;\n      });\n    });\n  }\n\n  /**\n   * Creates a TransitLayer instance for a map\n   * @returns a new transit layer object\n   */\n  createTransitLayer(): Promise<google.maps.TransitLayer>{\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => {\n        const newLayer: google.maps.TransitLayer = new google.maps.TransitLayer();\n        newLayer.setMap(map);\n        return newLayer;\n      });\n    });\n  }\n\n  /**\n   * Creates a BicyclingLayer instance for a map\n   * @returns a new bicycling layer object\n   */\n  createBicyclingLayer(): Promise<google.maps.BicyclingLayer>{\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => {\n        const newLayer: google.maps.BicyclingLayer = new google.maps.BicyclingLayer();\n        newLayer.setMap(map);\n        return newLayer;\n      });\n    });\n  }\n\n  /**\n   * Determines if given coordinates are insite a Polygon path.\n   */\n  containsLocation(latLng: google.maps.LatLng, polygon: google.maps.Polygon): Promise<boolean> {\n    return this._map.then(() => google.maps.geometry.poly.containsLocation(latLng, polygon));\n  }\n\n  subscribeToMapEvent<N extends keyof google.maps.MapHandlerMap>(eventName: N)\n      : Observable<google.maps.MapHandlerMap[N]> {\n    return new Observable((observer) => {\n      this._map.then(m =>\n        m.addListener(eventName, () => this._zone.run(() => observer.next(arguments[0])))\n      );\n    });\n  }\n\n  clearInstanceListeners() {\n    return this._zone.runOutsideAngular(() => {\n      this._map.then((map: google.maps.Map) => {\n        google.maps.event.clearInstanceListeners(map);\n      });\n    });\n  }\n\n  setCenter(latLng: google.maps.LatLngLiteral): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => map.setCenter(latLng));\n    });\n  }\n\n  getZoom(): Promise<number> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => map.getZoom());\n    });\n  }\n\n  getBounds(): Promise<google.maps.LatLngBounds> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => map.getBounds());\n    });\n  }\n\n  getMapTypeId(): Promise<google.maps.MapTypeId> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => map.getMapTypeId());\n    });\n  }\n\n  setZoom(zoom: number): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => map.setZoom(zoom));\n    });\n  }\n\n  getCenter(): Promise<google.maps.LatLng> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: google.maps.Map) => map.getCenter());\n    });\n  }\n\n  panTo(latLng: google.maps.LatLng | google.maps.LatLngLiteral): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.panTo(latLng));\n    });\n  }\n\n  panBy(x: number, y: number): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.panBy(x, y));\n    });\n  }\n\n  fitBounds(latLng: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral, padding?: number | google.maps.Padding): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.fitBounds(latLng, padding));\n    });\n  }\n\n  panToBounds(latLng: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral, padding?: number | google.maps.Padding): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.panToBounds(latLng, padding));\n    });\n  }\n\n  /**\n   * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n   */\n  getNativeMap(): Promise<google.maps.Map> { return this._map; }\n\n  /**\n   * Triggers the given event name on the map instance.\n   */\n  triggerMapEvent(eventName: string): Promise<void> {\n    return this._map.then((m) => google.maps.event.trigger(m, eventName));\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmCircle } from '../../directives/circle';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\n\n@Injectable()\nexport class CircleManager {\n  private _circles: Map<AgmCircle, Promise<google.maps.Circle>> =\n      new Map<AgmCircle, Promise<google.maps.Circle>>();\n\n  constructor(private _apiWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  addCircle(circle: AgmCircle) {\n    this._apiWrapper.getNativeMap().then( () =>\n      this._circles.set(circle, this._apiWrapper.createCircle({\n        center: {lat: circle.latitude, lng: circle.longitude},\n        clickable: circle.clickable,\n        draggable: circle.draggable,\n        editable: circle.editable,\n        fillColor: circle.fillColor,\n        fillOpacity: circle.fillOpacity,\n        radius: circle.radius,\n        strokeColor: circle.strokeColor,\n        strokeOpacity: circle.strokeOpacity,\n        strokePosition: google.maps.StrokePosition[circle.strokePosition],\n        strokeWeight: circle.strokeWeight,\n        visible: circle.visible,\n        zIndex: circle.zIndex,\n      }))\n    );\n  }\n\n  /**\n   * Removes the given circle from the map.\n   */\n  removeCircle(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => {\n      c.setMap(null);\n      this._circles.delete(circle);\n    });\n  }\n\n  async setOptions(circle: AgmCircle, options: google.maps.CircleOptions) {\n    return this._circles.get(circle).then((c) => {\n      const actualParam = options.strokePosition as any as keyof typeof google.maps.StrokePosition;\n      options.strokePosition = google.maps.StrokePosition[actualParam];\n      c.setOptions(options);\n    });\n  }\n\n  getBounds(circle: AgmCircle): Promise<google.maps.LatLngBounds> {\n    return this._circles.get(circle).then((c) => c.getBounds());\n  }\n\n  getCenter(circle: AgmCircle): Promise<google.maps.LatLng> {\n    return this._circles.get(circle).then((c) => c.getCenter());\n  }\n\n  getRadius(circle: AgmCircle): Promise<number> {\n    return this._circles.get(circle).then((c) => c.getRadius());\n  }\n\n  setCenter(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then(\n        c => c.setCenter({lat: circle.latitude, lng: circle.longitude}));\n  }\n\n  setEditable(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then(c => c.setEditable(circle.editable));\n  }\n\n  setDraggable(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then(c => c.setDraggable(circle.draggable));\n  }\n\n  setVisible(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then(c => c.setVisible(circle.visible));\n  }\n\n  setRadius(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then(c => c.setRadius(circle.radius));\n  }\n\n  getNativeCircle(circle: AgmCircle): Promise<google.maps.Circle> {\n    return this._circles.get(circle);\n  }\n\n  createEventObservable<T>(eventName: string, circle: AgmCircle): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      let listener: google.maps.MapsEventListener = null;\n      this._circles.get(circle).then((c) => {\n        listener = c.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n\n      return () => {\n        if (listener !== null) {\n          listener.remove();\n        }\n      };\n    });\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmDataLayer } from './../../directives/data-layer';\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\n\n/**\n * Manages all Data Layers for a Google Map instance.\n */\n@Injectable()\nexport class DataLayerManager {\n  private _layers: Map<AgmDataLayer, Promise<google.maps.Data>> =\n  new Map<AgmDataLayer, Promise<google.maps.Data>>();\n\n  constructor(private _wrapper: GoogleMapsAPIWrapper, private _zone: NgZone) { }\n\n  /**\n   * Adds a new Data Layer to the map.\n   */\n  addDataLayer(layer: AgmDataLayer) {\n    const newLayer = this._wrapper.createDataLayer({\n      style: layer.style,\n    } as google.maps.Data.DataOptions)\n    .then(d => {\n      if (layer.geoJson) {\n        // NOTE: accessing \"features\" on google.maps.Data is undocumented\n        this.getDataFeatures(d, layer.geoJson).then(features => (d as any).features = features);\n      }\n      return d;\n    });\n    this._layers.set(layer, newLayer);\n  }\n\n  deleteDataLayer(layer: AgmDataLayer) {\n    this._layers.get(layer).then(l => {\n      l.setMap(null);\n      this._layers.delete(layer);\n    });\n  }\n\n  updateGeoJson(layer: AgmDataLayer, geoJson: object | string) {\n    this._layers.get(layer).then(l => {\n      l.forEach(feature => {\n        l.remove(feature);\n\n        // NOTE: accessing \"features\" on google.maps.Data is undocumented\n        const index = (l as any).features.indexOf(feature, 0);\n        if (index > -1) {\n          (l as any).features.splice(index, 1);\n        }\n      });\n      this.getDataFeatures(l, geoJson).then(features => (l as any).features = features);\n    });\n  }\n\n  setDataOptions(layer: AgmDataLayer, options: google.maps.Data.DataOptions)\n  {\n    this._layers.get(layer).then(l => {\n      l.setControlPosition(options.controlPosition);\n      l.setControls(options.controls);\n      l.setDrawingMode(options.drawingMode);\n      l.setStyle(options.style);\n    });\n  }\n\n  /**\n   * Creates a Google Maps event listener for the given DataLayer as an Observable\n   */\n  createEventObservable<T>(eventName: string, layer: AgmDataLayer): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._layers.get(layer).then((d: google.maps.Data) => {\n        d.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  /**\n   * Extract features from a geoJson using google.maps Data Class\n   * @param d : google.maps.Data class instance\n   * @param geoJson : url or geojson object\n   */\n  getDataFeatures(d: google.maps.Data, geoJson: object | string): Promise<google.maps.Data.Feature[]> {\n    return new Promise<google.maps.Data.Feature[]>((resolve, reject) => {\n        if (typeof geoJson === 'object') {\n          try {\n            const features = d.addGeoJson(geoJson);\n            resolve(features);\n          } catch (e) {\n            reject(e);\n          }\n        } else if (typeof geoJson === 'string') {\n          d.loadGeoJson(geoJson, null, resolve);\n        } else {\n          reject(`Impossible to extract features from geoJson: wrong argument type`);\n        }\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, from, Observable, timer } from 'rxjs';\nimport {\n  flatMap,\n  map,\n  sample,\n  shareReplay,\n  switchMap,\n} from 'rxjs/operators';\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n\nexport interface FitBoundsDetails {\n  latLng: google.maps.LatLng | google.maps.LatLngLiteral;\n}\n\n/**\n * @internal\n */\nexport type BoundsMap = Map<string, google.maps.LatLng | google.maps.LatLngLiteral>;\n\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\nexport abstract class FitBoundsAccessor {\n  abstract getFitBoundsDetails$(): Observable<FitBoundsDetails>;\n}\n\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\n@Injectable()\nexport class FitBoundsService {\n  protected readonly bounds$: Observable<google.maps.LatLngBounds>;\n  protected readonly _boundsChangeSampleTime$ = new BehaviorSubject<number>(200);\n  protected readonly _includeInBounds$ = new BehaviorSubject<BoundsMap>(new Map<string, google.maps.LatLng | google.maps.LatLngLiteral>());\n\n  constructor(loader: MapsAPILoader) {\n    this.bounds$ = from(loader.load()).pipe(\n      flatMap(() => this._includeInBounds$),\n      sample(\n        this._boundsChangeSampleTime$.pipe(switchMap(time => timer(0, time))),\n      ),\n      map(includeInBounds => this._generateBounds(includeInBounds)),\n      shareReplay(1),\n    );\n  }\n\n  private _generateBounds(\n    includeInBounds: Map<string, google.maps.LatLng | google.maps.LatLngLiteral>\n  ) {\n    const bounds = new google.maps.LatLngBounds();\n    includeInBounds.forEach(b => bounds.extend(b));\n    return bounds;\n  }\n\n  addToBounds(latLng: google.maps.LatLng | google.maps.LatLngLiteral) {\n    const id = this._createIdentifier(latLng);\n    if (this._includeInBounds$.value.has(id)) {\n      return;\n    }\n    const boundsMap = this._includeInBounds$.value;\n    boundsMap.set(id, latLng);\n    this._includeInBounds$.next(boundsMap);\n  }\n\n  removeFromBounds(latLng: google.maps.LatLng | google.maps.LatLngLiteral) {\n    const boundsMap = this._includeInBounds$.value;\n    boundsMap.delete(this._createIdentifier(latLng));\n    this._includeInBounds$.next(boundsMap);\n  }\n\n  changeFitBoundsChangeSampleTime(timeMs: number) {\n    this._boundsChangeSampleTime$.next(timeMs);\n  }\n\n  getBounds$(): Observable<google.maps.LatLngBounds> {\n    return this.bounds$;\n  }\n\n  protected _createIdentifier(latLng: google.maps.LatLng | google.maps.LatLngLiteral): string {\n    return `${latLng.lat}+${latLng.lng}`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { bindCallback, ConnectableObservable, Observable, of, ReplaySubject, throwError } from 'rxjs';\nimport { map, multicast, switchMap } from 'rxjs/operators';\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n\n@Injectable({ providedIn: 'root' })\nexport class AgmGeocoder {\n  protected readonly geocoder$: Observable<google.maps.Geocoder>;\n\n  constructor(loader: MapsAPILoader) {\n    const connectableGeocoder$ = new Observable(subscriber => {\n      loader.load().then(() => subscriber.next());\n    })\n      .pipe(\n        map(() => this._createGeocoder()),\n        multicast(new ReplaySubject(1)),\n      ) as ConnectableObservable<google.maps.Geocoder>;\n\n    connectableGeocoder$.connect(); // ignore the subscription\n    // since we will remain subscribed till application exits\n\n    this.geocoder$ = connectableGeocoder$;\n  }\n\n  geocode(request: google.maps.GeocoderRequest): Observable<google.maps.GeocoderResult[]> {\n    return this.geocoder$.pipe(\n      switchMap((geocoder) => this._getGoogleResults(geocoder, request))\n    );\n  }\n\n  private _getGoogleResults(geocoder: google.maps.Geocoder, request: google.maps.GeocoderRequest):\n       Observable<google.maps.GeocoderResult[]> {\n    const geocodeObservable = bindCallback(geocoder.geocode);\n    return geocodeObservable(request).pipe(\n      switchMap(([results, status]) => {\n        if (status === google.maps.GeocoderStatus.OK) {\n          return of(results);\n        }\n\n        return throwError(status);\n      })\n    );\n  }\n\n  private _createGeocoder() {\n    return new google.maps.Geocoder();\n  }\n}\n","import { Provider } from '@angular/core';\n\nexport class WindowRef {\n  getNativeWindow(): any { return window; }\n}\n\nexport class DocumentRef {\n  getNativeDocument(): any { return document; }\n}\n\nexport const BROWSER_GLOBALS_PROVIDERS: Provider[] = [WindowRef, DocumentRef];\n","import { Inject, Injectable, InjectionToken, LOCALE_ID, Optional } from '@angular/core';\n\nimport { DocumentRef, WindowRef } from '../../utils/browser-globals';\n\nimport { MapsAPILoader } from './maps-api-loader';\n\nexport enum GoogleMapsScriptProtocol {\n  HTTP = 1,\n  HTTPS = 2,\n  AUTO = 3,\n}\n\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\nexport const LAZY_MAPS_API_CONFIG = new InjectionToken<LazyMapsAPILoaderConfigLiteral>('angular-google-maps LAZY_MAPS_API_CONFIG');\n\n/**\n * Configuration for the {@link LazyMapsAPILoader}.\n */\nexport interface LazyMapsAPILoaderConfigLiteral {\n  /**\n   * The Google Maps API Key (see:\n   * https://developers.google.com/maps/documentation/javascript/get-api-key)\n   */\n  apiKey?: string;\n\n  /**\n   * The Google Maps client ID (for premium plans).\n   * When you have a Google Maps APIs Premium Plan license, you must authenticate\n   * your application with either an API key or a client ID.\n   * The Google Maps API will fail to load if both a client ID and an API key are included.\n   */\n  clientId?: string;\n\n  /**\n   * The Google Maps channel name (for premium plans).\n   * A channel parameter is an optional parameter that allows you to track usage under your client\n   * ID by assigning a distinct channel to each of your applications.\n   */\n  channel?: string;\n\n  /**\n   * Google Maps API version.\n   */\n  apiVersion?: string;\n\n  /**\n   * Host and Path used for the `<script>` tag.\n   */\n  hostAndPath?: string;\n\n  /**\n   * Protocol used for the `<script>` tag.\n   */\n  protocol?: GoogleMapsScriptProtocol;\n\n  /**\n   * Defines which Google Maps libraries should get loaded.\n   */\n  libraries?: string[];\n\n  /**\n   * The default bias for the map behavior is US.\n   * If you wish to alter your application to serve different map tiles or bias the\n   * application, you can overwrite the default behavior (US) by defining a `region`.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Region\n   */\n  region?: string;\n\n  /**\n   * The Google Maps API uses the browser's preferred language when displaying\n   * textual information. If you wish to overwrite this behavior and force the API\n   * to use a given language, you can use this setting.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Language\n   */\n  language?: string;\n}\n\n@Injectable()\nexport class LazyMapsAPILoader extends MapsAPILoader {\n  protected _scriptLoadingPromise: Promise<void>;\n  protected _config: LazyMapsAPILoaderConfigLiteral;\n  protected _windowRef: WindowRef;\n  protected _documentRef: DocumentRef;\n  protected readonly _SCRIPT_ID: string = 'agmGoogleMapsApiScript';\n  protected readonly callbackName: string = `agmLazyMapsAPILoader`;\n\n  constructor(@Optional() @Inject(LAZY_MAPS_API_CONFIG) config: any = null, w: WindowRef, d: DocumentRef,\n              @Inject(LOCALE_ID) private localeId: string) {\n    super();\n    this._config = config || {};\n    this._windowRef = w;\n    this._documentRef = d;\n  }\n\n  load(): Promise<void> {\n    const window = this._windowRef.getNativeWindow() as any;\n    if (window.google && window.google.maps) {\n      // Google maps already loaded on the page.\n      return Promise.resolve();\n    }\n\n    if (this._scriptLoadingPromise) {\n      return this._scriptLoadingPromise;\n    }\n\n    // this can happen in HMR situations or Stackblitz.io editors.\n    const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n    if (scriptOnPage) {\n      this._assignScriptLoadingPromise(scriptOnPage);\n      return this._scriptLoadingPromise;\n    }\n\n    const script = this._documentRef.getNativeDocument().createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    script.id = this._SCRIPT_ID;\n    script.src = this._getScriptSrc(this.callbackName);\n    this._assignScriptLoadingPromise(script);\n    this._documentRef.getNativeDocument().body.appendChild(script);\n    return this._scriptLoadingPromise;\n  }\n\n  private _assignScriptLoadingPromise(scriptElem: HTMLElement) {\n    this._scriptLoadingPromise = new Promise((resolve, reject) => {\n      this._windowRef.getNativeWindow()[this.callbackName] = () => {\n        resolve();\n      };\n\n      scriptElem.onerror = (error: Event) => {\n        reject(error);\n      };\n    });\n  }\n\n  protected _getScriptSrc(callbackName: string): string {\n    const protocolType: GoogleMapsScriptProtocol =\n        (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\n    let protocol: string;\n\n    switch (protocolType) {\n      case GoogleMapsScriptProtocol.AUTO:\n        protocol = '';\n        break;\n      case GoogleMapsScriptProtocol.HTTP:\n        protocol = 'http:';\n        break;\n      case GoogleMapsScriptProtocol.HTTPS:\n        protocol = 'https:';\n        break;\n    }\n\n    const hostAndPath: string = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n    const queryParams: {[key: string]: string | string[]} = {\n      v: this._config.apiVersion || 'quarterly',\n      callback: callbackName,\n      key: this._config.apiKey,\n      client: this._config.clientId,\n      channel: this._config.channel,\n      libraries: this._config.libraries,\n      region: this._config.region,\n      language: this._config.language || (this.localeId !== 'en-US' ? this.localeId : null),\n    };\n    const params: string = Object.keys(queryParams)\n                               .filter((k: string) => queryParams[k] != null)\n                               .filter((k: string) => {\n                                 // remove empty arrays\n                                 return !Array.isArray(queryParams[k]) ||\n                                     (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n                               })\n                               .map((k: string) => {\n                                 // join arrays as comma seperated strings\n                                 const i = queryParams[k];\n                                 if (Array.isArray(i)) {\n                                   return {key: k, value: i.join(',')};\n                                 }\n                                 return {key: k, value: queryParams[k]};\n                               })\n                               .map((entry: {key: string, value: string}) => {\n                                 return `${entry.key}=${entry.value}`;\n                               })\n                               .join('&');\n    return `${protocol}//${hostAndPath}?${params}`;\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { AgmMarker } from './../../directives/marker';\n\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\n\n@Injectable()\nexport class MarkerManager {\n  protected _markers: Map<AgmMarker, Promise<google.maps.Marker>> =\n      new Map<AgmMarker, Promise<google.maps.Marker>>();\n\n  constructor(protected _mapsWrapper: GoogleMapsAPIWrapper, protected _zone: NgZone) {}\n\n  async convertAnimation(uiAnim: keyof typeof google.maps.Animation | null) {\n    if (uiAnim === null) {\n      return null;\n    } else {\n      return this._mapsWrapper.getNativeMap().then(() => google.maps.Animation[uiAnim]);\n    }\n  }\n\n  deleteMarker(markerDirective: AgmMarker): Promise<void> {\n    const markerPromise = this._markers.get(markerDirective);\n    if (markerPromise == null) {\n      // marker already deleted\n      return Promise.resolve();\n    }\n    return markerPromise.then((marker: google.maps.Marker) => {\n      return this._zone.run(() => {\n        marker.setMap(null);\n        this._markers.delete(markerDirective);\n      });\n    });\n  }\n\n  updateMarkerPosition(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then(\n        (m: google.maps.Marker) => m.setPosition({lat: marker.latitude, lng: marker.longitude}));\n  }\n\n  updateTitle(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: google.maps.Marker) => m.setTitle(marker.title));\n  }\n\n  updateLabel(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: google.maps.Marker) => { m.setLabel(marker.label); });\n  }\n\n  updateDraggable(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: google.maps.Marker) => m.setDraggable(marker.draggable));\n  }\n\n  updateIcon(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: google.maps.Marker) => m.setIcon(marker.iconUrl));\n  }\n\n  updateOpacity(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: google.maps.Marker) => m.setOpacity(marker.opacity));\n  }\n\n  updateVisible(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: google.maps.Marker) => m.setVisible(marker.visible));\n  }\n\n  updateZIndex(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: google.maps.Marker) => m.setZIndex(marker.zIndex));\n  }\n\n  updateClickable(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: google.maps.Marker) => m.setClickable(marker.clickable));\n  }\n\n  async updateAnimation(marker: AgmMarker) {\n    const m = await this._markers.get(marker);\n    m.setAnimation(await this.convertAnimation(marker.animation));\n  }\n\n  addMarker(marker: AgmMarker) {\n    const markerPromise = new Promise<google.maps.Marker>(async (resolve) =>\n     this._mapsWrapper.createMarker({\n        position: {lat: marker.latitude, lng: marker.longitude},\n        label: marker.label,\n        draggable: marker.draggable,\n        icon: marker.iconUrl,\n        opacity: marker.opacity,\n        visible: marker.visible,\n        zIndex: marker.zIndex,\n        title: marker.title,\n        clickable: marker.clickable,\n        animation: await this.convertAnimation(marker.animation),\n      }).then(resolve));\n    this._markers.set(marker, markerPromise);\n  }\n\n  getNativeMarker(marker: AgmMarker): Promise<google.maps.Marker> {\n    return this._markers.get(marker);\n  }\n\n  createEventObservable<T extends (google.maps.MouseEvent | void)>(\n      eventName: google.maps.MarkerMouseEventNames | google.maps.MarkerChangeOptionEventNames,\n      marker: AgmMarker): Observable<T> {\n    return new Observable(observer => {\n      this._markers.get(marker).then(m =>\n        m.addListener(eventName, e => this._zone.run(() => observer.next(e)))\n      );\n    });\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmInfoWindow } from '../../directives/info-window';\n\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport { MarkerManager } from './marker-manager';\n\n@Injectable()\nexport class InfoWindowManager {\n  private _infoWindows: Map<AgmInfoWindow, Promise<google.maps.InfoWindow>> =\n      new Map<AgmInfoWindow, Promise<google.maps.InfoWindow>>();\n\n  constructor(\n      private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone,\n      private _markerManager: MarkerManager) {}\n\n  deleteInfoWindow(infoWindow: AgmInfoWindow): Promise<void> {\n    const iWindow = this._infoWindows.get(infoWindow);\n    if (iWindow == null) {\n      // info window already deleted\n      return Promise.resolve();\n    }\n    return iWindow.then((i: google.maps.InfoWindow) => {\n      return this._zone.run(() => {\n        i.close();\n        this._infoWindows.delete(infoWindow);\n      });\n    });\n  }\n\n  setPosition(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((i: google.maps.InfoWindow) => i.setPosition({\n      lat: infoWindow.latitude,\n      lng: infoWindow.longitude,\n    }));\n  }\n\n  setZIndex(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow)\n        .then((i: google.maps.InfoWindow) => i.setZIndex(infoWindow.zIndex));\n  }\n\n  open(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((w) => {\n      if (infoWindow.hostMarker != null) {\n        return this._markerManager.getNativeMarker(infoWindow.hostMarker).then((marker) => {\n          return this._mapsWrapper.getNativeMap().then((map) => w.open(map, marker));\n        });\n      }\n      return this._mapsWrapper.getNativeMap().then((map) => w.open(map));\n    });\n  }\n\n  close(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((w) => w.close());\n  }\n\n  setOptions(infoWindow: AgmInfoWindow, options: google.maps.InfoWindowOptions) {\n    return this._infoWindows.get(infoWindow).then((i: google.maps.InfoWindow) => i.setOptions(options));\n  }\n\n  addInfoWindow(infoWindow: AgmInfoWindow) {\n    const options: google.maps.InfoWindowOptions = {\n      content: infoWindow.content,\n      maxWidth: infoWindow.maxWidth,\n      zIndex: infoWindow.zIndex,\n      disableAutoPan: infoWindow.disableAutoPan,\n    };\n    if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n      options.position = {lat: infoWindow.latitude, lng: infoWindow.longitude};\n    }\n    const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n    this._infoWindows.set(infoWindow, infoWindowPromise);\n  }\n\n   /**\n    * Creates a Google Maps event listener for the given InfoWindow as an Observable\n    */\n  createEventObservable<T>(eventName: string, infoWindow: AgmInfoWindow): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._infoWindows.get(infoWindow).then((i: google.maps.InfoWindow) => {\n        i.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmKmlLayer } from './../../directives/kml-layer';\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\n\n/**\n * Manages all KML Layers for a Google Map instance.\n */\n@Injectable()\nexport class KmlLayerManager {\n  private _layers: Map<AgmKmlLayer, Promise<google.maps.KmlLayer>> =\n      new Map<AgmKmlLayer, Promise<google.maps.KmlLayer>>();\n\n  constructor(private _wrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  /**\n   * Adds a new KML Layer to the map.\n   */\n  addKmlLayer(layer: AgmKmlLayer) {\n    const newLayer = this._wrapper.getNativeMap().then(m => {\n      return new google.maps.KmlLayer({\n        clickable: layer.clickable,\n        map: m,\n        preserveViewport: layer.preserveViewport,\n        screenOverlays: layer.screenOverlays,\n        suppressInfoWindows: layer.suppressInfoWindows,\n        url: layer.url,\n        zIndex: layer.zIndex,\n      });\n    });\n    this._layers.set(layer, newLayer);\n  }\n\n  setOptions(layer: AgmKmlLayer, options: google.maps.KmlLayerOptions) {\n    this._layers.get(layer).then(l => l.setOptions(options));\n  }\n\n  deleteKmlLayer(layer: AgmKmlLayer) {\n    this._layers.get(layer).then(l => {\n      l.setMap(null);\n      this._layers.delete(layer);\n    });\n  }\n\n  /**\n   * Creates a Google Maps event listener for the given KmlLayer as an Observable\n   */\n  createEventObservable<T>(eventName: string, layer: AgmKmlLayer): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._layers.get(layer).then((m: google.maps.KmlLayer) => {\n        m.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AgmBicyclingLayer } from '../../directives/bicycling-layer';\nimport { AgmTransitLayer } from '../../directives/transit-layer';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\n\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\n\n@Injectable()\nexport class LayerManager {\n    private _layers: Map<AgmTransitLayer | AgmBicyclingLayer, Promise<google.maps.TransitLayer | google.maps.BicyclingLayer>> =\n        new Map<AgmTransitLayer | AgmBicyclingLayer, Promise<google.maps.TransitLayer | google.maps.BicyclingLayer>>();\n\n    constructor(private _wrapper: GoogleMapsAPIWrapper) {}\n\n    /**\n     * Adds a transit layer to a map instance.\n     * @param layer - a TransitLayer object\n     * @param _options - TransitLayerOptions options\n     * @returns void\n     */\n    addTransitLayer(layer: AgmTransitLayer): void {\n        const newLayer = this._wrapper.createTransitLayer();\n        this._layers.set(layer, newLayer);\n    }\n\n    /**\n     * Adds a bicycling layer to a map instance.\n     * @param layer - a bicycling layer object\n     * @param _options - BicyclingLayer options\n     * @returns void\n     */\n    addBicyclingLayer(layer: AgmBicyclingLayer): void {\n        const newLayer = this._wrapper.createBicyclingLayer();\n        this._layers.set(layer, newLayer);\n    }\n\n    /**\n     * Deletes a map layer\n     * @param layer - the layer to delete\n     */\n    deleteLayer(layer: AgmTransitLayer | AgmBicyclingLayer): Promise<void> {\n        return this._layers.get(layer).then(currentLayer => {\n            currentLayer.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n}\n","import { MapsAPILoader } from './maps-api-loader';\n\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\nexport class NoOpMapsAPILoader implements MapsAPILoader {\n  load(): Promise<void> {\n    if (!(window as any).google || !(window as any).google.maps) {\n      throw new Error(\n          'Google Maps API not loaded on page. Make sure window.google.maps is available!');\n    }\n    return Promise.resolve();\n  }\n}\n","import { fromEventPattern, Observable } from 'rxjs';\n\nexport function createMVCEventObservable<T>(array: google.maps.MVCArray<T>): Observable<MVCEvent<T>>{\n  const eventNames = ['insert_at', 'remove_at', 'set_at'];\n  return fromEventPattern(\n    handler => eventNames.map(eventName => array.addListener(eventName,\n      (index: number, previous?: T) => handler.apply(array, [ {newArr: array.getArray(), eventName, index, previous} as MVCEvent<T>]))),\n    (_handler, evListeners: google.maps.MapsEventListener[]) => evListeners.forEach(evListener => evListener.remove()));\n}\n\nexport type MvcEventType = 'insert_at' | 'remove_at' | 'set_at';\n\nexport interface MVCEvent<T> {\n  newArr: T[];\n  eventName: MvcEventType;\n  index: number;\n  previous?: T;\n}\n\nexport class MvcArrayMock<T> implements google.maps.MVCArray<T> {\n  private vals: T[] = [];\n  private listeners: {\n    'remove_at': ((i: number, r: T) => void)[];\n    'insert_at': ((i: number) => void)[];\n    'set_at': ((i: number, val: T) => void)[];\n  } = {\n    remove_at: [],\n    insert_at: [],\n    set_at: [],\n  };\n  clear(): void {\n    for (let i = this.vals.length - 1; i >= 0; i--) {\n        this.removeAt(i);\n    }\n  }\n  getArray(): T[] {\n    return [...this.vals];\n  }\n  getAt(i: number): T {\n    return this.vals[i];\n  }\n  getLength(): number {\n    return this.vals.length;\n  }\n  insertAt(i: number, elem: T): void {\n    this.vals.splice(i, 0, elem);\n    this.listeners.insert_at.forEach(listener => listener(i));\n  }\n  pop(): T {\n    const deleted = this.vals.pop();\n    this.listeners.remove_at.forEach(listener => listener(this.vals.length, deleted));\n    return deleted;\n  }\n  push(elem: T): number {\n    this.vals.push(elem);\n    this.listeners.insert_at.forEach(listener => listener(this.vals.length - 1));\n    return this.vals.length;\n  }\n  removeAt(i: number): T {\n    const deleted = this.vals.splice(i, 1)[0];\n    this.listeners.remove_at.forEach(listener => listener(i, deleted));\n    return deleted;\n  }\n  setAt(i: number, elem: T): void {\n    const deleted = this.vals[i];\n    this.vals[i] = elem;\n    this.listeners.set_at.forEach(listener => listener(i, deleted));\n  }\n  forEach(callback: (elem: T, i: number) => void): void {\n    this.vals.forEach(callback);\n  }\n  addListener(eventName: 'remove_at' | 'insert_at' | 'set_at', handler: (...args: any[]) => void): google.maps.MapsEventListener {\n    const listenerArr = this.listeners[eventName];\n    listenerArr.push(handler);\n    return {\n        remove: () => {\n            listenerArr.splice(listenerArr.indexOf(handler), 1);\n        },\n    };\n  }\n\n  bindTo(): never { throw new Error('Not implemented'); }\n  changed(): never { throw new Error('Not implemented'); }\n  get(): never { throw new Error('Not implemented'); }\n  notify(): never { throw new Error('Not implemented'); }\n  set(): never { throw new Error('Not implemented'); }\n  setValues(): never { throw new Error('Not implemented'); }\n  unbind(): never { throw new Error('Not implemented'); }\n  unbindAll(): never { throw new Error('Not implemented'); }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { merge, Observable, Observer } from 'rxjs';\nimport { map, skip, startWith, switchMap } from 'rxjs/operators';\n\nimport { AgmPolygon } from '../../directives/polygon';\nimport { createMVCEventObservable, MVCEvent } from '../../utils/mvcarray-utils';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\n\n@Injectable()\nexport class PolygonManager {\n  private _polygons: Map<AgmPolygon, Promise<google.maps.Polygon>> =\n    new Map<AgmPolygon, Promise<google.maps.Polygon>>();\n\n  constructor(private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) { }\n\n  addPolygon(path: AgmPolygon) {\n    const polygonPromise = this._mapsWrapper.createPolygon({\n      clickable: path.clickable,\n      draggable: path.draggable,\n      editable: path.editable,\n      fillColor: path.fillColor,\n      fillOpacity: path.fillOpacity,\n      geodesic: path.geodesic,\n      paths: path.paths,\n      strokeColor: path.strokeColor,\n      strokeOpacity: path.strokeOpacity,\n      strokeWeight: path.strokeWeight,\n      visible: path.visible,\n      zIndex: path.zIndex,\n    });\n    this._polygons.set(path, polygonPromise);\n  }\n\n  updatePolygon(polygon: AgmPolygon): Promise<void> {\n    const m = this._polygons.get(polygon);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: google.maps.Polygon) => this._zone.run(() => { l.setPaths(polygon.paths); }));\n  }\n\n  setPolygonOptions(path: AgmPolygon, options: { [propName: string]: any }): Promise<void> {\n    return this._polygons.get(path).then((l: google.maps.Polygon) => { l.setOptions(options); });\n  }\n\n  deletePolygon(paths: AgmPolygon): Promise<void> {\n    const m = this._polygons.get(paths);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: google.maps.Polygon) => {\n      return this._zone.run(() => {\n        l.setMap(null);\n        this._polygons.delete(paths);\n      });\n    });\n  }\n\n  getPath(polygonDirective: AgmPolygon): Promise<google.maps.LatLng[]> {\n    return this._polygons.get(polygonDirective)\n      .then((polygon) => polygon.getPath().getArray());\n  }\n\n  getPaths(polygonDirective: AgmPolygon): Promise<google.maps.LatLng[][]> {\n    return this._polygons.get(polygonDirective)\n      .then((polygon) => polygon.getPaths().getArray().map((p) => p.getArray()));\n  }\n\n  createEventObservable<T>(eventName: string, path: AgmPolygon): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._polygons.get(path).then((l: google.maps.Polygon) => {\n        l.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  async createPathEventObservable(agmPolygon: AgmPolygon):\n        Promise<Observable<MVCEvent<google.maps.LatLng[] | google.maps.LatLngLiteral[]>>> {\n    const polygon = await this._polygons.get(agmPolygon);\n    const paths = polygon.getPaths();\n    const pathsChanges$ = createMVCEventObservable(paths);\n    return pathsChanges$.pipe(\n      startWith(({ newArr: paths.getArray() } as MVCEvent<google.maps.MVCArray<google.maps.LatLng>>)), // in order to subscribe to them all\n      switchMap(parentMVEvent => merge(...// rest parameter\n        parentMVEvent.newArr.map((chMVC, index) =>\n          createMVCEventObservable(chMVC)\n          .pipe(map(chMVCEvent => ({ parentMVEvent, chMVCEvent, pathIndex: index })))))\n        .pipe( // start the merged ob with an event signinifing change to parent\n          startWith({ parentMVEvent, chMVCEvent: null, pathIndex: null }))\n      ),\n      skip(1), // skip the manually added event\n      map(({ parentMVEvent, chMVCEvent, pathIndex }) => {\n        let retVal;\n        if (!chMVCEvent) {\n          retVal = {\n            newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n            eventName: parentMVEvent.eventName,\n            index: parentMVEvent.index,\n          } as MVCEvent<google.maps.LatLng[] | google.maps.LatLngLiteral[]>;\n          if (parentMVEvent.previous) {\n            retVal.previous =  parentMVEvent.previous.getArray();\n          }\n        } else {\n          retVal = {\n            newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n            pathIndex,\n            eventName: chMVCEvent.eventName,\n            index: chMVCEvent.index,\n          } as unknown as MVCEvent<google.maps.LatLng[] | google.maps.LatLngLiteral[]>;\n          if (chMVCEvent.previous) {\n            retVal.previous = chMVCEvent.previous;\n          }\n        }\n        return retVal;\n      }));\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmPolyline } from '../../directives/polyline';\nimport { AgmPolylinePoint } from '../../directives/polyline-point';\nimport { createMVCEventObservable, MVCEvent } from '../../utils/mvcarray-utils';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\n\n@Injectable()\nexport class PolylineManager {\n  private _polylines: Map<AgmPolyline, Promise<google.maps.Polyline>> =\n      new Map<AgmPolyline, Promise<google.maps.Polyline>>();\n\n  constructor(private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  private static _convertPoints(line: AgmPolyline): google.maps.LatLngLiteral[] {\n    const path = line._getPoints().map((point: AgmPolylinePoint) => {\n      return {lat: point.latitude, lng: point.longitude} as google.maps.LatLngLiteral;\n    });\n    return path;\n  }\n\n  private static _convertPath(path: keyof typeof google.maps.SymbolPath | string): google.maps.SymbolPath | string {\n    const symbolPath = google.maps.SymbolPath[path as keyof typeof google.maps.SymbolPath];\n    if (typeof symbolPath === 'number') {\n      return symbolPath;\n    } else{\n      return path;\n    }\n  }\n\n  private static _convertIcons(line: AgmPolyline): Array<google.maps.IconSequence> {\n    const icons = line._getIcons().map(agmIcon => ({\n      fixedRotation: agmIcon.fixedRotation,\n      offset: agmIcon.offset,\n      repeat: agmIcon.repeat,\n      icon: {\n        anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n        fillColor: agmIcon.fillColor,\n        fillOpacity: agmIcon.fillOpacity,\n        path: PolylineManager._convertPath(agmIcon.path),\n        rotation: agmIcon.rotation,\n        scale: agmIcon.scale,\n        strokeColor: agmIcon.strokeColor,\n        strokeOpacity: agmIcon.strokeOpacity,\n        strokeWeight: agmIcon.strokeWeight,\n      },\n    } as google.maps.IconSequence));\n    // prune undefineds;\n    icons.forEach(icon => {\n      Object.entries(icon).forEach(([key, val]) => {\n        if (typeof val === 'undefined') {\n          delete (icon as any)[key];\n        }\n      });\n      if (typeof icon.icon.anchor.x === 'undefined' ||\n        typeof icon.icon.anchor.y === 'undefined') {\n          delete icon.icon.anchor;\n        }\n    });\n    return icons;\n  }\n\n  addPolyline(line: AgmPolyline) {\n    const polylinePromise = this._mapsWrapper.getNativeMap()\n    .then(() => [ PolylineManager._convertPoints(line),\n                  PolylineManager._convertIcons(line)])\n    .then(([path, icons]: [google.maps.LatLngLiteral[], google.maps.IconSequence[]]) =>\n      this._mapsWrapper.createPolyline({\n        clickable: line.clickable,\n        draggable: line.draggable,\n        editable: line.editable,\n        geodesic: line.geodesic,\n        strokeColor: line.strokeColor,\n        strokeOpacity: line.strokeOpacity,\n        strokeWeight: line.strokeWeight,\n        visible: line.visible,\n        zIndex: line.zIndex,\n        path,\n        icons,\n    }));\n    this._polylines.set(line, polylinePromise);\n  }\n\n  updatePolylinePoints(line: AgmPolyline): Promise<void> {\n    const path = PolylineManager._convertPoints(line);\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l) => this._zone.run(() => l.setPath(path)));\n  }\n\n  async updateIconSequences(line: AgmPolyline): Promise<void> {\n    await this._mapsWrapper.getNativeMap();\n    const icons = PolylineManager._convertIcons(line);\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return;\n    }\n    return m.then(l => this._zone.run(() => l.setOptions({icons}) ) );\n  }\n\n  setPolylineOptions(line: AgmPolyline, options: {[propName: string]: any}):\n      Promise<void> {\n    return this._polylines.get(line).then((l: google.maps.Polyline) => { l.setOptions(options); });\n  }\n\n  deletePolyline(line: AgmPolyline): Promise<void> {\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: google.maps.Polyline) => {\n      return this._zone.run(() => {\n        l.setMap(null);\n        this._polylines.delete(line);\n      });\n    });\n  }\n\n  private async getMVCPath(agmPolyline: AgmPolyline): Promise<google.maps.MVCArray<google.maps.LatLng>> {\n    const polyline = await this._polylines.get(agmPolyline);\n    return polyline.getPath();\n  }\n\n  async getPath(agmPolyline: AgmPolyline): Promise<google.maps.LatLng[]> {\n    return (await this.getMVCPath(agmPolyline)).getArray();\n  }\n\n  createEventObservable<T>(eventName: string, line: AgmPolyline): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._polylines.get(line).then((l: google.maps.Polyline) => {\n        l.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  async createPathEventObservable(line: AgmPolyline): Promise<Observable<MVCEvent<google.maps.LatLng>>> {\n    const mvcPath = await this.getMVCPath(line);\n    return createMVCEventObservable(mvcPath);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { Observable, Subscriber } from 'rxjs';\n\nimport { AgmRectangle } from '../../directives/rectangle';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\n\n@Injectable()\nexport class RectangleManager {\n  private _rectangles: Map<AgmRectangle, Promise<google.maps.Rectangle>> =\n      new Map<AgmRectangle, Promise<google.maps.Rectangle>>();\n\n  constructor(private _apiWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  addRectangle(rectangle: AgmRectangle) {\n    this._apiWrapper.getNativeMap().then(() =>\n      this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n        bounds: {\n          north: rectangle.north,\n          east: rectangle.east,\n          south: rectangle.south,\n          west: rectangle.west,\n        },\n        clickable: rectangle.clickable,\n        draggable: rectangle.draggable,\n        editable: rectangle.editable,\n        fillColor: rectangle.fillColor,\n        fillOpacity: rectangle.fillOpacity,\n        strokeColor: rectangle.strokeColor,\n        strokeOpacity: rectangle.strokeOpacity,\n        strokePosition: google.maps.StrokePosition[rectangle.strokePosition],\n        strokeWeight: rectangle.strokeWeight,\n        visible: rectangle.visible,\n        zIndex: rectangle.zIndex,\n      }))\n    );\n  }\n\n  /**\n   * Removes the given rectangle from the map.\n   */\n  removeRectangle(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      r.setMap(null);\n      this._rectangles.delete(rectangle);\n    });\n  }\n\n  setOptions(rectangle: AgmRectangle, options: google.maps.RectangleOptions): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      const actualStrokePosition = options.strokePosition as any as keyof typeof google.maps.StrokePosition;\n      options.strokePosition = google.maps.StrokePosition[actualStrokePosition];\n      r.setOptions(options);\n    });\n  }\n\n  getBounds(rectangle: AgmRectangle): Promise<google.maps.LatLngBounds> {\n    return this._rectangles.get(rectangle).then((r) => r.getBounds());\n  }\n\n  setBounds(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setBounds({\n        north: rectangle.north,\n        east: rectangle.east,\n        south: rectangle.south,\n        west: rectangle.west,\n      });\n    });\n  }\n\n  setEditable(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setEditable(rectangle.editable);\n    });\n  }\n\n  setDraggable(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setDraggable(rectangle.draggable);\n    });\n  }\n\n  setVisible(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setVisible(rectangle.visible);\n    });\n  }\n\n  createEventObservable<T>(eventName: string, rectangle: AgmRectangle): Observable<T> {\n    return new Observable((subsrciber: Subscriber<T>) => {\n      let listener: google.maps.MapsEventListener = null;\n      this._rectangles.get(rectangle).then((r) => {\n        listener = r.addListener(eventName, (e: T) => this._zone.run(() => subsrciber.next(e)));\n      });\n\n      return () => {\n        if (listener !== null) {\n          listener.remove();\n        }\n      };\n    });\n  }\n}\n","import { Directive, Input, OnDestroy, OnInit } from '@angular/core';\nimport { LayerManager } from '../services/managers/layer-manager';\n\nlet layerId = 0;\n\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\n@Directive({\n    selector: 'agm-bicycling-layer',\n})\nexport class AgmBicyclingLayer implements OnInit, OnDestroy{\n    private _addedToManager = false;\n    private _id: string = (layerId++).toString();\n\n    /**\n     * Hide/show bicycling layer\n     */\n    @Input() visible = true;\n\n    constructor( private _manager: LayerManager ) {}\n\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addBicyclingLayer(this);\n        this._addedToManager = true;\n    }\n\n    /** @internal */\n    id(): string { return this._id; }\n\n    /** @internal */\n    toString(): string { return `AgmBicyclingLayer-${this._id.toString()}`; }\n\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n\n}\n","import { Directive, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { CircleManager } from '../services/managers/circle-manager';\n\n@Directive({\n  selector: 'agm-circle',\n})\nexport class AgmCircle implements OnInit, OnChanges, OnDestroy {\n  /**\n   * The latitude position of the circle (required).\n   */\n  @Input() latitude: number;\n\n  /**\n   * The clickable position of the circle (required).\n   */\n  @Input() longitude: number;\n\n  /**\n   * Indicates whether this Circle handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this circle over the map. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('circleDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this circle by dragging the control points shown at\n   * the center and around the circumference of the circle. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * The fill color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The fill opacity between 0.0 and 1.0.\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * The radius in meters on the Earth's surface.\n   */\n  @Input() radius = 0;\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke position. Defaults to CENTER.\n   * This property is not supported on Internet Explorer 8 and earlier.\n   */\n  @Input() strokePosition: keyof typeof google.maps.StrokePosition = 'CENTER';\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight = 0;\n\n  /**\n   * Whether this circle is visible on the map. Defaults to true.\n   */\n  @Input() visible = true;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the circle's center is changed.\n   */\n  @Output() centerChange: EventEmitter<google.maps.LatLngLiteral> = new EventEmitter<google.maps.LatLngLiteral>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the circle.\n   */\n  @Output() circleClick: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the circle.\n   */\n  @Output() circleDblClick: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the circle.\n   */\n  // tslint:disable-next-line: no-output-native\n  @Output() drag: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the circle.\n   */\n  @Output() dragEnd: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the circle.\n   */\n  @Output() dragStart: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the circle.\n   */\n  @Output() mouseDown: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the circle.\n   */\n  @Output() mouseMove: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired on circle mouseout.\n   */\n  @Output() mouseOut: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired on circle mouseover.\n   */\n  @Output() mouseOver: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mouseup event is fired on the circle.\n   */\n  @Output() mouseUp: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the circle's radius is changed.\n   */\n  @Output() radiusChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * This event is fired when the circle is right-clicked on.\n   */\n  @Output() rightClick: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  private _circleAddedToManager = false;\n\n  private static _mapOptions: string[] = [\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n    'visible', 'zIndex', 'clickable',\n  ];\n\n  private _eventSubscriptions: Subscription[] = [];\n\n  constructor(private _manager: CircleManager) {}\n\n  /** @internal */\n  ngOnInit() {\n    this._manager.addCircle(this);\n    this._circleAddedToManager = true;\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._circleAddedToManager) {\n      return;\n    }\n    // tslint:disable: no-string-literal\n    if (changes['latitude'] || changes['longitude']) {\n      this._manager.setCenter(this);\n    }\n    if (changes['editable']) {\n      this._manager.setEditable(this);\n    }\n    if (changes['draggable']) {\n      this._manager.setDraggable(this);\n    }\n    if (changes['visible']) {\n      this._manager.setVisible(this);\n    }\n    if (changes['radius']) {\n      this._manager.setRadius(this);\n    }\n    // tslint:enable: no-string-literal\n    this._updateCircleOptionsChanges(changes);\n  }\n\n  private _updateCircleOptionsChanges(changes: {[propName: string]: SimpleChange}) {\n    const options: {[propName: string]: any} = {};\n    const optionKeys =\n        Object.keys(changes).filter(k => AgmCircle._mapOptions.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n\n    if (optionKeys.length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _registerEventListeners() {\n    const events: Map<string, EventEmitter<any>> = new Map<string, EventEmitter<any>>();\n    events.set('center_changed', this.centerChange);\n    events.set('click', this.circleClick);\n    events.set('dblclick', this.circleDblClick);\n    events.set('drag', this.drag);\n    events.set('dragend', this.dragEnd);\n    events.set('dragstart', this.dragStart);\n    events.set('mousedown', this.mouseDown);\n    events.set('mousemove', this.mouseMove);\n    events.set('mouseout', this.mouseOut);\n    events.set('mouseover', this.mouseOver);\n    events.set('mouseup', this.mouseUp);\n    events.set('radius_changed', this.radiusChange);\n    events.set('rightclick', this.rightClick);\n\n    events.forEach((eventEmitter, eventName) => {\n      this._eventSubscriptions.push(\n          this._manager.createEventObservable<google.maps.MouseEvent>(eventName, this).subscribe((value) => {\n            switch (eventName) {\n              case 'radius_changed':\n                this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\n                break;\n              case 'center_changed':\n                this._manager.getCenter(this).then(\n                    (center) =>\n                        eventEmitter.emit({lat: center.lat(), lng: center.lng()} as google.maps.LatLngLiteral));\n                break;\n              default:\n                eventEmitter.emit(value);\n            }\n          }));\n    });\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._eventSubscriptions.forEach(s => s.unsubscribe());\n    this._eventSubscriptions = null;\n    this._manager.removeCircle(this);\n  }\n\n  /**\n   * Gets the LatLngBounds of this Circle.\n   */\n  getBounds(): Promise<google.maps.LatLngBounds> { return this._manager.getBounds(this); }\n\n  getCenter(): Promise<google.maps.LatLng> { return this._manager.getCenter(this); }\n}\n","import { Directive, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataLayerManager } from './../services/managers/data-layer-manager';\n\nlet layerId = 0;\n\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\n@Directive({\n  selector: 'agm-data-layer',\n})\nexport class AgmDataLayer implements OnInit, OnDestroy, OnChanges {\n  private static _dataOptionsAttributes = ['style'];\n\n  private _addedToManager = false;\n  private _id: string = (layerId++).toString();\n  private _subscriptions: Subscription[] = [];\n\n  /**\n   * This event is fired when a feature in the layer is clicked.\n   */\n  @Output() layerClick: EventEmitter<google.maps.Data.MouseEvent> = new EventEmitter<google.maps.Data.MouseEvent>();\n\n  /**\n   * The geoJson to be displayed\n   */\n  @Input() geoJson: object | string | null = null;\n\n  /**\n   * The layer's style function.\n   */\n  @Input() style: (param: google.maps.Data.Feature) => google.maps.Data.StyleOptions;\n\n  constructor(private _manager: DataLayerManager) { }\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n    this._manager.addDataLayer(this);\n    this._addedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const listeners = [\n      { name: 'click', handler: (ev: google.maps.Data.MouseEvent) => this.layerClick.emit(ev) },\n    ];\n    listeners.forEach((obj) => {\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return `AgmDataLayer-${this._id.toString()}`; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._manager.deleteDataLayer(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  /** @internal */\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._addedToManager) {\n      return;\n    }\n\n    // tslint:disable-next-line: no-string-literal\n    const geoJsonChange = changes['geoJson'];\n    if (geoJsonChange) {\n      this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n    }\n\n    const dataOptions = AgmDataLayer._dataOptionsAttributes.reduce<google.maps.Data.DataOptions>((options, k) =>\n      options[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : (this as any)[k], {});\n\n    this._manager.setDataOptions(this, dataOptions);\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, OnInit, Self } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { FitBoundsAccessor, FitBoundsDetails, FitBoundsService } from '../services/fit-bounds';\n\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\n@Directive({\n  selector: '[agmFitBounds]',\n})\nexport class AgmFitBounds implements OnInit, OnDestroy, OnChanges {\n  /**\n   * If the value is true, the element gets added to the bounds of the map.\n   * Default: true.\n   */\n  @Input() agmFitBounds = true;\n\n  private _destroyed$: Subject<void> = new Subject<void>();\n  private _latestFitBoundsDetails: FitBoundsDetails | null = null;\n\n  constructor(\n    @Self() private readonly _fitBoundsAccessor: FitBoundsAccessor,\n    private readonly _fitBoundsService: FitBoundsService,\n  ) {}\n\n  /**\n   * @internal\n   */\n  ngOnChanges() {\n    this._updateBounds();\n  }\n\n  /**\n   * @internal\n   */\n  ngOnInit() {\n    this._fitBoundsAccessor\n      .getFitBoundsDetails$()\n      .pipe(\n        distinctUntilChanged(\n          (x: FitBoundsDetails, y: FitBoundsDetails) =>\n            x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng,\n        ),\n        takeUntil(this._destroyed$),\n      )\n      .subscribe(details => this._updateBounds(details));\n  }\n\n  /*\n   Either the location changed, or visible status changed.\n   Possible state changes are\n   invisible -> visible\n   visible -> invisible\n   visible -> visible (new location)\n  */\n  private _updateBounds(newFitBoundsDetails?: FitBoundsDetails) {\n    // either visibility will change, or location, so remove the old one anyway\n    if (this._latestFitBoundsDetails) {\n      this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n      // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n      // true -> false -> true, in which case we still need old value cached here\n    }\n\n    if (newFitBoundsDetails) {\n      this._latestFitBoundsDetails = newFitBoundsDetails;\n    }\n    if (!this._latestFitBoundsDetails) {\n      return;\n    }\n    if (this.agmFitBounds === true) {\n      this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy() {\n    this._destroyed$.next();\n    this._destroyed$.complete();\n    if (this._latestFitBoundsDetails !== null) {\n      this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n    }\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';\n\nimport { InfoWindowManager } from '../services/managers/info-window-manager';\n\nimport { AgmMarker } from './marker';\n\nlet infoWindowId = 0;\n\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'agm-info-window',\n  template: `<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `,\n})\nexport class AgmInfoWindow implements OnDestroy, OnChanges, OnInit {\n  /**\n   * The latitude position of the info window (only usefull if you use it ouside of a {@link\n   * AgmMarker}).\n   */\n  @Input() latitude: number;\n\n  /**\n   * The longitude position of the info window (only usefull if you use it ouside of a {@link\n   * AgmMarker}).\n   */\n  @Input() longitude: number;\n\n  /**\n   * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\n   * visible when it opens.\n   */\n  @Input() disableAutoPan: boolean;\n\n  /**\n   * All InfoWindows are displayed on the map in order of their zIndex, with higher values\n   * displaying in front of InfoWindows with lower values. By default, InfoWindows are displayed\n   * according to their latitude, with InfoWindows of lower latitudes appearing in front of\n   * InfoWindows at higher latitudes. InfoWindows are always displayed in front of markers.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * Maximum width of the infowindow, regardless of content's width. This value is only considered\n   * if it is set before a call to open. To change the maximum width when changing content, call\n   * close, update maxWidth, and then open.\n   */\n  @Input() maxWidth: number;\n\n  /**\n   * Holds the marker that is the host of the info window (if available)\n   */\n  hostMarker: AgmMarker;\n\n  /**\n   * Holds the native element that is used for the info window content.\n   */\n  content: Node;\n\n  /**\n   * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n   */\n  @Input() isOpen = false;\n\n  /**\n   * Emits an event when the info window is closed.\n   */\n  @Output() infoWindowClose: EventEmitter<void> = new EventEmitter<void>();\n\n  private static _infoWindowOptionsInputs: string[] = ['disableAutoPan', 'maxWidth'];\n  private _infoWindowAddedToManager = false;\n  private _id: string = (infoWindowId++).toString();\n\n  constructor(private _infoWindowManager: InfoWindowManager, private _el: ElementRef) {}\n\n  ngOnInit() {\n    this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n    this._infoWindowManager.addInfoWindow(this);\n    this._infoWindowAddedToManager = true;\n    this._updateOpenState();\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._infoWindowAddedToManager) {\n      return;\n    }\n    // tslint:disable: no-string-literal\n    if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n        typeof this.longitude === 'number') {\n      this._infoWindowManager.setPosition(this);\n    }\n    if (changes['zIndex']) {\n      this._infoWindowManager.setZIndex(this);\n    }\n    if (changes['isOpen']) {\n      this._updateOpenState();\n    }\n    this._setInfoWindowOptions(changes);\n  }\n  // tslint:enable: no-string-literal\n\n  private _registerEventListeners() {\n    this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\n      this.isOpen = false;\n      this.infoWindowClose.emit();\n    });\n  }\n\n  private _updateOpenState() {\n    this.isOpen ? this.open() : this.close();\n  }\n\n  private _setInfoWindowOptions(changes: {[key: string]: SimpleChange}) {\n    const options: {[propName: string]: any} = {};\n    const optionKeys = Object.keys(changes).filter(\n        k => AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._infoWindowManager.setOptions(this, options);\n  }\n\n  /**\n   * Opens the info window.\n   */\n  open(): Promise<void> { return this._infoWindowManager.open(this); }\n\n  /**\n   * Closes the info window.\n   */\n  close(): Promise<void> {\n    return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(); });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return 'AgmInfoWindow-' + this._id.toString(); }\n\n  /** @internal */\n  ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\n}\n","import { Directive, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { KmlLayerManager } from './../services/managers/kml-layer-manager';\n\nlet layerId = 0;\n\n@Directive({\n  selector: 'agm-kml-layer',\n})\nexport class AgmKmlLayer implements OnInit, OnDestroy, OnChanges {\n  private _addedToManager = false;\n  private _id: string = (layerId++).toString();\n  private _subscriptions: Subscription[] = [];\n  private static _kmlLayerOptions: string[] =\n      ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\n\n  /**\n   * If true, the layer receives mouse events. Default value is true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * By default, the input map is centered and zoomed to the bounding box of the contents of the\n   * layer.\n   * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n   * were never set.\n   */\n  @Input() preserveViewport = false;\n\n  /**\n   * Whether to render the screen overlays. Default true.\n   */\n  @Input() screenOverlays = true;\n\n  /**\n   * Suppress the rendering of info windows when layer features are clicked.\n   */\n  @Input() suppressInfoWindows = false;\n\n  /**\n   * The URL of the KML document to display.\n   */\n  @Input() url: string = null;\n\n  /**\n   * The z-index of the layer.\n   */\n  @Input() zIndex: number | null = null;\n\n  /**\n   * This event is fired when a feature in the layer is clicked.\n   */\n  @Output() layerClick: EventEmitter<google.maps.KmlMouseEvent> = new EventEmitter<google.maps.KmlMouseEvent>();\n\n  /**\n   * This event is fired when the KML layers default viewport has changed.\n   */\n  @Output() defaultViewportChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * This event is fired when the KML layer has finished loading.\n   * At this point it is safe to read the status property to determine if the layer loaded\n   * successfully.\n   */\n  @Output() statusChange: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(private _manager: KmlLayerManager) {}\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n    this._manager.addKmlLayer(this);\n    this._addedToManager = true;\n    this._addEventListeners();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._addedToManager) {\n      return;\n    }\n    this._updatePolygonOptions(changes);\n  }\n\n  private _updatePolygonOptions(changes: SimpleChanges) {\n    const options = Object.keys(changes)\n                        .filter(k => AgmKmlLayer._kmlLayerOptions.indexOf(k) !== -1)\n                        .reduce((obj: any, k: string) => {\n                          obj[k] = changes[k].currentValue;\n                          return obj;\n                        }, {});\n    if (Object.keys(options).length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _addEventListeners() {\n    const listeners = [\n      {name: 'click', handler: (ev: google.maps.KmlMouseEvent) => this.layerClick.emit(ev)},\n      {name: 'defaultviewport_changed', handler: () => this.defaultViewportChange.emit()},\n      {name: 'status_changed', handler: () => this.statusChange.emit()},\n    ];\n    listeners.forEach((obj) => {\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return `AgmKmlLayer-${this._id.toString()}`; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._manager.deleteKmlLayer(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { AfterContentInit, Component, ContentChildren, Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnChanges, OnDestroy, Output, PLATFORM_ID, QueryList, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { FitBoundsService } from '../services/fit-bounds';\nimport { GoogleMapsAPIWrapper } from '../services/google-maps-api-wrapper';\nimport { CircleManager } from '../services/managers/circle-manager';\nimport { InfoWindowManager } from '../services/managers/info-window-manager';\nimport { LayerManager } from '../services/managers/layer-manager';\nimport { MarkerManager } from '../services/managers/marker-manager';\nimport { PolygonManager } from '../services/managers/polygon-manager';\nimport { PolylineManager } from '../services/managers/polyline-manager';\nimport { RectangleManager } from '../services/managers/rectangle-manager';\nimport { DataLayerManager } from './../services/managers/data-layer-manager';\nimport { KmlLayerManager } from './../services/managers/kml-layer-manager';\n\nexport type ControlPosition = keyof typeof google.maps.ControlPosition;\n\n@Directive()\nexport abstract class AgmMapControl {\n  @Input() position: ControlPosition;\n  abstract getOptions(): Partial<google.maps.MapOptions>;\n}\n\n@Directive({\n  selector: 'agm-map agm-fullscreen-control',\n  providers: [{ provide: AgmMapControl, useExisting: AgmFullscreenControl }],\n})\nexport class AgmFullscreenControl extends AgmMapControl {\n  getOptions(): Partial<google.maps.MapOptions> {\n    return {\n      fullscreenControl: true,\n      fullscreenControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position],\n      },\n    };\n  }\n}\n@Directive({\n  selector: 'agm-map agm-map-type-control',\n  providers: [{ provide: AgmMapControl, useExisting: AgmMapTypeControl }],\n})\nexport class AgmMapTypeControl extends AgmMapControl {\n  @Input() mapTypeIds: (keyof typeof google.maps.MapTypeId)[];\n  @Input() style: keyof typeof google.maps.MapTypeControlStyle;\n\n  getOptions(): Partial<google.maps.MapOptions> {\n    return {\n      mapTypeControl: true,\n      mapTypeControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position],\n        style: this.style && google.maps.MapTypeControlStyle[this.style],\n        mapTypeIds: this.mapTypeIds && this.mapTypeIds.map(mapTypeId => google.maps.MapTypeId[mapTypeId]),\n      },\n    };\n  }\n}\n\n@Directive({\n  selector: 'agm-map agm-pan-control',\n  providers: [{ provide: AgmMapControl, useExisting: AgmPanControl }],\n})\nexport class AgmPanControl extends AgmMapControl {\n  getOptions(): Partial<google.maps.MapOptions> {\n    return {\n      panControl: true,\n      panControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position],\n      },\n    };\n  }\n}\n\n@Directive({\n  selector: 'agm-map agm-rotate-control',\n  providers: [{ provide: AgmMapControl, useExisting: AgmRotateControl }],\n})\nexport class AgmRotateControl extends AgmMapControl {\n  getOptions(): Partial<google.maps.MapOptions> {\n    return {\n      rotateControl: true,\n      rotateControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position],\n      },\n    };\n  }\n}\n\n@Directive({\n  selector: 'agm-map agm-scale-control',\n  providers: [{ provide: AgmMapControl, useExisting: AgmScaleControl }],\n})\nexport class AgmScaleControl extends AgmMapControl{\n  getOptions(): Partial<google.maps.MapOptions> {\n    return {\n      scaleControl: true,\n    };\n  }\n}\n\n@Directive({\n  selector: 'agm-map agm-street-view-control',\n  providers: [{ provide: AgmMapControl, useExisting: AgmStreetViewControl }],\n})\nexport class AgmStreetViewControl extends AgmMapControl {\n  getOptions(): Partial<google.maps.MapOptions> {\n    return {\n      streetViewControl: true,\n      streetViewControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position],\n      },\n    };\n  }\n}\n\n@Directive({\n  selector: 'agm-map agm-zoom-control',\n  providers: [{ provide: AgmMapControl, useExisting: AgmZoomControl }],\n})\nexport class AgmZoomControl extends AgmMapControl{\n  @Input() style: keyof typeof google.maps.ZoomControlStyle;\n  getOptions(): Partial<google.maps.MapOptions> {\n    return {\n      zoomControl: true,\n      zoomControlOptions: {\n        position: this.position && google.maps.ControlPosition[this.position],\n        style: this.style && google.maps.ZoomControlStyle[this.style],\n      },\n    };\n  }\n}\n\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'agm-map',\n  providers: [\n    CircleManager,\n    DataLayerManager,\n    DataLayerManager,\n    FitBoundsService,\n    GoogleMapsAPIWrapper,\n    InfoWindowManager,\n    KmlLayerManager,\n    LayerManager,\n    MarkerManager,\n    PolygonManager,\n    PolylineManager,\n    RectangleManager,\n  ],\n  styles: [`\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  `],\n  template: `\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n              <div class='agm-map-content'>\n                <ng-content></ng-content>\n              </div>\n  `,\n})\nexport class AgmMap implements OnChanges, AfterContentInit, OnDestroy {\n  /**\n   * The longitude that defines the center of the map.\n   */\n  @Input() longitude = 0;\n\n  /**\n   * The latitude that defines the center of the map.\n   */\n  @Input() latitude = 0;\n\n  /**\n   * The zoom level of the map. The default zoom level is 8.\n   */\n  @Input() zoom = 8;\n\n  /**\n   * The minimal zoom level of the map allowed. When not provided, no restrictions to the zoom level\n   * are enforced.\n   */\n  @Input() minZoom: number;\n\n  /**\n   * The maximal zoom level of the map allowed. When not provided, no restrictions to the zoom level\n   * are enforced.\n   */\n  @Input() maxZoom: number;\n\n  /**\n   * The control size for the default map controls. Only governs the controls made by the Maps API itself\n   */\n  @Input() controlSize: number;\n\n  /**\n   * Enables/disables if map is draggable.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('mapDraggable') draggable = true;\n\n  /**\n   * Enables/disables zoom and center on double click. Enabled by default.\n   */\n  @Input() disableDoubleClickZoom = false;\n\n  /**\n   * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n   * value cannot get updated.\n   */\n  @Input() disableDefaultUI = false;\n\n  /**\n   * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n   */\n  @Input() scrollwheel = true;\n\n  /**\n   * Color used for the background of the Map div. This color will be visible when tiles have not\n   * yet loaded as the user pans. This option can only be set when the map is initialized.\n   */\n  @Input() backgroundColor: string;\n\n  /**\n   * The name or url of the cursor to display when mousing over a draggable map. This property uses\n   * the css  * cursor attribute to change the icon. As with the css property, you must specify at\n   * least one fallback cursor that is not a URL. For example:\n   * [draggableCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n   */\n  @Input() draggableCursor: string;\n\n  /**\n   * The name or url of the cursor to display when the map is being dragged. This property uses the\n   * css cursor attribute to change the icon. As with the css property, you must specify at least\n   * one fallback cursor that is not a URL. For example:\n   * [draggingCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n   */\n  @Input() draggingCursor: string;\n\n  /**\n   * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n   * enabled by default.\n   */\n  @Input() keyboardShortcuts = true;\n\n  /**\n   * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n   * modes, these styles will only apply to labels and geometry.\n   */\n  @Input() styles: google.maps.MapTypeStyle[] = [];\n\n  /**\n   * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n   * used to\n   * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n   */\n  @Input() usePanning = false;\n\n  /**\n   * Sets the viewport to contain the given bounds.\n   * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n   */\n  @Input() fitBounds: google.maps.LatLngBoundsLiteral | google.maps.LatLngBounds | boolean = false;\n\n  /**\n   * Padding amount for the bounds.\n   */\n  @Input() fitBoundsPadding: number | google.maps.Padding;\n\n  /**\n   * The map mapTypeId. Defaults to 'roadmap'.\n   */\n  @Input() mapTypeId: keyof typeof google.maps.MapTypeId = 'ROADMAP';\n\n  /**\n   * When false, map icons are not clickable. A map icon represents a point of interest,\n   * also known as a POI. By default map icons are clickable.\n   */\n  @Input() clickableIcons = true;\n\n  /**\n   * A map icon represents a point of interest, also known as a POI.\n   * When map icons are clickable by default, an info window is displayed.\n   * When this property is set to false, the info window will not be shown but the click event\n   * will still fire\n   */\n  @Input() showDefaultInfoWindow = true;\n\n  /**\n   * This setting controls how gestures on the map are handled.\n   * Allowed values:\n   * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n   * - 'greedy'      (All touch gestures pan or zoom the map.)\n   * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n   * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n   */\n  @Input() gestureHandling: google.maps.GestureHandlingOptions = 'auto';\n\n    /**\n     * Controls the automatic switching behavior for the angle of incidence of\n     * the map. The only allowed values are 0 and 45. The value 0 causes the map\n     * to always use a 0Â° overhead view regardless of the zoom level and\n     * viewport. The value 45 causes the tilt angle to automatically switch to\n     * 45 whenever 45Â° imagery is available for the current zoom level and\n     * viewport, and switch back to 0 whenever 45Â° imagery is not available\n     * (this is the default behavior). 45Â° imagery is only available for\n     * satellite and hybrid map types, within some locations, and at some zoom\n     * levels. Note: getTilt returns the current tilt angle, not the value\n     * specified by this option. Because getTilt and this option refer to\n     * different things, do not bind() the tilt property; doing so may yield\n     * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n     */\n  @Input() tilt = 0;\n\n  /**\n   * Options for restricting the bounds of the map.\n   * User cannot pan or zoom away from restricted area.\n   */\n  @Input() restriction: google.maps.MapRestriction;\n\n  /**\n   * Map option attributes that can change over time\n   */\n  private static _mapOptionsAttributes: string[] = [\n    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\n    'keyboardShortcuts', 'styles', 'zoom', 'minZoom', 'maxZoom', 'mapTypeId', 'clickableIcons',\n    'gestureHandling', 'tilt', 'restriction',\n  ];\n\n  private _observableSubscriptions: Subscription[] = [];\n  private _fitBoundsSubscription: Subscription;\n\n  /**\n   * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n   * marker or infoWindow).\n   */\n  // tslint:disable-next-line: max-line-length\n  @Output() mapClick: EventEmitter<google.maps.MouseEvent | google.maps.IconMouseEvent> = new EventEmitter<google.maps.MouseEvent | google.maps.IconMouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n   * on a marker or infoWindow).\n   */\n  @Output() mapRightClick: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n   * on a marker or infoWindow).\n   */\n  @Output() mapDblClick: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event emitter is fired when the map center changes.\n   */\n  @Output() centerChange: EventEmitter<google.maps.LatLngLiteral> = new EventEmitter<google.maps.LatLngLiteral>();\n\n  /**\n   * This event is fired when the viewport bounds have changed.\n   */\n  @Output() boundsChange: EventEmitter<google.maps.LatLngBounds> = new EventEmitter<google.maps.LatLngBounds>();\n\n  /**\n   * This event is fired when the mapTypeId property changes.\n   */\n  @Output() mapTypeIdChange: EventEmitter<google.maps.MapTypeId> = new EventEmitter<google.maps.MapTypeId>();\n\n  /**\n   * This event is fired when the map becomes idle after panning or zooming.\n   */\n  @Output() idle: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * This event is fired when the zoom level has changed.\n   */\n  @Output() zoomChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * This event is fired when the google map is fully initialized.\n   * You get the google.maps.Map instance as a result of this EventEmitter.\n   */\n  @Output() mapReady: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * This event is fired when the visible tiles have finished loading.\n   */\n  @Output() tilesLoaded: EventEmitter<void> = new EventEmitter<void>();\n\n  @ContentChildren(AgmMapControl) mapControls: QueryList<AgmMapControl>;\n\n  constructor(\n    private _elem: ElementRef,\n    private _mapsWrapper: GoogleMapsAPIWrapper,\n    // tslint:disable-next-line: ban-types\n    @Inject(PLATFORM_ID) private _platformId: Object,\n    protected _fitBoundsService: FitBoundsService,\n    private _zone: NgZone\n  ) {}\n\n  /** @internal */\n  ngAfterContentInit() {\n    if (isPlatformServer(this._platformId)) {\n      // The code is running on the server, do nothing\n      return;\n    }\n    // todo: this should be solved with a new component and a viewChild decorator\n    const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n    this._initMapInstance(container);\n  }\n\n  private _initMapInstance(el: HTMLElement) {\n    this._mapsWrapper.createMap(el, {\n      center: {lat: this.latitude || 0, lng: this.longitude || 0},\n      zoom: this.zoom,\n      minZoom: this.minZoom,\n      maxZoom: this.maxZoom,\n      controlSize: this.controlSize,\n      disableDefaultUI: this.disableDefaultUI,\n      disableDoubleClickZoom: this.disableDoubleClickZoom,\n      scrollwheel: this.scrollwheel,\n      backgroundColor: this.backgroundColor,\n      draggable: this.draggable,\n      draggableCursor: this.draggableCursor,\n      draggingCursor: this.draggingCursor,\n      keyboardShortcuts: this.keyboardShortcuts,\n      styles: this.styles,\n      mapTypeId: this.mapTypeId.toLocaleLowerCase(),\n      clickableIcons: this.clickableIcons,\n      gestureHandling: this.gestureHandling,\n      tilt: this.tilt,\n      restriction: this.restriction,\n    })\n      .then(() => this._mapsWrapper.getNativeMap())\n      .then(map => this.mapReady.emit(map));\n\n    // register event listeners\n    this._handleMapCenterChange();\n    this._handleMapZoomChange();\n    this._handleMapMouseEvents();\n    this._handleBoundsChange();\n    this._handleMapTypeIdChange();\n    this._handleTilesLoadedEvent();\n    this._handleIdleEvent();\n    this._handleControlChange();\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    // unsubscribe all registered observable subscriptions\n    this._observableSubscriptions.forEach((s) => s.unsubscribe());\n\n    // remove all listeners from the map instance\n    this._mapsWrapper.clearInstanceListeners();\n    if (this._fitBoundsSubscription) {\n      this._fitBoundsSubscription.unsubscribe();\n    }\n  }\n\n  /* @internal */\n  ngOnChanges(changes: SimpleChanges) {\n    this._updateMapOptionsChanges(changes);\n    this._updatePosition(changes);\n  }\n\n  private _updateMapOptionsChanges(changes: SimpleChanges) {\n    const options: {[propName: string]: any} = {};\n    const optionKeys =\n      Object.keys(changes).filter(k => AgmMap._mapOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._mapsWrapper.setMapOptions(options);\n  }\n\n  /**\n   * Triggers a resize event on the google map instance.\n   * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n   * Returns a promise that gets resolved after the event was triggered.\n   */\n  triggerResize(recenter: boolean = true): Promise<void> {\n    // Note: When we would trigger the resize event and show the map in the same turn (which is a\n    // common case for triggering a resize event), then the resize event would not\n    // work (to show the map), so we trigger the event in a timeout.\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        return this._mapsWrapper.triggerMapEvent('resize').then(() => {\n          if (recenter) {\n            this.fitBounds != null ? this._fitBounds() : this._setCenter();\n          }\n          resolve();\n        });\n      });\n    });\n  }\n\n  private _updatePosition(changes: SimpleChanges) {\n    // tslint:disable: no-string-literal\n    if (changes['latitude'] == null && changes['longitude'] == null &&\n        !changes['fitBounds']) {\n      // no position update needed\n      return;\n    }\n    // tslint:enable: no-string-literal\n\n    // we prefer fitBounds in changes\n    if ('fitBounds' in changes) {\n      this._fitBounds();\n      return;\n    }\n\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n    this._setCenter();\n  }\n\n  private _setCenter() {\n    const newCenter = {\n      lat: this.latitude,\n      lng: this.longitude,\n    };\n    if (this.usePanning) {\n      this._mapsWrapper.panTo(newCenter);\n    } else {\n      this._mapsWrapper.setCenter(newCenter);\n    }\n  }\n\n  private _fitBounds() {\n    switch (this.fitBounds) {\n      case true:\n        this._subscribeToFitBoundsUpdates();\n        break;\n      case false:\n        if (this._fitBoundsSubscription) {\n          this._fitBoundsSubscription.unsubscribe();\n        }\n        break;\n      default:\n        if (this._fitBoundsSubscription) {\n          this._fitBoundsSubscription.unsubscribe();\n        }\n        this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n    }\n  }\n\n  private _subscribeToFitBoundsUpdates() {\n    this._zone.runOutsideAngular(() => {\n      this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => {\n        this._zone.run(() => this._updateBounds(b, this.fitBoundsPadding));\n      });\n    });\n  }\n\n  protected _updateBounds(bounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral, padding?: number | google.maps.Padding) {\n    if (!bounds) {\n      return;\n    }\n    if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n      const newBounds = new google.maps.LatLngBounds();\n      newBounds.union(bounds);\n      bounds = newBounds;\n    }\n    if (this.usePanning) {\n      this._mapsWrapper.panToBounds(bounds, padding);\n      return;\n    }\n    this._mapsWrapper.fitBounds(bounds, padding);\n  }\n\n  private _isLatLngBoundsLiteral(bounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral): boolean {\n    return bounds != null && (bounds as any).extend === undefined;\n  }\n\n  private _handleMapCenterChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(() => {\n      this._mapsWrapper.getCenter().then((center: google.maps.LatLng) => {\n        this.latitude = center.lat();\n        this.longitude = center.lng();\n        this.centerChange.emit({lat: this.latitude, lng: this.longitude} as google.maps.LatLngLiteral);\n      });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleBoundsChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(() => {\n      this._mapsWrapper.getBounds().then(\n        (bounds: google.maps.LatLngBounds) => { this.boundsChange.emit(bounds); });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapTypeIdChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(() => {\n      this._mapsWrapper.getMapTypeId().then(\n        (mapTypeId: google.maps.MapTypeId) => { this.mapTypeIdChange.emit(mapTypeId); });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapZoomChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(() => {\n      this._mapsWrapper.getZoom().then((z: number) => {\n        this.zoom = z;\n        this.zoomChange.emit(z);\n      });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleIdleEvent() {\n    const s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(\n      () => { this.idle.emit(void 0); });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleTilesLoadedEvent() {\n    const s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(\n      () => this.tilesLoaded.emit(void 0),\n    );\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapMouseEvents() {\n    type Event = { name: 'rightclick' | 'click' | 'dblclick', emitter: EventEmitter<google.maps.MouseEvent> };\n\n    const events: Event[] = [\n      {name: 'click', emitter: this.mapClick},\n      {name: 'rightclick', emitter: this.mapRightClick},\n      {name: 'dblclick', emitter: this.mapDblClick},\n    ];\n\n    events.forEach(e => {\n      const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(\n        ([event]) => {\n          // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n          if ( (event as google.maps.IconMouseEvent).placeId && !this.showDefaultInfoWindow) {\n            event.stop();\n          }\n          e.emitter.emit(event);\n        });\n      this._observableSubscriptions.push(s);\n    });\n  }\n\n  _handleControlChange() {\n    this._setControls();\n    this.mapControls.changes.subscribe(() => this._setControls());\n  }\n\n  _setControls() {\n    const controlOptions: Partial<google.maps.MapOptions> = {\n      fullscreenControl: !this.disableDefaultUI,\n      mapTypeControl: false,\n      panControl: false,\n      rotateControl: false,\n      scaleControl: false,\n      streetViewControl: !this.disableDefaultUI,\n      zoomControl: !this.disableDefaultUI,\n    };\n\n    this._mapsWrapper.getNativeMap().then(() => {\n      this.mapControls.forEach(control => Object.assign(controlOptions, control.getOptions()));\n      this._mapsWrapper.setMapOptions(controlOptions);\n    });\n  }\n}\n","import { AfterContentInit, ContentChildren, Directive, EventEmitter, forwardRef, Input, OnChanges, OnDestroy, Output, QueryList, SimpleChange } from '@angular/core';\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { FitBoundsAccessor, FitBoundsDetails } from '../services/fit-bounds';\nimport { MarkerManager } from '../services/managers/marker-manager';\nimport { AgmInfoWindow } from './info-window';\n\nlet markerId = 0;\n\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Directive({\n  selector: 'agm-marker',\n  providers: [\n    { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmMarker) },\n  ],\n})\nexport class AgmMarker implements OnDestroy, OnChanges, AfterContentInit, FitBoundsAccessor {\n  /**\n   * The latitude position of the marker.\n   */\n  @Input() latitude: number;\n\n  /**\n   * The longitude position of the marker.\n   */\n  @Input() longitude: number;\n\n  /**\n   * The title of the marker.\n   */\n  @Input() title: string;\n\n  /**\n   * The label (a single uppercase character) for the marker.\n   */\n  @Input() label: string | google.maps.MarkerLabel;\n\n  /**\n   * If true, the marker can be dragged. Default value is false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('markerDraggable') draggable = false;\n\n  /**\n   * Icon (the URL of the image) for the foreground.\n   */\n  @Input() iconUrl: string | google.maps.Icon | google.maps.Symbol;\n\n  /**\n   * If true, the marker is visible\n   */\n  @Input() visible = true;\n\n  /**\n   * Whether to automatically open the child info window when the marker is clicked.\n   */\n  @Input() openInfoWindow = true;\n\n  /**\n   * The marker's opacity between 0.0 and 1.0.\n   */\n  @Input() opacity = 1;\n\n  /**\n   * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n   * front of markers with lower values. By default, markers are displayed according to their\n   * vertical position on screen, with lower markers appearing in front of markers further up the\n   * screen.\n   */\n  @Input() zIndex = 1;\n\n  /**\n   * If true, the marker can be clicked. Default value is true.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('markerClickable') clickable = true;\n\n  /**\n   * Which animation to play when marker is added to a map.\n   * This can be 'BOUNCE' or 'DROP'\n   */\n  @Input() animation: keyof typeof google.maps.Animation;\n\n  /**\n   * This event is fired when the marker's animation property changes.\n   */\n  @Output() animationChange = new EventEmitter<keyof typeof google.maps.Animation>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the marker.\n   */\n  @Output() markerClick: EventEmitter<AgmMarker> = new EventEmitter<AgmMarker>();\n\n  /**\n   * This event emitter gets emitted when the user clicks twice on the marker.\n   */\n  @Output() markerDblClick: EventEmitter<AgmMarker> = new EventEmitter<AgmMarker>();\n\n  /**\n   * This event is fired when the user rightclicks on the marker.\n   */\n  @Output() markerRightClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * This event is fired when the user starts dragging the marker.\n   */\n  @Output() dragStart: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the marker.\n   */\n  // tslint:disable-next-line: no-output-native\n  @Output() drag: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the marker.\n   */\n  @Output() dragEnd: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user mouses over the marker.\n   */\n  @Output() mouseOver: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user mouses outside the marker.\n   */\n  @Output() mouseOut: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /** @internal */\n  @ContentChildren(AgmInfoWindow) infoWindow: QueryList<AgmInfoWindow> = new QueryList<AgmInfoWindow>();\n\n  private _markerAddedToManger = false;\n  private _id: string;\n  private _observableSubscriptions: Subscription[] = [];\n\n  protected readonly _fitBoundsDetails$: ReplaySubject<FitBoundsDetails> = new ReplaySubject<FitBoundsDetails>(1);\n\n  constructor(private _markerManager: MarkerManager) { this._id = (markerId++).toString(); }\n\n  /* @internal */\n  ngAfterContentInit() {\n    this.handleInfoWindowUpdate();\n    this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\n  }\n\n  private handleInfoWindowUpdate() {\n    if (this.infoWindow.length > 1) {\n      throw new Error('Expected no more than one info window.');\n    }\n    this.infoWindow.forEach(marker => {\n      marker.hostMarker = this;\n    });\n  }\n\n  /** @internal */\n  ngOnChanges(changes: { [key: string]: SimpleChange }) {\n    if (typeof this.latitude === 'string') {\n      this.latitude = Number(this.latitude);\n    }\n    if (typeof this.longitude === 'string') {\n      this.longitude = Number(this.longitude);\n    }\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n    if (!this._markerAddedToManger) {\n      this._markerManager.addMarker(this);\n      this._updateFitBoundsDetails();\n      this._markerAddedToManger = true;\n      this._addEventListeners();\n      return;\n    }\n    // tslint:disable: no-string-literal\n    if (changes['latitude'] || changes['longitude']) {\n      this._markerManager.updateMarkerPosition(this);\n      this._updateFitBoundsDetails();\n    }\n    if (changes['title']) {\n      this._markerManager.updateTitle(this);\n    }\n    if (changes['label']) {\n      this._markerManager.updateLabel(this);\n    }\n    if (changes['draggable']) {\n      this._markerManager.updateDraggable(this);\n    }\n    if (changes['iconUrl']) {\n      this._markerManager.updateIcon(this);\n    }\n    if (changes['opacity']) {\n      this._markerManager.updateOpacity(this);\n    }\n    if (changes['visible']) {\n      this._markerManager.updateVisible(this);\n    }\n    if (changes['zIndex']) {\n      this._markerManager.updateZIndex(this);\n    }\n    if (changes['clickable']) {\n      this._markerManager.updateClickable(this);\n    }\n    if (changes['animation']) {\n      this._markerManager.updateAnimation(this);\n    }\n    // tslint:enable: no-string-literal\n\n  }\n\n  /** @internal */\n  getFitBoundsDetails$(): Observable<FitBoundsDetails> {\n    return this._fitBoundsDetails$.asObservable();\n  }\n\n  protected _updateFitBoundsDetails() {\n    this._fitBoundsDetails$.next({ latLng: { lat: this.latitude, lng: this.longitude } });\n  }\n\n  private _addEventListeners() {\n    const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {\n      if (this.openInfoWindow) {\n        this.infoWindow.forEach(infoWindow => infoWindow.open());\n      }\n      this.markerClick.emit(this);\n    });\n    this._observableSubscriptions.push(cs);\n\n    const dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(() => {\n      this.markerDblClick.emit(null);\n    });\n    this._observableSubscriptions.push(dcs);\n\n    const rc = this._markerManager.createEventObservable('rightclick', this).subscribe(() => {\n      this.markerRightClick.emit(null);\n    });\n    this._observableSubscriptions.push(rc);\n\n    const ds =\n        this._markerManager.createEventObservable<google.maps.MouseEvent>('dragstart', this)\n            .subscribe(e => this.dragStart.emit(e));\n    this._observableSubscriptions.push(ds);\n\n    const d =\n        this._markerManager.createEventObservable<google.maps.MouseEvent>('drag', this)\n          .subscribe(e => this.drag.emit(e));\n    this._observableSubscriptions.push(d);\n\n    const de =\n        this._markerManager.createEventObservable<google.maps.MouseEvent>('dragend', this)\n          .subscribe(e => this.dragEnd.emit(e));\n    this._observableSubscriptions.push(de);\n\n    const mover =\n        this._markerManager.createEventObservable<google.maps.MouseEvent>('mouseover', this)\n          .subscribe(e => this.mouseOver.emit(e));\n    this._observableSubscriptions.push(mover);\n\n    const mout =\n        this._markerManager.createEventObservable<google.maps.MouseEvent>('mouseout', this)\n          .subscribe(e => this.mouseOut.emit(e));\n    this._observableSubscriptions.push(mout);\n\n    const anChng =\n      this._markerManager.createEventObservable<void>('animation_changed', this)\n        .subscribe(() => {\n          this.animationChange.emit(this.animation);\n        });\n    this._observableSubscriptions.push(anChng);\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return 'AgmMarker-' + this._id.toString(); }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._markerManager.deleteMarker(this);\n    // unsubscribe all registered observable subscriptions\n    this._observableSubscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n","import { AfterContentInit, Directive, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { PolygonManager } from '../services/managers/polygon-manager';\nimport { MVCEvent } from '../utils/mvcarray-utils';\n\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: LatLngLiteral[] = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: LatLngLiteral[][] = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\n@Directive({\n  selector: 'agm-polygon',\n})\nexport class AgmPolygon implements OnDestroy, OnChanges, AfterContentInit {\n  /**\n   * Indicates whether this Polygon handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this shape over the map. The geodesic\n   * property defines the mode of dragging. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('polyDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this shape by dragging the control\n   * points shown at the vertices and on each segment. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * The fill color. All CSS3 colors are supported except for extended\n   * named colors.\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The fill opacity between 0.0 and 1.0\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * When true, edges of the polygon are interpreted as geodesic and will\n   * follow the curvature of the Earth. When false, edges of the polygon are\n   * rendered as straight lines in screen space. Note that the shape of a\n   * geodesic polygon may appear to change when dragged, as the dimensions\n   * are maintained relative to the surface of the earth. Defaults to false.\n   */\n  @Input() geodesic = false;\n\n  /**\n   * The ordered sequence of coordinates that designates a closed loop.\n   * Unlike polylines, a polygon may consist of one or more paths.\n   *  As a result, the paths property may specify one or more arrays of\n   * LatLng coordinates. Paths are closed automatically; do not repeat the\n   * first vertex of the path as the last vertex. Simple polygons may be\n   * defined using a single array of LatLngs. More complex polygons may\n   * specify an array of arrays. Any simple arrays are converted into Arrays.\n   * Inserting or removing LatLngs from the Array will automatically update\n   * the polygon on the map.\n   */\n  @Input() paths: google.maps.LatLng[] | google.maps.LatLng[][] |\n      google.maps.MVCArray<google.maps.LatLng> | google.maps.MVCArray<google.maps.MVCArray<google.maps.LatLng>> |\n      google.maps.LatLngLiteral[] | google.maps.LatLngLiteral[][] = [];\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended\n   * named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight: number;\n\n  /**\n   * Whether this polygon is visible on the map. Defaults to true.\n   */\n  @Input() visible: boolean;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the DOM click event is fired on the Polygon.\n   */\n  @Output() polyClick: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM dblclick event is fired on the Polygon.\n   */\n  @Output() polyDblClick: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the polygon.\n   */\n  @Output() polyDrag: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the polygon.\n   */\n  @Output() polyDragEnd: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the polygon.\n   */\n  @Output() polyDragStart: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the Polygon.\n   */\n  @Output() polyMouseDown: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the Polygon.\n   */\n  @Output() polyMouseMove: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polygon mouseout.\n   */\n  @Output() polyMouseOut: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polygon mouseover.\n   */\n  @Output() polyMouseOver: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired whe the DOM mouseup event is fired on the Polygon\n   */\n  @Output() polyMouseUp: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired when the Polygon is right-clicked on.\n   */\n  @Output() polyRightClick: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired after Polygon first path changes.\n   */\n  @Output() polyPathsChange = new EventEmitter<MVCEvent<google.maps.LatLng[] | google.maps.LatLngLiteral[]>>();\n\n  private static _polygonOptionsAttributes: string[] = [\n    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\n    'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\n    'editable', 'visible',\n  ];\n\n  private _id: string;\n  private _polygonAddedToManager = false;\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _polygonManager: PolygonManager) { }\n\n  /** @internal */\n  ngAfterContentInit() {\n    if (!this._polygonAddedToManager) {\n      this._init();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): any {\n    if (!this._polygonAddedToManager) {\n      this._init();\n      return;\n    }\n\n    this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n  }\n\n  private _init() {\n    this._polygonManager.addPolygon(this);\n    this._polygonAddedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const handlers = [\n      { name: 'click', handler: (ev: google.maps.PolyMouseEvent) => this.polyClick.emit(ev) },\n      { name: 'dblclick', handler: (ev: google.maps.PolyMouseEvent) => this.polyDblClick.emit(ev) },\n      { name: 'drag', handler: (ev: google.maps.MouseEvent) => this.polyDrag.emit(ev) },\n      { name: 'dragend', handler: (ev: google.maps.MouseEvent) => this.polyDragEnd.emit(ev) },\n      { name: 'dragstart', handler: (ev: google.maps.MouseEvent) => this.polyDragStart.emit(ev) },\n      { name: 'mousedown', handler: (ev: google.maps.PolyMouseEvent) => this.polyMouseDown.emit(ev) },\n      { name: 'mousemove', handler: (ev: google.maps.PolyMouseEvent) => this.polyMouseMove.emit(ev) },\n      { name: 'mouseout', handler: (ev: google.maps.PolyMouseEvent) => this.polyMouseOut.emit(ev) },\n      { name: 'mouseover', handler: (ev: google.maps.PolyMouseEvent) => this.polyMouseOver.emit(ev) },\n      { name: 'mouseup', handler: (ev: google.maps.PolyMouseEvent) => this.polyMouseUp.emit(ev) },\n      { name: 'rightclick', handler: (ev: google.maps.PolyMouseEvent) => this.polyRightClick.emit(ev) },\n    ];\n    handlers.forEach((obj) => {\n      const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n\n    this._polygonManager.createPathEventObservable(this)\n    .then(paths$ => {\n      const os = paths$.subscribe(pathEvent => this.polyPathsChange.emit(pathEvent));\n      this._subscriptions.push(os);\n    });\n  }\n\n  private _updatePolygonOptions(changes: SimpleChanges): google.maps.PolygonOptions {\n    return Object.keys(changes)\n      .filter(k => AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1)\n      .reduce((obj: any, k: string) => {\n        obj[k] = changes[k].currentValue;\n        return obj;\n      }, {});\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._polygonManager.deletePolygon(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  getPath(): Promise<google.maps.LatLng[]> {\n    return this._polygonManager.getPath(this);\n  }\n\n  getPaths(): Promise<google.maps.LatLng[][]> {\n    return this._polygonManager.getPaths(this);\n  }\n}\n","import { Directive, Input, OnInit } from '@angular/core';\n\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n */\n@Directive({selector: 'agm-polyline agm-icon-sequence'})\nexport class AgmPolylineIcon implements OnInit{\n\n  /**\n   * If `true`, each icon in the sequence has the same fixed rotation regardless of the\n   * angle of the edge on which it lies. Defaults to `false`, in which case each icon\n   * in the sequence is rotated to align with its edge.\n   */\n  @Input() fixedRotation: boolean;\n\n  /**\n   * The distance from the start of the line at which an icon is to be rendered. This\n   * distance may be expressed as a percentage of line's length (e.g. '50%') or in pixels\n   * (e.g. '50px'). Defaults to '100%'.\n   */\n  @Input() offset: string;\n\n  /**\n   * The distance between consecutive icons on the line. This distance may be expressed as\n   * a percentage of the line's length (e.g. '50%') or in pixels (e.g. '50px'). To disable\n   * repeating of the icon, specify '0'. Defaults to '0'.\n   */\n  @Input() repeat: string;\n\n  /**\n   * The x coordinate of the position of the symbol relative to the polyline. The coordinate\n   * of the symbol's path is translated _left_ by the anchor's x coordinate. By default, a\n   * symbol is anchored at (0, 0). The position is expressed in the same coordinate system as the\n   * symbol's path.\n   */\n  @Input() anchorX: number;\n\n  /**\n   * The y coordinate of the position of the symbol relative to the polyline. The coordinate\n   * of the symbol's path is translated _up_ by the anchor's y coordinate. By default, a\n   * symbol is anchored at (0, 0). The position is expressed in the same coordinate system as the\n   * symbol's path.\n   */\n  @Input() anchorY: number;\n\n  /**\n   * The symbol's fill color. All CSS3 colors are supported except for extended named\n   * colors. Defaults to the stroke color of the corresponding polyline.\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The symbol's fill opacity. Defaults to 0.\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * The symbol's path, which is a built-in symbol path, or a custom path expressed using\n   * SVG path notation. Required.\n   */\n  @Input() path: keyof typeof google.maps.SymbolPath | string;\n\n  /**\n   * The angle by which to rotate the symbol, expressed clockwise in degrees.\n   * Defaults to 0. A symbol where `fixedRotation` is `false` is rotated relative to\n   * the angle of the edge on which it lies.\n   */\n  @Input() rotation: number;\n\n  /**\n   * The amount by which the symbol is scaled in size. Defaults to the stroke weight\n   * of the polyline; after scaling, the symbol must lie inside a square 22 pixels in\n   * size centered at the symbol's anchor.\n   */\n  @Input() scale: number;\n\n  /**\n   * The symbol's stroke color. All CSS3 colors are supported except for extended named\n   * colors. Defaults to the stroke color of the polyline.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The symbol's stroke opacity. Defaults to the stroke opacity of the polyline.\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The symbol's stroke weight. Defaults to the scale of the symbol.\n   */\n  @Input() strokeWeight: number;\n\n  ngOnInit(): void {\n    if (this.path == null) {\n      throw new Error('Icon Sequence path is required');\n    }\n  }\n}\n","import { Directive, EventEmitter, forwardRef, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { FitBoundsAccessor, FitBoundsDetails } from '../services/fit-bounds';\n\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\n@Directive({\n  selector: 'agm-polyline-point',\n  providers: [\n    {provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmPolylinePoint)},\n  ],\n})\nexport class AgmPolylinePoint implements OnChanges, FitBoundsAccessor {\n  /**\n   * The latitude position of the point.\n   */\n  @Input() public latitude: number;\n\n  /**\n   * The longitude position of the point;\n   */\n  @Input() public longitude: number;\n\n  /**\n   * This event emitter gets emitted when the position of the point changed.\n   */\n  @Output() positionChanged: EventEmitter<google.maps.LatLngLiteral> = new EventEmitter<google.maps.LatLngLiteral>();\n\n  constructor() {}\n\n  ngOnChanges(changes: SimpleChanges): any {\n    // tslint:disable: no-string-literal\n    if (changes['latitude'] || changes['longitude']) {\n      this.positionChanged.emit({\n        lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n        lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude,\n      });\n    }\n    // tslint:enable: no-string-literal\n  }\n\n  /** @internal */\n  getFitBoundsDetails$(): Observable<FitBoundsDetails> {\n    return this.positionChanged.pipe(\n      startWith({lat: this.latitude, lng: this.longitude}),\n      map(position => ({latLng: position}))\n    );\n  }\n}\n","import { AfterContentInit, ContentChildren, Directive, EventEmitter, Input, OnChanges, OnDestroy, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { PolylineManager } from '../services/managers/polyline-manager';\nimport { MVCEvent } from '../utils/mvcarray-utils';\nimport { AgmPolylineIcon } from './polyline-icon';\nimport { AgmPolylinePoint } from './polyline-point';\n\nlet polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Directive({\n  selector: 'agm-polyline',\n})\nexport class AgmPolyline implements OnDestroy, OnChanges, AfterContentInit {\n  /**\n   * Indicates whether this Polyline handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this shape over the map. The geodesic property defines the\n   * mode of dragging. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('polylineDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this shape by dragging the control points shown at the\n   * vertices and on each segment. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n   * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n   * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n   * are maintained relative to the surface of the earth. Defaults to false.\n   */\n  @Input() geodesic = false;\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0.\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight: number;\n\n  /**\n   * Whether this polyline is visible on the map. Defaults to true.\n   */\n  @Input() visible = true;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the DOM click event is fired on the Polyline.\n   */\n  @Output() lineClick: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM dblclick event is fired on the Polyline.\n   */\n  @Output() lineDblClick: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the polyline.\n   */\n  @Output() lineDrag: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the polyline.\n   */\n  @Output() lineDragEnd: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the polyline.\n   */\n  @Output() lineDragStart: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the Polyline.\n   */\n  @Output() lineMouseDown: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the Polyline.\n   */\n  @Output() lineMouseMove: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polyline mouseout.\n   */\n  @Output() lineMouseOut: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polyline mouseover.\n   */\n  @Output() lineMouseOver: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired whe the DOM mouseup event is fired on the Polyline\n   */\n  @Output() lineMouseUp: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired when the Polyline is right-clicked on.\n   */\n  @Output() lineRightClick: EventEmitter<google.maps.PolyMouseEvent> = new EventEmitter<google.maps.PolyMouseEvent>();\n\n  /**\n   * This event is fired after Polyline's path changes.\n   */\n  @Output() polyPathChange = new EventEmitter<MVCEvent<google.maps.LatLng>>();\n\n  /**\n   * @internal\n   */\n  @ContentChildren(AgmPolylinePoint) points: QueryList<AgmPolylinePoint>;\n\n  @ContentChildren(AgmPolylineIcon) iconSequences: QueryList<AgmPolylineIcon>;\n\n  private static _polylineOptionsAttributes: string[] = [\n    'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\n    'zIndex',\n  ];\n\n  private _id: string;\n  private _polylineAddedToManager = false;\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _polylineManager: PolylineManager) { this._id = (polylineId++).toString(); }\n\n  /** @internal */\n  ngAfterContentInit() {\n    if (this.points.length) {\n      this.points.forEach((point: AgmPolylinePoint) => {\n        const s = point.positionChanged.subscribe(\n            () => { this._polylineManager.updatePolylinePoints(this); });\n        this._subscriptions.push(s);\n      });\n    }\n    if (!this._polylineAddedToManager) {\n      this._init();\n    }\n    const pointSub = this.points.changes.subscribe(() => this._polylineManager.updatePolylinePoints(this));\n    this._subscriptions.push(pointSub);\n    this._polylineManager.updatePolylinePoints(this);\n\n    const iconSub = this.iconSequences.changes.subscribe(() => this._polylineManager.updateIconSequences(this));\n    this._subscriptions.push(iconSub);\n  }\n\n  ngOnChanges(changes: SimpleChanges): any {\n    if (!this._polylineAddedToManager) {\n      this._init();\n      return;\n    }\n\n    const options: {[propName: string]: any} = {};\n    const optionKeys = Object.keys(changes).filter(\n        k => AgmPolyline._polylineOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach(k => options[k] = changes[k].currentValue);\n    this._polylineManager.setPolylineOptions(this, options);\n  }\n\n  getPath(): Promise<google.maps.LatLng[]> {\n    return this._polylineManager.getPath(this);\n  }\n\n  private _init() {\n    this._polylineManager.addPolyline(this);\n    this._polylineAddedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const handlers = [\n      {name: 'click', handler: (ev: google.maps.PolyMouseEvent) => this.lineClick.emit(ev)},\n      {name: 'dblclick', handler: (ev: google.maps.PolyMouseEvent) => this.lineDblClick.emit(ev)},\n      {name: 'drag', handler: (ev: google.maps.MouseEvent) => this.lineDrag.emit(ev)},\n      {name: 'dragend', handler: (ev: google.maps.MouseEvent) => this.lineDragEnd.emit(ev)},\n      {name: 'dragstart', handler: (ev: google.maps.MouseEvent) => this.lineDragStart.emit(ev)},\n      {name: 'mousedown', handler: (ev: google.maps.PolyMouseEvent) => this.lineMouseDown.emit(ev)},\n      {name: 'mousemove', handler: (ev: google.maps.PolyMouseEvent) => this.lineMouseMove.emit(ev)},\n      {name: 'mouseout', handler: (ev: google.maps.PolyMouseEvent) => this.lineMouseOut.emit(ev)},\n      {name: 'mouseover', handler: (ev: google.maps.PolyMouseEvent) => this.lineMouseOver.emit(ev)},\n      {name: 'mouseup', handler: (ev: google.maps.PolyMouseEvent) => this.lineMouseUp.emit(ev)},\n      {name: 'rightclick', handler: (ev: google.maps.PolyMouseEvent) => this.lineRightClick.emit(ev)},\n    ];\n    handlers.forEach((obj) => {\n      const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n\n    this._polylineManager.createPathEventObservable(this).then((ob$) => {\n      const os = ob$.subscribe(pathEvent => this.polyPathChange.emit(pathEvent));\n      this._subscriptions.push(os);\n    });\n  }\n\n  /** @internal */\n  _getPoints(): AgmPolylinePoint[] {\n    if (this.points) {\n      return this.points.toArray();\n    }\n    return [];\n  }\n\n  _getIcons(): Array<AgmPolylineIcon> {\n    if (this.iconSequences) {\n      return this.iconSequences.toArray();\n    }\n    return [];\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._polylineManager.deletePolyline(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n","import {\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChange,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { RectangleManager } from '../services/managers/rectangle-manager';\n\n@Directive({\n  selector: 'agm-rectangle',\n})\nexport class AgmRectangle implements OnInit, OnChanges, OnDestroy {\n  /**\n   * The north position of the rectangle (required).\n   */\n  @Input() north: number;\n\n  /**\n   * The east position of the rectangle (required).\n   */\n  @Input() east: number;\n\n  /**\n   * The south position of the rectangle (required).\n   */\n  @Input() south: number;\n\n  /**\n   * The west position of the rectangle (required).\n   */\n  @Input() west: number;\n\n  /**\n   * Indicates whether this Rectangle handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this rectangle over the map. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('rectangleDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this rectangle by dragging the control points shown at\n   * the center and around the circumference of the rectangle. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * The fill color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The fill opacity between 0.0 and 1.0.\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke position. Defaults to CENTER.\n   * This property is not supported on Internet Explorer 8 and earlier.\n   */\n  @Input() strokePosition: keyof typeof google.maps.StrokePosition = 'CENTER';\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight = 0;\n\n  /**\n   * Whether this rectangle is visible on the map. Defaults to true.\n   */\n  @Input() visible = true;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the rectangle's is changed.\n   */\n  @Output()\n  boundsChange: EventEmitter<google.maps.LatLngBoundsLiteral> = new EventEmitter<\n    google.maps.LatLngBoundsLiteral\n  >();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the rectangle.\n   */\n  @Output()\n  rectangleClick: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the rectangle.\n   */\n  @Output()\n  rectangleDblClick: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the rectangle.\n   */\n  // tslint:disable-next-line: no-output-native\n  @Output() drag: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the rectangle.\n   */\n  @Output() dragEnd: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the rectangle.\n   */\n  @Output()\n  dragStart: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the rectangle.\n   */\n  @Output()\n  mouseDown: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the rectangle.\n   */\n  @Output()\n  mouseMove: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired on rectangle mouseout.\n   */\n  @Output() mouseOut: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired on rectangle mouseover.\n   */\n  @Output()\n  mouseOver: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mouseup event is fired on the rectangle.\n   */\n  @Output() mouseUp: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  /**\n   * This event is fired when the rectangle is right-clicked on.\n   */\n  @Output()\n  rightClick: EventEmitter<google.maps.MouseEvent> = new EventEmitter<google.maps.MouseEvent>();\n\n  private _rectangleAddedToManager = false;\n\n  private static _mapOptions: string[] = [\n    'fillColor',\n    'fillOpacity',\n    'strokeColor',\n    'strokeOpacity',\n    'strokePosition',\n    'strokeWeight',\n    'visible',\n    'zIndex',\n    'clickable',\n  ];\n\n  private _eventSubscriptions: Subscription[] = [];\n\n  constructor(private _manager: RectangleManager) {}\n\n  /** @internal */\n  ngOnInit() {\n    this._manager.addRectangle(this);\n    this._rectangleAddedToManager = true;\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: { [key: string]: SimpleChange }) {\n    if (!this._rectangleAddedToManager) {\n      return;\n    }\n    // tslint:disable: no-string-literal\n    if (\n      changes['north'] ||\n      changes['east'] ||\n      changes['south'] ||\n      changes['west']\n    ) {\n      this._manager.setBounds(this);\n    }\n    if (changes['editable']) {\n      this._manager.setEditable(this);\n    }\n    if (changes['draggable']) {\n      this._manager.setDraggable(this);\n    }\n    if (changes['visible']) {\n      this._manager.setVisible(this);\n    }\n    // tslint:enable: no-string-literal\n    this._updateRectangleOptionsChanges(changes);\n  }\n\n  private _updateRectangleOptionsChanges(changes: {\n    [propName: string]: SimpleChange;\n  }) {\n    const options: google.maps.RectangleOptions = {};\n    const optionKeys = Object.keys(changes).filter(\n      k => AgmRectangle._mapOptions.indexOf(k) !== -1,\n    );\n    optionKeys.forEach(k => {\n      options[k] = changes[k].currentValue;\n    });\n\n    if (optionKeys.length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _registerEventListeners() {\n    const events: Map<string, EventEmitter<any>> = new Map<\n      string,\n      EventEmitter<any>\n    >();\n    events.set('bounds_changed', this.boundsChange);\n    events.set('click', this.rectangleClick);\n    events.set('dblclick', this.rectangleDblClick);\n    events.set('drag', this.drag);\n    events.set('dragend', this.dragEnd);\n    events.set('dragStart', this.dragStart);\n    events.set('mousedown', this.mouseDown);\n    events.set('mousemove', this.mouseMove);\n    events.set('mouseout', this.mouseOut);\n    events.set('mouseover', this.mouseOver);\n    events.set('mouseup', this.mouseUp);\n    events.set('rightclick', this.rightClick);\n\n    events.forEach((eventEmitter, eventName) => {\n      this._eventSubscriptions.push(\n        this._manager\n          .createEventObservable<google.maps.MouseEvent>(eventName, this)\n          .subscribe(value => {\n            switch (eventName) {\n              case 'bounds_changed':\n                this._manager.getBounds(this).then(bounds =>\n                  eventEmitter.emit({\n                    north: bounds.getNorthEast().lat(),\n                    east: bounds.getNorthEast().lng(),\n                    south: bounds.getSouthWest().lat(),\n                    west: bounds.getSouthWest().lng(),\n                  } as google.maps.LatLngBoundsLiteral),\n                );\n                break;\n              default:\n                eventEmitter.emit(value);\n            }\n          }),\n      );\n    });\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._eventSubscriptions.forEach(s => s.unsubscribe());\n    this._eventSubscriptions = null;\n    this._manager.removeRectangle(this);\n  }\n\n  /**\n   * Gets the LatLngBounds of this Rectangle.\n   */\n  getBounds(): Promise<google.maps.LatLngBounds> {\n    return this._manager.getBounds(this);\n  }\n}\n","import { Directive, Input, OnDestroy, OnInit } from '@angular/core';\nimport { LayerManager } from '../services/managers/layer-manager';\n\nlet layerId = 0;\n\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\n@Directive({\n    selector: 'agm-transit-layer',\n})\nexport class AgmTransitLayer implements OnInit, OnDestroy{\n    private _addedToManager = false;\n    private _id: string = (layerId++).toString();\n\n    /**\n     * Hide/show transit layer\n     */\n    @Input() visible = true;\n\n    constructor( private _manager: LayerManager ) {}\n\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addTransitLayer(this);\n        this._addedToManager = true;\n    }\n\n    /** @internal */\n    id(): string { return this._id; }\n\n    /** @internal */\n    toString(): string { return `AgmTransitLayer-${this._id.toString()}`; }\n\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { AgmBicyclingLayer } from './directives/bicycling-layer';\nimport { AgmCircle } from './directives/circle';\nimport { AgmDataLayer } from './directives/data-layer';\nimport { AgmFitBounds } from './directives/fit-bounds';\nimport { AgmInfoWindow } from './directives/info-window';\nimport { AgmKmlLayer } from './directives/kml-layer';\nimport { AgmFullscreenControl, AgmMap, AgmMapTypeControl, AgmPanControl, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmZoomControl } from './directives/map';\nimport { AgmMarker } from './directives/marker';\nimport { AgmPolygon } from './directives/polygon';\nimport { AgmPolyline } from './directives/polyline';\nimport { AgmPolylineIcon } from './directives/polyline-icon';\nimport { AgmPolylinePoint } from './directives/polyline-point';\nimport { AgmRectangle } from './directives/rectangle';\nimport { AgmTransitLayer } from './directives/transit-layer';\n\nimport { LazyMapsAPILoader, LazyMapsAPILoaderConfigLiteral, LAZY_MAPS_API_CONFIG } from './services/maps-api-loader/lazy-maps-api-loader';\nimport { MapsAPILoader } from './services/maps-api-loader/maps-api-loader';\n\nimport { BROWSER_GLOBALS_PROVIDERS } from './utils/browser-globals';\n\n/**\n * @internal\n */\nexport function coreDirectives() {\n  return [\n    AgmBicyclingLayer,\n    AgmCircle,\n    AgmDataLayer,\n    AgmFitBounds,\n    AgmFullscreenControl,\n    AgmInfoWindow,\n    AgmKmlLayer,\n    AgmMap,\n    AgmMapTypeControl,\n    AgmMarker,\n    AgmPanControl,\n    AgmPolygon,\n    AgmPolyline,\n    AgmPolylineIcon,\n    AgmPolylinePoint,\n    AgmRectangle,\n    AgmRotateControl,\n    AgmScaleControl,\n    AgmStreetViewControl,\n    AgmTransitLayer,\n    AgmZoomControl,\n  ];\n}\n\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\n@NgModule({declarations: coreDirectives(), exports: coreDirectives()})\nexport class AgmCoreModule {\n  /**\n   * Please use this method when you register the module at the root level.\n   */\n  static forRoot(lazyMapsAPILoaderConfig?: LazyMapsAPILoaderConfigLiteral): ModuleWithProviders<AgmCoreModule> {\n    return {\n      ngModule: AgmCoreModule,\n      providers: [\n        ...BROWSER_GLOBALS_PROVIDERS, {provide: MapsAPILoader, useClass: LazyMapsAPILoader},\n        {provide: LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig},\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of core\n */\n\nexport * from './lib/services';\nexport * from './lib/directives';\nexport * from './lib/core.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AgmMapControl as Éµb} from './lib/directives/map';\nexport {FitBoundsService as Éµa} from './lib/services/fit-bounds';\nexport {BROWSER_GLOBALS_PROVIDERS as Éµe,DocumentRef as Éµd,WindowRef as Éµc} from './lib/utils/browser-globals';"]},"metadata":{},"sourceType":"module"}