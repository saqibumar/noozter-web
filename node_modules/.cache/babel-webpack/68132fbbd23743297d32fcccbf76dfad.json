{"ast":null,"code":"import _assertThisInitialized from \"/Users/saqib/Library/Mobile Documents/com~apple~CloudDocs/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"/Users/saqib/Library/Mobile Documents/com~apple~CloudDocs/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"/Users/saqib/Library/Mobile Documents/com~apple~CloudDocs/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/saqib/Library/Mobile Documents/com~apple~CloudDocs/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/saqib/Library/Mobile Documents/com~apple~CloudDocs/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/saqib/Library/Mobile Documents/com~apple~CloudDocs/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/saqib/Library/Mobile Documents/com~apple~CloudDocs/Documents/Git/noozter-web/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license Angular v4.4.7\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { ɵgetDOM } from '@angular/platform-browser';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * \\@experimental\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar BrowserXhr = /*#__PURE__*/function () {\n  function BrowserXhr() {\n    _classCallCheck(this, BrowserXhr);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(BrowserXhr, [{\n    key: \"build\",\n    value: function build() {\n      return new XMLHttpRequest();\n    }\n  }]);\n\n  return BrowserXhr;\n}();\n\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) {\n  return new (t || BrowserXhr)();\n};\n\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserXhr,\n  factory: BrowserXhr.ɵfac\n});\n/**\n * @nocollapse\n */\n\nBrowserXhr.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar RequestMethod = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\nvar ReadyState = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\nvar ResponseType = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\nvar ContentType = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\nvar ResponseContentType = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * \\@experimental\n */\n\nvar Headers = /*#__PURE__*/function () {\n  /**\n   * @param {?=} headers\n   */\n  function Headers(headers) {\n    var _this = this;\n\n    _classCallCheck(this, Headers);\n\n    /**\n     * \\@internal header names are lower case\n     */\n    this._headers = new Map();\n    /**\n     * \\@internal map lower case names to actual names\n     */\n\n    this._normalizedNames = new Map();\n\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach(function (values, name) {\n        values.forEach(function (value) {\n          return _this.append(name, value);\n        });\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach(function (name) {\n      var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n\n      _this.delete(name);\n\n      values.forEach(function (value) {\n        return _this.append(name, value);\n      });\n    });\n  }\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   * @param {?} headersString\n   * @return {?}\n   */\n\n\n  _createClass(Headers, [{\n    key: \"append\",\n\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    value: function append(name, value) {\n      var\n      /** @type {?} */\n      values = this.getAll(name);\n\n      if (values === null) {\n        this.set(name, value);\n      } else {\n        values.push(value);\n      }\n    }\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      var\n      /** @type {?} */\n      lcName = name.toLowerCase();\n\n      this._normalizedNames.delete(lcName);\n\n      this._headers.delete(lcName);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this2 = this;\n\n      this._headers.forEach(function (values, lcName) {\n        return fn(values, _this2._normalizedNames.get(lcName), _this2._headers);\n      });\n    }\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var\n      /** @type {?} */\n      values = this.getAll(name);\n\n      if (values === null) {\n        return null;\n      }\n\n      return values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this._headers.has(name.toLowerCase());\n    }\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return Array.from(this._normalizedNames.values());\n    }\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      if (Array.isArray(value)) {\n        if (value.length) {\n          this._headers.set(name.toLowerCase(), [value.join(',')]);\n        }\n      } else {\n        this._headers.set(name.toLowerCase(), [value]);\n      }\n\n      this.mayBeSetNormalizedName(name);\n    }\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      return Array.from(this._headers.values());\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _this3 = this;\n\n      var\n      /** @type {?} */\n      serialized = {};\n\n      this._headers.forEach(function (values, name) {\n        var\n        /** @type {?} */\n        split = [];\n        values.forEach(function (v) {\n          return split.push.apply(split, _toConsumableArray(v.split(',')));\n        });\n        serialized[_this3._normalizedNames.get(name)] = split;\n      });\n\n      return serialized;\n    }\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    }\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      throw new Error('\"entries\" method is not implemented on Headers class');\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"mayBeSetNormalizedName\",\n    value: function mayBeSetNormalizedName(name) {\n      var\n      /** @type {?} */\n      lcName = name.toLowerCase();\n\n      if (!this._normalizedNames.has(lcName)) {\n        this._normalizedNames.set(lcName, name);\n      }\n    }\n  }], [{\n    key: \"fromResponseHeaderString\",\n    value: function fromResponseHeaderString(headersString) {\n      var\n      /** @type {?} */\n      headers = new Headers();\n      headersString.split('\\n').forEach(function (line) {\n        var\n        /** @type {?} */\n        index = line.indexOf(':');\n\n        if (index > 0) {\n          var\n          /** @type {?} */\n          name = line.slice(0, index);\n          var\n          /** @type {?} */\n          value = line.slice(index + 1).trim();\n          headers.set(name, value);\n        }\n      });\n      return headers;\n    }\n  }]);\n\n  return Headers;\n}();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * \\@experimental\n */\n\n\nvar ResponseOptions = /*#__PURE__*/function () {\n  /**\n   * @param {?=} opts\n   */\n  function ResponseOptions() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ResponseOptions);\n\n    var body = opts.body,\n        status = opts.status,\n        headers = opts.headers,\n        statusText = opts.statusText,\n        type = opts.type,\n        url = opts.url;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '\\@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(ResponseOptions, [{\n    key: \"merge\",\n    value: function merge(options) {\n      return new ResponseOptions({\n        body: options && options.body != null ? options.body : this.body,\n        status: options && options.status != null ? options.status : this.status,\n        headers: options && options.headers != null ? options.headers : this.headers,\n        statusText: options && options.statusText != null ? options.statusText : this.statusText,\n        type: options && options.type != null ? options.type : this.type,\n        url: options && options.url != null ? options.url : this.url\n      });\n    }\n  }]);\n\n  return ResponseOptions;\n}();\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * \\@experimental\n */\n\n\nvar BaseResponseOptions = /*#__PURE__*/function (_ResponseOptions) {\n  _inherits(BaseResponseOptions, _ResponseOptions);\n\n  var _super = _createSuper(BaseResponseOptions);\n\n  function BaseResponseOptions() {\n    _classCallCheck(this, BaseResponseOptions);\n\n    return _super.call(this, {\n      status: 200,\n      statusText: 'Ok',\n      type: ResponseType.Default,\n      headers: new Headers()\n    });\n  }\n\n  return BaseResponseOptions;\n}(ResponseOptions);\n\nBaseResponseOptions.ɵfac = function BaseResponseOptions_Factory(t) {\n  return new (t || BaseResponseOptions)();\n};\n\nBaseResponseOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BaseResponseOptions,\n  factory: BaseResponseOptions.ɵfac\n});\n/**\n * @nocollapse\n */\n\nBaseResponseOptions.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BaseResponseOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * \\@experimental\n * @abstract\n */\n\n\nvar ConnectionBackend = /*#__PURE__*/function () {\n  function ConnectionBackend() {\n    _classCallCheck(this, ConnectionBackend);\n  }\n\n  _createClass(ConnectionBackend, [{\n    key: \"createConnection\",\n\n    /**\n     * @abstract\n     * @param {?} request\n     * @return {?}\n     */\n    value: function createConnection(request) {}\n  }]);\n\n  return ConnectionBackend;\n}();\n/**\n * Abstract class from which real connections are derived.\n *\n * \\@experimental\n * @abstract\n */\n\n\nvar Connection = function Connection() {\n  _classCallCheck(this, Connection);\n};\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * \\@experimental\n * @abstract\n */\n\n\nvar XSRFStrategy = /*#__PURE__*/function () {\n  function XSRFStrategy() {\n    _classCallCheck(this, XSRFStrategy);\n  }\n\n  _createClass(XSRFStrategy, [{\n    key: \"configureRequest\",\n\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    value: function configureRequest(req) {}\n  }]);\n\n  return XSRFStrategy;\n}();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @param {?} method\n * @return {?}\n */\n\n\nfunction normalizeMethodName(method) {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n\n    case 'POST':\n      return RequestMethod.Post;\n\n    case 'PUT':\n      return RequestMethod.Put;\n\n    case 'DELETE':\n      return RequestMethod.Delete;\n\n    case 'OPTIONS':\n      return RequestMethod.Options;\n\n    case 'HEAD':\n      return RequestMethod.Head;\n\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n\n  throw new Error(\"Invalid request method. The method \\\"\".concat(method, \"\\\" is not supported.\"));\n}\n\nvar isSuccess = function isSuccess(status) {\n  return status >= 200 && status < 300;\n};\n/**\n * @param {?} xhr\n * @return {?}\n */\n\n\nfunction getResponseURL(xhr) {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n/**\n * @param {?} input\n * @return {?}\n */\n\n\nfunction stringToArrayBuffer(input) {\n  var\n  /** @type {?} */\n  view = new Uint16Array(input.length);\n\n  for (var\n  /** @type {?} */\n  i = 0,\n  /** @type {?} */\n  strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n\n  return view.buffer;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\n\n\nfunction paramParser() {\n  var rawParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var\n  /** @type {?} */\n  map = new Map();\n\n  if (rawParams.length > 0) {\n    var\n    /** @type {?} */\n    params = rawParams.split('&');\n    params.forEach(function (param) {\n      var\n      /** @type {?} */\n      eqIdx = param.indexOf('=');\n\n      var _ref = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)],\n          _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          val = _ref2[1];\n\n      var\n      /** @type {?} */\n      list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n/**\n * \\@experimental\n *\n */\n\n\nvar QueryEncoder = /*#__PURE__*/function () {\n  function QueryEncoder() {\n    _classCallCheck(this, QueryEncoder);\n  }\n\n  _createClass(QueryEncoder, [{\n    key: \"encodeKey\",\n\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    value: function encodeKey(k) {\n      return standardEncoding(k);\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(v) {\n      return standardEncoding(v);\n    }\n  }]);\n\n  return QueryEncoder;\n}();\n/**\n * @param {?} v\n * @return {?}\n */\n\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\n\n\nvar URLSearchParams = /*#__PURE__*/function () {\n  /**\n   * @param {?=} rawParams\n   * @param {?=} queryEncoder\n   */\n  function URLSearchParams() {\n    var rawParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var queryEncoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new QueryEncoder();\n\n    _classCallCheck(this, URLSearchParams);\n\n    this.rawParams = rawParams;\n    this.queryEncoder = queryEncoder;\n    this.paramsMap = paramParser(rawParams);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(URLSearchParams, [{\n    key: \"clone\",\n    value: function clone() {\n      var\n      /** @type {?} */\n      clone = new URLSearchParams('', this.queryEncoder);\n      clone.appendAll(this);\n      return clone;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(param) {\n      return this.paramsMap.has(param);\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      var\n      /** @type {?} */\n      storedParam = this.paramsMap.get(param);\n      return Array.isArray(storedParam) ? storedParam[0] : null;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(param) {\n      return this.paramsMap.get(param) || [];\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(param, val) {\n      if (val === void 0 || val === null) {\n        this.delete(param);\n        return;\n      }\n\n      var\n      /** @type {?} */\n      list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(val);\n      this.paramsMap.set(param, list);\n    }\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"setAll\",\n    value: function setAll(searchParams) {\n      var _this4 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        var\n        /** @type {?} */\n        list = _this4.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(value[0]);\n\n        _this4.paramsMap.set(param, list);\n      });\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(param, val) {\n      if (val === void 0 || val === null) return;\n      var\n      /** @type {?} */\n      list = this.paramsMap.get(param) || [];\n      list.push(val);\n      this.paramsMap.set(param, list);\n    }\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"appendAll\",\n    value: function appendAll(searchParams) {\n      var _this5 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        var\n        /** @type {?} */\n        list = _this5.paramsMap.get(param) || [];\n\n        for (var\n        /** @type {?} */\n        i = 0; i < value.length; ++i) {\n          list.push(value[i]);\n        }\n\n        _this5.paramsMap.set(param, list);\n      });\n    }\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"replaceAll\",\n    value: function replaceAll(searchParams) {\n      var _this6 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        var\n        /** @type {?} */\n        list = _this6.paramsMap.get(param) || [];\n        list.length = 0;\n\n        for (var\n        /** @type {?} */\n        i = 0; i < value.length; ++i) {\n          list.push(value[i]);\n        }\n\n        _this6.paramsMap.set(param, list);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this7 = this;\n\n      var\n      /** @type {?} */\n      paramsList = [];\n      this.paramsMap.forEach(function (values, k) {\n        values.forEach(function (v) {\n          return paramsList.push(_this7.queryEncoder.encodeKey(k) + '=' + _this7.queryEncoder.encodeValue(v));\n        });\n      });\n      return paramsList.join('&');\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(param) {\n      this.paramsMap.delete(param);\n    }\n  }]);\n\n  return URLSearchParams;\n}();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\n\n\nvar Body = /*#__PURE__*/function () {\n  function Body() {\n    _classCallCheck(this, Body);\n  }\n\n  _createClass(Body, [{\n    key: \"json\",\n\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    value: function json() {\n      if (typeof this._body === 'string') {\n        return JSON.parse(\n        /** @type {?} */\n        this._body);\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        return JSON.parse(this.text());\n      }\n\n      return this._body;\n    }\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n\n  }, {\n    key: \"text\",\n    value: function text() {\n      var encodingHint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'legacy';\n\n      if (this._body instanceof URLSearchParams) {\n        return this._body.toString();\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        switch (encodingHint) {\n          case 'legacy':\n            return String.fromCharCode.apply(null, new Uint16Array(\n            /** @type {?} */\n            this._body));\n\n          case 'iso-8859':\n            return String.fromCharCode.apply(null, new Uint8Array(\n            /** @type {?} */\n            this._body));\n\n          default:\n            throw new Error(\"Invalid value for encodingHint: \".concat(encodingHint));\n        }\n      }\n\n      if (this._body == null) {\n        return '';\n      }\n\n      if (typeof this._body === 'object') {\n        return JSON.stringify(this._body, null, 2);\n      }\n\n      return this._body.toString();\n    }\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n\n  }, {\n    key: \"arrayBuffer\",\n    value: function arrayBuffer() {\n      if (this._body instanceof ArrayBuffer) {\n        return this._body;\n      }\n\n      return stringToArrayBuffer(this.text());\n    }\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n\n  }, {\n    key: \"blob\",\n    value: function blob() {\n      if (this._body instanceof Blob) {\n        return this._body;\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        return new Blob([this._body]);\n      }\n\n      throw new Error('The request body isn\\'t either a blob or an array buffer');\n    }\n  }]);\n\n  return Body;\n}();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * \\@experimental\n */\n\n\nvar Response = /*#__PURE__*/function (_Body) {\n  _inherits(Response, _Body);\n\n  var _super2 = _createSuper(Response);\n\n  /**\n   * @param {?} responseOptions\n   */\n  function Response(responseOptions) {\n    var _this8;\n\n    _classCallCheck(this, Response);\n\n    _this8 = _super2.call(this);\n    _this8._body = responseOptions.body;\n    _this8.status = responseOptions.status;\n    _this8.ok = _this8.status >= 200 && _this8.status <= 299;\n    _this8.statusText = responseOptions.statusText;\n    _this8.headers = responseOptions.headers;\n    _this8.type = responseOptions.type;\n    _this8.url = responseOptions.url;\n    return _this8;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Response, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"Response with status: \".concat(this.status, \" \").concat(this.statusText, \" for URL: \").concat(this.url);\n    }\n  }]);\n\n  return Response;\n}(Body);\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\n\nfunction _getJsonpConnections() {\n  var\n  /** @type {?} */\n  w = typeof window == 'object' ? window : {};\n\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n\n  return _jsonpConnections;\n}\n\nvar BrowserJsonp = /*#__PURE__*/function () {\n  function BrowserJsonp() {\n    _classCallCheck(this, BrowserJsonp);\n  }\n\n  _createClass(BrowserJsonp, [{\n    key: \"build\",\n\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    value: function build(url) {\n      var\n      /** @type {?} */\n      node = document.createElement('script');\n      node.src = url;\n      return node;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"nextRequestID\",\n    value: function nextRequestID() {\n      return \"__req\".concat(_nextRequestId++);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n\n  }, {\n    key: \"requestCallback\",\n    value: function requestCallback(id) {\n      return \"\".concat(JSONP_HOME, \".\").concat(id, \".finished\");\n    }\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n\n  }, {\n    key: \"exposeConnection\",\n    value: function exposeConnection(id, connection) {\n      var\n      /** @type {?} */\n      connections = _getJsonpConnections();\n\n      connections[id] = connection;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeConnection\",\n    value: function removeConnection(id) {\n      var\n      /** @type {?} */\n      connections = _getJsonpConnections();\n\n      connections[id] = null;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(node) {\n      document.body.appendChild(\n      /** @type {?} */\n      node);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup(node) {\n      if (node.parentNode) {\n        node.parentNode.removeChild(\n        /** @type {?} */\n        node);\n      }\n    }\n  }]);\n\n  return BrowserJsonp;\n}();\n\nBrowserJsonp.ɵfac = function BrowserJsonp_Factory(t) {\n  return new (t || BrowserJsonp)();\n};\n\nBrowserJsonp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserJsonp,\n  factory: BrowserJsonp.ɵfac\n});\n/**\n * @nocollapse\n */\n\nBrowserJsonp.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BrowserJsonp, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n *\n * \\@experimental\n * @abstract\n */\n\nvar JSONPConnection = /*#__PURE__*/function () {\n  function JSONPConnection() {\n    _classCallCheck(this, JSONPConnection);\n  }\n\n  _createClass(JSONPConnection, [{\n    key: \"finished\",\n\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @abstract\n     * @param {?=} data\n     * @return {?}\n     */\n    value: function finished(data) {}\n  }]);\n\n  return JSONPConnection;\n}();\n\nvar JSONPConnection_ = /*#__PURE__*/function (_JSONPConnection) {\n  _inherits(JSONPConnection_, _JSONPConnection);\n\n  var _super3 = _createSuper(JSONPConnection_);\n\n  /**\n   * @param {?} req\n   * @param {?} _dom\n   * @param {?=} baseResponseOptions\n   */\n  function JSONPConnection_(req, _dom, baseResponseOptions) {\n    var _this9;\n\n    _classCallCheck(this, JSONPConnection_);\n\n    _this9 = _super3.call(this);\n    _this9._dom = _dom;\n    _this9.baseResponseOptions = baseResponseOptions;\n    _this9._finished = false;\n\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n\n    _this9.request = req;\n    _this9.response = new Observable(function (responseObserver) {\n      _this9.readyState = ReadyState.Loading;\n\n      var id = _this9._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, _assertThisInitialized(_this9)); // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n\n\n      var callback = _dom.requestCallback(_this9._id);\n\n      var url = req.url;\n\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', \"=\".concat(callback, \"&\"));\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + \"=\".concat(callback);\n      }\n\n      var script = _this9._script = _dom.build(url);\n\n      var onLoad = function onLoad(event) {\n        if (_this9.readyState === ReadyState.Cancelled) return;\n        _this9.readyState = ReadyState.Done;\n\n        _dom.cleanup(script);\n\n        if (!_this9._finished) {\n          var _responseOptions = new ResponseOptions({\n            body: JSONP_ERR_NO_CALLBACK,\n            type: ResponseType.Error,\n            url: url\n          });\n\n          if (baseResponseOptions) {\n            _responseOptions = baseResponseOptions.merge(_responseOptions);\n          }\n\n          responseObserver.error(new Response(_responseOptions));\n          return;\n        }\n\n        var responseOptions = new ResponseOptions({\n          body: _this9._responseData,\n          url: url\n        });\n\n        if (_this9.baseResponseOptions) {\n          responseOptions = _this9.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      var onError = function onError(error) {\n        if (_this9.readyState === ReadyState.Cancelled) return;\n        _this9.readyState = ReadyState.Done;\n\n        _dom.cleanup(script);\n\n        var responseOptions = new ResponseOptions({\n          body: error.message,\n          type: ResponseType.Error\n        });\n\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return function () {\n        _this9.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n\n        _this9._dom.cleanup(script);\n      };\n    });\n    return _this9;\n  }\n  /**\n   * @param {?=} data\n   * @return {?}\n   */\n\n\n  _createClass(JSONPConnection_, [{\n    key: \"finished\",\n    value: function finished(data) {\n      // Don't leak connections\n      this._finished = true;\n\n      this._dom.removeConnection(this._id);\n\n      if (this.readyState === ReadyState.Cancelled) return;\n      this._responseData = data;\n    }\n  }]);\n\n  return JSONPConnection_;\n}(JSONPConnection);\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * \\@experimental\n * @abstract\n */\n\n\nvar JSONPBackend = /*#__PURE__*/function (_ConnectionBackend) {\n  _inherits(JSONPBackend, _ConnectionBackend);\n\n  var _super4 = _createSuper(JSONPBackend);\n\n  function JSONPBackend() {\n    _classCallCheck(this, JSONPBackend);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return JSONPBackend;\n}(ConnectionBackend);\n\nvar JSONPBackend_ = /*#__PURE__*/function (_JSONPBackend) {\n  _inherits(JSONPBackend_, _JSONPBackend);\n\n  var _super5 = _createSuper(JSONPBackend_);\n\n  /**\n   * @param {?} _browserJSONP\n   * @param {?} _baseResponseOptions\n   */\n  function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n    var _this10;\n\n    _classCallCheck(this, JSONPBackend_);\n\n    _this10 = _super5.call(this);\n    _this10._browserJSONP = _browserJSONP;\n    _this10._baseResponseOptions = _baseResponseOptions;\n    return _this10;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n\n\n  _createClass(JSONPBackend_, [{\n    key: \"createConnection\",\n    value: function createConnection(request) {\n      return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n    }\n  }]);\n\n  return JSONPBackend_;\n}(JSONPBackend);\n\nJSONPBackend_.ɵfac = function JSONPBackend__Factory(t) {\n  return new (t || JSONPBackend_)(ɵngcc0.ɵɵinject(BrowserJsonp), ɵngcc0.ɵɵinject(ResponseOptions));\n};\n\nJSONPBackend_.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: JSONPBackend_,\n  factory: JSONPBackend_.ɵfac\n});\n/**\n * @nocollapse\n */\n\nJSONPBackend_.ctorParameters = function () {\n  return [{\n    type: BrowserJsonp\n  }, {\n    type: ResponseOptions\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(JSONPBackend_, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserJsonp\n    }, {\n      type: ResponseOptions\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * \\@experimental\n */\n\nvar XHRConnection = /*#__PURE__*/function () {\n  /**\n   * @param {?} req\n   * @param {?} browserXHR\n   * @param {?=} baseResponseOptions\n   */\n  function XHRConnection(req, browserXHR, baseResponseOptions) {\n    var _this11 = this;\n\n    _classCallCheck(this, XHRConnection);\n\n    this.request = req;\n    this.response = new Observable(function (responseObserver) {\n      var _xhr = browserXHR.build();\n\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      } // load event handler\n\n\n      var onLoad = function onLoad() {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        var status = _xhr.status === 1223 ? 204 : _xhr.status;\n        var body = null; // HTTP 204 means no content\n\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = typeof _xhr.response === 'undefined' ? _xhr.responseText : _xhr.response; // Implicitly strip a potential XSSI prefix.\n\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        } // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n\n\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders()); // IE 9 does not provide the way to get URL of response\n\n        var url = getResponseURL(_xhr) || req.url;\n        var statusText = _xhr.statusText || 'OK';\n        var responseOptions = new ResponseOptions({\n          body: body,\n          status: status,\n          headers: headers,\n          statusText: statusText,\n          url: url\n        });\n\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        var response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n\n        if (response.ok) {\n          responseObserver.next(response); // TODO(gdi2290): defer complete if array buffer until done\n\n          responseObserver.complete();\n          return;\n        }\n\n        responseObserver.error(response);\n      }; // error event handler\n\n\n      var onError = function onError(err) {\n        var responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText\n        });\n\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      _this11.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n\n      req.headers.forEach(function (values, name) {\n        return _xhr.setRequestHeader(name, values.join(','));\n      }); // Select the correct buffer type to store the response\n\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(_this11.request.getBody());\n\n      return function () {\n        _xhr.removeEventListener('load', onLoad);\n\n        _xhr.removeEventListener('error', onError);\n\n        _xhr.abort();\n      };\n    });\n  }\n  /**\n   * @param {?} req\n   * @param {?} _xhr\n   * @return {?}\n   */\n\n\n  _createClass(XHRConnection, [{\n    key: \"setDetectedContentType\",\n    value: function setDetectedContentType(req\n    /** TODO Request */\n    , _xhr\n    /** XMLHttpRequest */\n    ) {\n      // Skip if a custom Content-Type header is provided\n      if (req.headers != null && req.headers.get('Content-Type') != null) {\n        return;\n      } // Set the detected content type\n\n\n      switch (req.contentType) {\n        case ContentType.NONE:\n          break;\n\n        case ContentType.JSON:\n          _xhr.setRequestHeader('content-type', 'application/json');\n\n          break;\n\n        case ContentType.FORM:\n          _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n\n          break;\n\n        case ContentType.TEXT:\n          _xhr.setRequestHeader('content-type', 'text/plain');\n\n          break;\n\n        case ContentType.BLOB:\n          var\n          /** @type {?} */\n          blob = req.blob();\n\n          if (blob.type) {\n            _xhr.setRequestHeader('content-type', blob.type);\n          }\n\n          break;\n      }\n    }\n  }]);\n\n  return XHRConnection;\n}();\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * \\@experimental\n */\n\n\nvar CookieXSRFStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?=} _cookieName\n   * @param {?=} _headerName\n   */\n  function CookieXSRFStrategy() {\n    var _cookieName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'XSRF-TOKEN';\n\n    var _headerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'X-XSRF-TOKEN';\n\n    _classCallCheck(this, CookieXSRFStrategy);\n\n    this._cookieName = _cookieName;\n    this._headerName = _headerName;\n  }\n  /**\n   * @param {?} req\n   * @return {?}\n   */\n\n\n  _createClass(CookieXSRFStrategy, [{\n    key: \"configureRequest\",\n    value: function configureRequest(req) {\n      var\n      /** @type {?} */\n      xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n\n      if (xsrfToken) {\n        req.headers.set(this._headerName, xsrfToken);\n      }\n    }\n  }]);\n\n  return CookieXSRFStrategy;\n}();\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\n\n\nvar XHRBackend = /*#__PURE__*/function () {\n  /**\n   * @param {?} _browserXHR\n   * @param {?} _baseResponseOptions\n   * @param {?} _xsrfStrategy\n   */\n  function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n    _classCallCheck(this, XHRBackend);\n\n    this._browserXHR = _browserXHR;\n    this._baseResponseOptions = _baseResponseOptions;\n    this._xsrfStrategy = _xsrfStrategy;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n\n\n  _createClass(XHRBackend, [{\n    key: \"createConnection\",\n    value: function createConnection(request) {\n      this._xsrfStrategy.configureRequest(request);\n\n      return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    }\n  }]);\n\n  return XHRBackend;\n}();\n\nXHRBackend.ɵfac = function XHRBackend_Factory(t) {\n  return new (t || XHRBackend)(ɵngcc0.ɵɵinject(BrowserXhr), ɵngcc0.ɵɵinject(ResponseOptions), ɵngcc0.ɵɵinject(XSRFStrategy));\n};\n\nXHRBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: XHRBackend,\n  factory: XHRBackend.ɵfac\n});\n/**\n * @nocollapse\n */\n\nXHRBackend.ctorParameters = function () {\n  return [{\n    type: BrowserXhr\n  }, {\n    type: ResponseOptions\n  }, {\n    type: XSRFStrategy\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(XHRBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserXhr\n    }, {\n      type: ResponseOptions\n    }, {\n      type: XSRFStrategy\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\n\n\nvar RequestOptions = /*#__PURE__*/function () {\n  _createClass(RequestOptions, [{\n    key: \"search\",\n\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @return {?}\n     */\n    get: function get() {\n      return this.params;\n    }\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @param {?} params\n     * @return {?}\n     */\n    ,\n    set: function set(params) {\n      this.params = params;\n    }\n    /**\n     * @param {?=} opts\n     */\n\n  }]);\n\n  function RequestOptions() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RequestOptions);\n\n    var method = opts.method,\n        headers = opts.headers,\n        body = opts.body,\n        url = opts.url,\n        search = opts.search,\n        params = opts.params,\n        withCredentials = opts.withCredentials,\n        responseType = opts.responseType;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(RequestOptions, [{\n    key: \"merge\",\n    value: function merge(options) {\n      return new RequestOptions({\n        method: options && options.method != null ? options.method : this.method,\n        headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n        body: options && options.body != null ? options.body : this.body,\n        url: options && options.url != null ? options.url : this.url,\n        params: options && this._mergeSearchParams(options.params || options.search),\n        withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,\n        responseType: options && options.responseType != null ? options.responseType : this.responseType\n      });\n    }\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"_mergeSearchParams\",\n    value: function _mergeSearchParams(params) {\n      if (!params) return this.params;\n\n      if (params instanceof URLSearchParams) {\n        return params.clone();\n      }\n\n      if (typeof params === 'string') {\n        return new URLSearchParams(params);\n      }\n\n      return this._parseParams(params);\n    }\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parseParams\",\n    value: function _parseParams() {\n      var _this12 = this;\n\n      var objParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var\n      /** @type {?} */\n      params = new URLSearchParams();\n      Object.keys(objParams).forEach(function (key) {\n        var\n        /** @type {?} */\n        value = objParams[key];\n\n        if (Array.isArray(value)) {\n          value.forEach(function (item) {\n            return _this12._appendParam(key, item, params);\n          });\n        } else {\n          _this12._appendParam(key, value, params);\n        }\n      });\n      return params;\n    }\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"_appendParam\",\n    value: function _appendParam(key, value, params) {\n      if (typeof value !== 'string') {\n        value = JSON.stringify(value);\n      }\n\n      params.append(key, value);\n    }\n  }]);\n\n  return RequestOptions;\n}();\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\n\n\nvar BaseRequestOptions = /*#__PURE__*/function (_RequestOptions) {\n  _inherits(BaseRequestOptions, _RequestOptions);\n\n  var _super6 = _createSuper(BaseRequestOptions);\n\n  function BaseRequestOptions() {\n    _classCallCheck(this, BaseRequestOptions);\n\n    return _super6.call(this, {\n      method: RequestMethod.Get,\n      headers: new Headers()\n    });\n  }\n\n  return BaseRequestOptions;\n}(RequestOptions);\n\nBaseRequestOptions.ɵfac = function BaseRequestOptions_Factory(t) {\n  return new (t || BaseRequestOptions)();\n};\n\nBaseRequestOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BaseRequestOptions,\n  factory: BaseRequestOptions.ɵfac\n});\n/**\n * @nocollapse\n */\n\nBaseRequestOptions.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BaseRequestOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * \\@experimental\n */\n\n\nvar Request = /*#__PURE__*/function (_Body2) {\n  _inherits(Request, _Body2);\n\n  var _super7 = _createSuper(Request);\n\n  /**\n   * @param {?} requestOptions\n   */\n  function Request(requestOptions) {\n    var _this13;\n\n    _classCallCheck(this, Request);\n\n    _this13 = _super7.call(this); // TODO: assert that url is present\n\n    var url = requestOptions.url;\n    _this13.url = requestOptions.url;\n    var paramsArg = requestOptions.params || requestOptions.search;\n\n    if (paramsArg) {\n      var params;\n\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n\n      if (params.length > 0) {\n        var prefix = '?';\n\n        if (_this13.url.indexOf('?') != -1) {\n          prefix = _this13.url[_this13.url.length - 1] == '&' ? '' : '&';\n        } // TODO: just delete search-query-looking string in url?\n\n\n        _this13.url = url + prefix + params;\n      }\n    }\n\n    _this13._body = requestOptions.body;\n    _this13.method = normalizeMethodName(requestOptions.method); // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n\n    _this13.headers = new Headers(requestOptions.headers);\n    _this13.contentType = _this13.detectContentType();\n    _this13.withCredentials = requestOptions.withCredentials;\n    _this13.responseType = requestOptions.responseType;\n    return _this13;\n  }\n  /**\n   * Returns the content type enum based on header options.\n   * @return {?}\n   */\n\n\n  _createClass(Request, [{\n    key: \"detectContentType\",\n    value: function detectContentType() {\n      switch (this.headers.get('content-type')) {\n        case 'application/json':\n          return ContentType.JSON;\n\n        case 'application/x-www-form-urlencoded':\n          return ContentType.FORM;\n\n        case 'multipart/form-data':\n          return ContentType.FORM_DATA;\n\n        case 'text/plain':\n        case 'text/html':\n          return ContentType.TEXT;\n\n        case 'application/octet-stream':\n          return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n\n        default:\n          return this.detectContentTypeFromBody();\n      }\n    }\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detectContentTypeFromBody\",\n    value: function detectContentTypeFromBody() {\n      if (this._body == null) {\n        return ContentType.NONE;\n      } else if (this._body instanceof URLSearchParams) {\n        return ContentType.FORM;\n      } else if (this._body instanceof FormData) {\n        return ContentType.FORM_DATA;\n      } else if (this._body instanceof Blob$1) {\n        return ContentType.BLOB;\n      } else if (this._body instanceof ArrayBuffer$1) {\n        return ContentType.ARRAY_BUFFER;\n      } else if (this._body && typeof this._body === 'object') {\n        return ContentType.JSON;\n      } else {\n        return ContentType.TEXT;\n      }\n    }\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBody\",\n    value: function getBody() {\n      switch (this.contentType) {\n        case ContentType.JSON:\n          return this.text();\n\n        case ContentType.FORM:\n          return this.text();\n\n        case ContentType.FORM_DATA:\n          return this._body;\n\n        case ContentType.TEXT:\n          return this.text();\n\n        case ContentType.BLOB:\n          return this.blob();\n\n        case ContentType.ARRAY_BUFFER:\n          return this.arrayBuffer();\n\n        default:\n          return null;\n      }\n    }\n  }]);\n\n  return Request;\n}(Body);\n/**\n * @param {?} params\n * @return {?}\n */\n\n\nfunction urlEncodeParams(params) {\n  var\n  /** @type {?} */\n  searchParams = new URLSearchParams();\n  Object.keys(params).forEach(function (key) {\n    var\n    /** @type {?} */\n    value = params[key];\n\n    if (value && Array.isArray(value)) {\n      value.forEach(function (element) {\n        return searchParams.append(key, element.toString());\n      });\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nvar noop = function noop() {};\n\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = w[\n/** TODO #9100 */\n'FormData'] || noop;\nvar Blob$1 = w[\n/** TODO #9100 */\n'Blob'] || noop;\nvar ArrayBuffer$1 = w[\n/** TODO #9100 */\n'ArrayBuffer'] || noop;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\n\nfunction httpRequest(backend, request) {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\n\n\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n  var\n  /** @type {?} */\n  newOptions = defaultOpts;\n\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    }));\n  }\n\n  return newOptions.merge(new RequestOptions({\n    method: method,\n    url: url\n  }));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * \\@experimental\n */\n\n\nvar Http = /*#__PURE__*/function () {\n  /**\n   * @param {?} _backend\n   * @param {?} _defaultOptions\n   */\n  function Http(_backend, _defaultOptions) {\n    _classCallCheck(this, Http);\n\n    this._backend = _backend;\n    this._defaultOptions = _defaultOptions;\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(Http, [{\n    key: \"request\",\n    value: function request(url, options) {\n      var\n      /** @type {?} */\n      responseObservable;\n\n      if (typeof url === 'string') {\n        responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get,\n        /** @type {?} */\n        url)));\n      } else if (url instanceof Request) {\n        responseObservable = httpRequest(this._backend, url);\n      } else {\n        throw new Error('First argument must be a url string or Request instance.');\n      }\n\n      return responseObservable;\n    }\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    }\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url, body, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n        body: body\n      })), options, RequestMethod.Post, url)));\n    }\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(url, body, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n        body: body\n      })), options, RequestMethod.Put, url)));\n    }\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(url, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    }\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"patch\",\n    value: function patch(url, body, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n        body: body\n      })), options, RequestMethod.Patch, url)));\n    }\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"head\",\n    value: function head(url, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    }\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"options\",\n    value: function options(url, _options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, _options, RequestMethod.Options, url)));\n    }\n  }]);\n\n  return Http;\n}();\n\nHttp.ɵfac = function Http_Factory(t) {\n  return new (t || Http)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n};\n\nHttp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Http,\n  factory: Http.ɵfac\n});\n/**\n * @nocollapse\n */\n\nHttp.ctorParameters = function () {\n  return [{\n    type: ConnectionBackend\n  }, {\n    type: RequestOptions\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Http, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ConnectionBackend\n    }, {\n      type: RequestOptions\n    }];\n  }, null);\n})();\n/**\n * \\@experimental\n */\n\n\nvar Jsonp = /*#__PURE__*/function (_Http) {\n  _inherits(Jsonp, _Http);\n\n  var _super8 = _createSuper(Jsonp);\n\n  /**\n   * @param {?} backend\n   * @param {?} defaultOptions\n   */\n  function Jsonp(backend, defaultOptions) {\n    _classCallCheck(this, Jsonp);\n\n    return _super8.call(this, backend, defaultOptions);\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   *\n   * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(Jsonp, [{\n    key: \"request\",\n    value: function request(url, options) {\n      var\n      /** @type {?} */\n      responseObservable;\n\n      if (typeof url === 'string') {\n        url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get,\n        /** @type {?} */\n        url));\n      }\n\n      if (url instanceof Request) {\n        if (url.method !== RequestMethod.Get) {\n          throw new Error('JSONP requests must use GET request method.');\n        }\n\n        responseObservable = httpRequest(this._backend, url);\n      } else {\n        throw new Error('First argument must be a url string or Request instance.');\n      }\n\n      return responseObservable;\n    }\n  }]);\n\n  return Jsonp;\n}(Http);\n\nJsonp.ɵfac = function Jsonp_Factory(t) {\n  return new (t || Jsonp)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n};\n\nJsonp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Jsonp,\n  factory: Jsonp.ɵfac\n});\n/**\n * @nocollapse\n */\n\nJsonp.ctorParameters = function () {\n  return [{\n    type: ConnectionBackend\n  }, {\n    type: RequestOptions\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Jsonp, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ConnectionBackend\n    }, {\n      type: RequestOptions\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n\n/**\n * @return {?}\n */\n\n\nfunction _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\n\n\nfunction httpFactory(xhrBackend, requestOptions) {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\n\n\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * \\@experimental\n */\n\n\nvar HttpModule = function HttpModule() {\n  _classCallCheck(this, HttpModule);\n};\n\nHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: HttpModule\n});\nHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function HttpModule_Factory(t) {\n    return new (t || HttpModule)();\n  },\n  providers: [// TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  {\n    provide: Http,\n    useFactory: httpFactory,\n    deps: [XHRBackend, RequestOptions]\n  }, BrowserXhr, {\n    provide: RequestOptions,\n    useClass: BaseRequestOptions\n  }, {\n    provide: ResponseOptions,\n    useClass: BaseResponseOptions\n  }, XHRBackend, {\n    provide: XSRFStrategy,\n    useFactory: _createDefaultCookieXSRFStrategy\n  }]\n});\n/**\n * @nocollapse\n */\n\nHttpModule.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(HttpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [// TODO(pascal): use factory type annotations once supported in DI\n      // issue: https://github.com/angular/angular/issues/3183\n      {\n        provide: Http,\n        useFactory: httpFactory,\n        deps: [XHRBackend, RequestOptions]\n      }, BrowserXhr, {\n        provide: RequestOptions,\n        useClass: BaseRequestOptions\n      }, {\n        provide: ResponseOptions,\n        useClass: BaseResponseOptions\n      }, XHRBackend, {\n        provide: XSRFStrategy,\n        useFactory: _createDefaultCookieXSRFStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * The module that includes jsonp's providers\n *\n * \\@experimental\n */\n\n\nvar JsonpModule = function JsonpModule() {\n  _classCallCheck(this, JsonpModule);\n};\n\nJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: JsonpModule\n});\nJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function JsonpModule_Factory(t) {\n    return new (t || JsonpModule)();\n  },\n  providers: [// TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  {\n    provide: Jsonp,\n    useFactory: jsonpFactory,\n    deps: [JSONPBackend, RequestOptions]\n  }, BrowserJsonp, {\n    provide: RequestOptions,\n    useClass: BaseRequestOptions\n  }, {\n    provide: ResponseOptions,\n    useClass: BaseResponseOptions\n  }, {\n    provide: JSONPBackend,\n    useClass: JSONPBackend_\n  }]\n});\n/**\n * @nocollapse\n */\n\nJsonpModule.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(JsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [// TODO(pascal): use factory type annotations once supported in DI\n      // issue: https://github.com/angular/angular/issues/3183\n      {\n        provide: Jsonp,\n        useFactory: jsonpFactory,\n        deps: [JSONPBackend, RequestOptions]\n      }, BrowserJsonp, {\n        provide: RequestOptions,\n        useClass: BaseRequestOptions\n      }, {\n        provide: ResponseOptions,\n        useClass: BaseResponseOptions\n      }, {\n        provide: JSONPBackend,\n        useClass: JSONPBackend_\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\n/**\n * \\@stable\n */\n\n\nvar VERSION = new Version('4.4.7');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION, BrowserJsonp as ɵg, JSONPBackend_ as ɵa, Body as ɵf, _createDefaultCookieXSRFStrategy as ɵb, httpFactory as ɵc, jsonpFactory as ɵd };","map":{"version":3,"sources":["../../../../packages/http/src/backends/browser_xhr.ts","../../../../packages/http/src/enums.ts","../../../../packages/http/src/headers.ts","../../../../packages/http/src/base_response_options.ts","../../../../packages/http/src/interfaces.ts","../../../../packages/http/src/http_utils.ts","../../../../packages/http/src/url_search_params.ts","../../../../packages/http/src/body.ts","../../../../packages/http/src/static_response.ts","../../../../packages/http/src/backends/browser_jsonp.ts","../../../../packages/http/src/backends/jsonp_backend.ts","../../../../packages/http/src/backends/xhr_backend.ts","../../../../packages/http/src/base_request_options.ts","../../../../packages/http/src/static_request.ts","../../../../packages/http/src/http.ts","../../../../packages/http/src/http_module.ts","../../../../packages/http/src/version.ts","../../../../packages/http/src/index.ts","../../../../packages/http/public_api.ts","../../../../packages/http/index.ts"],"names":["Blob","ArrayBuffer"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n * \n * Take care not to evaluate this in non-browser contexts.\n * \n * \\@experimental\n */\nexport class BrowserXhr {\nconstructor() {}\n/**\n * @return {?}\n */\nbuild(): any { return /** @type {?} */(( <any>(new XMLHttpRequest()))); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserXhr.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type RequestMethod = number;\nexport let RequestMethod: any = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n\nexport type ReadyState = number;\nexport let ReadyState: any = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n\nexport type ResponseType = number;\nexport let ResponseType: any = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n\nexport type ContentType = number;\nexport let ContentType: any = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n\nexport type ResponseContentType = number;\nexport let ResponseContentType: any = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n","\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n * \n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n * \n * ### Example\n * \n * ```\n * import {Headers} from '\\@angular/http';\n * \n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n * \n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n * \n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n * \n * \\@experimental\n */\nexport class Headers {\n/**\n * \\@internal header names are lower case\n */\n_headers: Map<string, string[]> = new Map();\n/**\n * \\@internal map lower case names to actual names\n */\n_normalizedNames: Map<string, string> = new Map();\n/**\n * @param {?=} headers\n */\nconstructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n/**\n * Returns a new Headers instance from the given DOMString of Response Headers\n * @param {?} headersString\n * @return {?}\n */\nstatic fromResponseHeaderString(headersString: string): Headers {\n    const /** @type {?} */ headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const /** @type {?} */ index = line.indexOf(':');\n      if (index > 0) {\n        const /** @type {?} */ name = line.slice(0, index);\n        const /** @type {?} */ value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n/**\n * Appends a header to existing list of header values for a given header name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nappend(name: string, value: string): void {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n/**\n * Deletes all header values for the given name.\n * @param {?} name\n * @return {?}\n */\ndelete (name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n/**\n * Returns first header that matches given name.\n * @param {?} name\n * @return {?}\n */\nget(name: string): string|null {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n/**\n * Checks for existence of header by given name.\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n/**\n * Returns the names of the headers\n * @return {?}\n */\nkeys(): string[] { return Array.from(this._normalizedNames.values()); }\n/**\n * Sets or overrides header value for given name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nset(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n/**\n * Returns values of all headers.\n * @return {?}\n */\nvalues(): string[][] { return Array.from(this._headers.values()); }\n/**\n * @return {?}\n */\ntoJSON(): {[name: string]: any} {\n    const /** @type {?} */ serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const /** @type {?} */ split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[ /** @type {?} */((this._normalizedNames.get(name)))] = split;\n    });\n\n    return serialized;\n  }\n/**\n * Returns list of header values for a given name.\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n/**\n * This method is not implemented.\n * @return {?}\n */\nentries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate mayBeSetNormalizedName(name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\nfunction Headers_tsickle_Closure_declarations() {\n/**\n * \\@internal header names are lower case\n * @type {?}\n */\nHeaders.prototype._headers;\n/**\n * \\@internal map lower case names to actual names\n * @type {?}\n */\nHeaders.prototype._normalizedNames;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n * \n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n * \n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n * \n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n * \n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n * \n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n * \n * \\@experimental\n */\nexport class ResponseOptions {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n */\nbody: string|Object|ArrayBuffer|Blob|null;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n */\nstatus: number|null;\n/**\n * Response {\\@link Headers headers}\n */\nheaders: Headers|null;\n/**\n * \\@internal\n */\nstatusText: string|null;\n/**\n * \\@internal\n */\ntype: ResponseType|null;\n  url: string|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: ResponseOptionsArgs = {}) {\n    const {body, status, headers, statusText, type, url} = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n/**\n * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n * override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * This may be useful when sharing a base `ResponseOptions` object inside tests,\n * where certain properties may change from test to test.\n * \n * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: {name: 'Jeff'}\n * });\n * var res = new Response(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('options.url:', options.url); // null\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * console.log('res.url:', res.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\nfunction ResponseOptions_tsickle_Closure_declarations() {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n * @type {?}\n */\nResponseOptions.prototype.body;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n * @type {?}\n */\nResponseOptions.prototype.status;\n/**\n * Response {\\@link Headers headers}\n * @type {?}\n */\nResponseOptions.prototype.headers;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.statusText;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.type;\n/** @type {?} */\nResponseOptions.prototype.url;\n}\n\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n * \n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n * \n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n * \n * \\@experimental\n */\nexport class BaseResponseOptions extends ResponseOptions {\nconstructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseResponseOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseResponseOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseResponseOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Abstract class from which real backends are derived.\n * \n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class ConnectionBackend {\n/**\n * @abstract\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: any) {} }\n/**\n * Abstract class from which real connections are derived.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class Connection {\n  readyState: ReadyState;\n  request: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\nfunction Connection_tsickle_Closure_declarations() {\n/** @type {?} */\nConnection.prototype.readyState;\n/** @type {?} */\nConnection.prototype.request;\n/** @type {?} */\nConnection.prototype.response;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class XSRFStrategy {\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request) {} }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface RequestOptionsArgs {\n  url?: string|null;\n  method?: string|RequestMethod|null;\n  /** @deprecated from 4.0.0. Use params instead. */\n  search?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  params?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  headers?: Headers|null;\n  body?: any;\n  withCredentials?: boolean|null;\n  responseType?: ResponseContentType|null;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string|null; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface ResponseOptionsArgs {\n  body?: string|Object|FormData|ArrayBuffer|Blob|null;\n  status?: number|null;\n  statusText?: string|null;\n  headers?: Headers|null;\n  type?: ResponseType|null;\n  url?: string|null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RequestMethod} from './enums';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint8Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint16Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * \\@experimental \n * \n */\nexport class QueryEncoder {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n * \n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n * \n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n * \n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n * \n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n * \n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n * \n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n/**\n * @param {?=} rawParams\n * @param {?=} queryEncoder\n */\nconstructor(\npublic rawParams: string = '',\nprivate queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n/**\n * @return {?}\n */\nclone(): URLSearchParams {\n    const /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean { return this.paramsMap.has(param); }\n/**\n * @param {?} param\n * @return {?}\n */\nget(param: string): string|null {\n    const /** @type {?} */ storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nset(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nsetAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nappend(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nappendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nreplaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ndelete (param: string): void { this.paramsMap.delete(param); }\n}\n\nfunction URLSearchParams_tsickle_Closure_declarations() {\n/** @type {?} */\nURLSearchParams.prototype.paramsMap;\n/** @type {?} */\nURLSearchParams.prototype.rawParams;\n/** @type {?} */\nURLSearchParams.prototype.queryEncoder;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nexport abstract class Body {\n/**\n * \\@internal\n */\nprotected _body: any;\n/**\n * Attempts to return body as parsed `JSON` object, or raises an exception.\n * @return {?}\n */\njson(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse( /** @type {?} */((<string>this._body)));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n/**\n * Returns the body as a string, presuming `toString()` can be called on the response body.\n * \n * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n * bytes in the buffer will be interpreted. Valid values are:\n * \n * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n *   into consideration. This is the default behavior to avoid breaking apps, but should be\n *   considered deprecated.\n * \n * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n * @param {?=} encodingHint\n * @return {?}\n */\ntext(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array( /** @type {?} */((this._body as ArrayBuffer))));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array( /** @type {?} */((this._body as ArrayBuffer))));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n/**\n * Return the body as an ArrayBuffer\n * @return {?}\n */\narrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return /** @type {?} */(( <ArrayBuffer>this._body));\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n/**\n * Returns the request's body as a Blob, assuming that body exists.\n * @return {?}\n */\nblob(): Blob {\n    if (this._body instanceof Blob) {\n      return /** @type {?} */(( <Blob>this._body));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\nfunction Body_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nBody.prototype._body;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n/**\n * Creates `Response` instances from provided values.\n * \n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n * \n * ### Example\n * \n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n * \n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n * \n * \\@experimental\n */\nexport class Response extends Body {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n */\ntype: ResponseType;\n/**\n * True if the response's status is within 200-299\n */\nok: boolean;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n */\nurl: string;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n */\nstatus: number;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n */\nstatusText: string|null;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n */\nbytesLoaded: number;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n */\ntotalBytes: number;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n */\nheaders: Headers|null;\n/**\n * @param {?} responseOptions\n */\nconstructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status !;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type !;\n    this.url = responseOptions.url !;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\nfunction Response_tsickle_Closure_declarations() {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n * @type {?}\n */\nResponse.prototype.type;\n/**\n * True if the response's status is within 200-299\n * @type {?}\n */\nResponse.prototype.ok;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n * @type {?}\n */\nResponse.prototype.url;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n * @type {?}\n */\nResponse.prototype.status;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n * @type {?}\n */\nResponse.prototype.statusText;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n * @type {?}\n */\nResponse.prototype.bytesLoaded;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n * @type {?}\n */\nResponse.prototype.totalBytes;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n * @type {?}\n */\nResponse.prototype.headers;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nlet /** @type {?} */ _nextRequestId = 0;\nexport const /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\nlet /** @type {?} */ _jsonpConnections: {[key: string]: any}|null = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const /** @type {?} */ w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\nexport class BrowserJsonp {\n/**\n * @param {?} url\n * @return {?}\n */\nbuild(url: string): any {\n    const /** @type {?} */ node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n/**\n * @return {?}\n */\nnextRequestID(): string { return `__req${_nextRequestId++}`; }\n/**\n * @param {?} id\n * @return {?}\n */\nrequestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n/**\n * @param {?} id\n * @param {?} connection\n * @return {?}\n */\nexposeConnection(id: string, connection: any) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nremoveConnection(id: string) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nsend(node: any) { document.body.appendChild( /** @type {?} */((<Node>(node)))); }\n/**\n * @param {?} node\n * @return {?}\n */\ncleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */((<Node>(node))));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserJsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPConnection implements Connection {\n/**\n * The {\\@link ReadyState} of this request.\n */\nreadyState: ReadyState;\n/**\n * The outgoing HTTP request.\n */\nrequest: Request;\n/**\n * An observable that completes with the response, when the request is finished.\n */\nresponse: Observable<Response>;\n/**\n * Callback called when the JSONP request completes, to notify the application\n * of the new data.\n * @abstract\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {}\n}\n\nfunction JSONPConnection_tsickle_Closure_declarations() {\n/**\n * The {\\@link ReadyState} of this request.\n * @type {?}\n */\nJSONPConnection.prototype.readyState;\n/**\n * The outgoing HTTP request.\n * @type {?}\n */\nJSONPConnection.prototype.request;\n/**\n * An observable that completes with the response, when the request is finished.\n * @type {?}\n */\nJSONPConnection.prototype.response;\n}\n\nexport class JSONPConnection_ extends JSONPConnection {\nprivate _id: string;\nprivate _script: Element;\nprivate _responseData: any;\nprivate _finished: boolean = false;\n/**\n * @param {?} req\n * @param {?} _dom\n * @param {?=} baseResponseOptions\n */\nconstructor(\n      req: Request,\nprivate _dom: BrowserJsonp,\nprivate baseResponseOptions?: ResponseOptions) {\n    super();\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n/**\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\nfunction JSONPConnection__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPConnection_.prototype._id;\n/** @type {?} */\nJSONPConnection_.prototype._script;\n/** @type {?} */\nJSONPConnection_.prototype._responseData;\n/** @type {?} */\nJSONPConnection_.prototype._finished;\n/** @type {?} */\nJSONPConnection_.prototype._dom;\n/** @type {?} */\nJSONPConnection_.prototype.baseResponseOptions;\n}\n\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPBackend extends ConnectionBackend {}\nexport class JSONPBackend_ extends JSONPBackend {\n/**\n * @param {?} _browserJSONP\n * @param {?} _baseResponseOptions\n */\nconstructor(private _browserJSONP: BrowserJsonp,\nprivate _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): JSONPConnection {\n    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserJsonp, },\n{type: ResponseOptions, },\n];\n}\n\nfunction JSONPBackend__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPBackend_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSONPBackend_.ctorParameters;\n/** @type {?} */\nJSONPBackend_.prototype._browserJSONP;\n/** @type {?} */\nJSONPBackend_.prototype._baseResponseOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ɵgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * \\@experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n */\nresponse: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name !, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * \\@experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class RequestOptions {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n */\nmethod: RequestMethod|string|null;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n */\nheaders: Headers|null;\n/**\n * Body to be used when creating a {\\@link Request}.\n */\nbody: any;\n/**\n * Url with which to perform a {\\@link Request}.\n */\nurl: string|null;\n/**\n * Search parameters to be included in a {\\@link Request}.\n */\nparams: URLSearchParams;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @return {?}\n */\nget search(): URLSearchParams { return this.params; }\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @param {?} params\n * @return {?}\n */\nset search(params: URLSearchParams) { this.params = params; }\n/**\n * Enable use credentials for a {\\@link Request}.\n */\nwithCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * const req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n/**\n * @param {?=} params\n * @return {?}\n */\nprivate _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n/**\n * @param {?=} objParams\n * @return {?}\n */\nprivate _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const /** @type {?} */ params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const /** @type {?} */ value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} params\n * @return {?}\n */\nprivate _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.params;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates `Request` instances from provided values.\n * \n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n * \n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n * \n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n * \n * \\@Injectable() \n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n * \n * \\@experimental\n */\nexport class Request extends Body {\n/**\n * Http method with which to perform the request.\n */\nmethod: RequestMethod;\n/**\n * {\\@link Headers} instance\n */\nheaders: Headers;\n/**\n * Url of the remote resource\n */\nurl: string;\n/**\n * Type of the request body *\n */\nprivate contentType: ContentType;\n/**\n * Enable use credentials\n */\nwithCredentials: boolean;\n/**\n * Buffer to store the response\n */\nresponseType: ResponseContentType;\n/**\n * @param {?} requestOptions\n */\nconstructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url !;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method !);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials !;\n    this.responseType = requestOptions.responseType !;\n  }\n/**\n * Returns the content type enum based on header options.\n * @return {?}\n */\ndetectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n/**\n * Returns the content type of request's body based on its type.\n * @return {?}\n */\ndetectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n/**\n * Returns the request's body according to its type. If body is undefined, return\n * null.\n * @return {?}\n */\ngetBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction Request_tsickle_Closure_declarations() {\n/**\n * Http method with which to perform the request.\n * @type {?}\n */\nRequest.prototype.method;\n/**\n * {\\@link Headers} instance\n * @type {?}\n */\nRequest.prototype.headers;\n/**\n * Url of the remote resource\n * @type {?}\n */\nRequest.prototype.url;\n/**\n * Type of the request body *\n * @type {?}\n */\nRequest.prototype.contentType;\n/**\n * Enable use credentials\n * @type {?}\n */\nRequest.prototype.withCredentials;\n/**\n * Buffer to store the response\n * @type {?}\n */\nRequest.prototype.responseType;\n}\n\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const /** @type {?} */ searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const /** @type {?} */ value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst /** @type {?} */ noop = function() {};\nconst /** @type {?} */ w = typeof window == 'object' ? window : noop;\nconst /** @type {?} */ FormData = ( /** @type {?} */((w as any)) /** TODO #9100 */)['FormData'] || noop;\nconst /** @type {?} */ Blob = ( /** @type {?} */((w as any)) /** TODO #9100 */)['Blob'] || noop;\nexport const /** @type {?} */ ArrayBuffer: ArrayBufferConstructor =\n    ( /** @type {?} */((w as any)) /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const /** @type {?} */ newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return /** @type {?} */(( newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs));\n  }\n\n  return /** @type {?} */(( newOptions.merge(new RequestOptions({method, url})) as RequestArgs));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n * \n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n * \n * ### Example\n * \n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({ \n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n * \n * \n * ### Example\n * \n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n * \n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n * \n * ### Example\n * \n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n * \n * \\@experimental\n */\nexport class Http {\n/**\n * @param {?} _backend\n * @param {?} _defaultOptions\n */\nconstructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url)))));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n/**\n * Performs a request with `get` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n/**\n * Performs a request with `post` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n/**\n * Performs a request with `put` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n/**\n * Performs a request with `delete` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n/**\n * Performs a request with `patch` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n/**\n * Performs a request with `head` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n/**\n * Performs a request with `options` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Http_tsickle_Closure_declarations() {\n/** @type {?} */\nHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttp.ctorParameters;\n/** @type {?} */\nHttp.prototype._backend;\n/** @type {?} */\nHttp.prototype._defaultOptions;\n}\n\n/**\n * \\@experimental\n */\nexport class Jsonp extends Http {\n/**\n * @param {?} backend\n * @param {?} defaultOptions\n */\nconstructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * \n * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n * supported by all current browsers. Because JSONP creates a `<script>` element with\n * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n * source could expose your application to XSS risks. Data exposed by JSONP may also be\n * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n * future security issues (e.g. content sniffing).  For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url))));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Jsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend, JSONPBackend_} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n/**\n * @return {?}\n */\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n * \n * \\@experimental\n */\nexport class HttpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpModule.ctorParameters;\n}\n\n/**\n * The module that includes jsonp's providers\n * \n * \\@experimental\n */\nexport class JsonpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    {provide: JSONPBackend, useClass: JSONPBackend_},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JsonpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonpModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * \\@stable\n */\nexport const VERSION = new Version('4.4.7');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {BrowserXhr} from './backends/browser_xhr';\nexport {JSONPBackend, JSONPConnection} from './backends/jsonp_backend';\nexport {CookieXSRFStrategy, XHRBackend, XHRConnection} from './backends/xhr_backend';\nexport {BaseRequestOptions, RequestOptions} from './base_request_options';\nexport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nexport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nexport {Headers} from './headers';\nexport {Http, Jsonp} from './http';\nexport {HttpModule, JsonpModule} from './http_module';\nexport {Connection, ConnectionBackend, RequestOptionsArgs, ResponseOptionsArgs, XSRFStrategy} from './interfaces';\nexport {Request} from './static_request';\nexport {Response} from './static_response';\nexport {QueryEncoder, URLSearchParams} from './url_search_params';\nexport {VERSION} from './version';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\nexport {BrowserXhr,JSONPBackend,JSONPConnection,CookieXSRFStrategy,XHRBackend,XHRConnection,BaseRequestOptions,RequestOptions,BaseResponseOptions,ResponseOptions,ReadyState,RequestMethod,ResponseContentType,ResponseType,Headers,Http,Jsonp,HttpModule,JsonpModule,Connection,ConnectionBackend,RequestOptionsArgs,ResponseOptionsArgs,XSRFStrategy,Request,Response,QueryEncoder,URLSearchParams,VERSION} from './src/index';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {BrowserXhr,JSONPBackend,JSONPConnection,CookieXSRFStrategy,XHRBackend,XHRConnection,BaseRequestOptions,RequestOptions,BaseResponseOptions,ResponseOptions,ReadyState,RequestMethod,ResponseContentType,ResponseType,Headers,Http,Jsonp,HttpModule,JsonpModule,Connection,ConnectionBackend,RequestOptionsArgs,ResponseOptionsArgs,XSRFStrategy,Request,Response,QueryEncoder,URLSearchParams,VERSION} from './public_api';\n\nexport {BrowserJsonp as ɵg} from './src/backends/browser_jsonp';\nexport {JSONPBackend_ as ɵa} from './src/backends/jsonp_backend';\nexport {Body as ɵf} from './src/body';\nexport {_createDefaultCookieXSRFStrategy as ɵb,httpFactory as ɵc,jsonpFactory as ɵd} from './src/http_module';\nexport {RequestArgs as ɵe} from './src/interfaces';"]},"metadata":{},"sourceType":"module"}