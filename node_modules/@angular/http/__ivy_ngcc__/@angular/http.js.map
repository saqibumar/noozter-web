{"version":3,"file":"http.js","sources":["../../../../packages/http/src/backends/browser_xhr.ts","../../../../packages/http/src/enums.ts","../../../../packages/http/src/headers.ts","../../../../packages/http/src/base_response_options.ts","../../../../packages/http/src/interfaces.ts","../../../../packages/http/src/http_utils.ts","../../../../packages/http/src/url_search_params.ts","../../../../packages/http/src/body.ts","../../../../packages/http/src/static_response.ts","../../../../packages/http/src/backends/browser_jsonp.ts","../../../../packages/http/src/backends/jsonp_backend.ts","../../../../packages/http/src/backends/xhr_backend.ts","../../../../packages/http/src/base_request_options.ts","../../../../packages/http/src/static_request.ts","../../../../packages/http/src/http.ts","../../../../packages/http/src/http_module.ts","../../../../packages/http/src/version.ts","../../../../packages/http/src/index.ts","../../../../packages/http/public_api.ts","../../../../packages/http/index.ts"],"names":["getDOM","ArrayBuffer","Blob"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n * \n * Take care not to evaluate this in non-browser contexts.\n * \n * \\@experimental\n */\nexport class BrowserXhr {\nconstructor() {}\n/**\n * @return {?}\n */\nbuild(): any { return /** @type {?} */(( <any>(new XMLHttpRequest()))); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserXhr.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type RequestMethod = number;\nexport let RequestMethod: any = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n\nexport type ReadyState = number;\nexport let ReadyState: any = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n\nexport type ResponseType = number;\nexport let ResponseType: any = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n\nexport type ContentType = number;\nexport let ContentType: any = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n\nexport type ResponseContentType = number;\nexport let ResponseContentType: any = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n","\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n * \n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n * \n * ### Example\n * \n * ```\n * import {Headers} from '\\@angular/http';\n * \n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n * \n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n * \n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n * \n * \\@experimental\n */\nexport class Headers {\n/**\n * \\@internal header names are lower case\n */\n_headers: Map<string, string[]> = new Map();\n/**\n * \\@internal map lower case names to actual names\n */\n_normalizedNames: Map<string, string> = new Map();\n/**\n * @param {?=} headers\n */\nconstructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n/**\n * Returns a new Headers instance from the given DOMString of Response Headers\n * @param {?} headersString\n * @return {?}\n */\nstatic fromResponseHeaderString(headersString: string): Headers {\n    const /** @type {?} */ headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const /** @type {?} */ index = line.indexOf(':');\n      if (index > 0) {\n        const /** @type {?} */ name = line.slice(0, index);\n        const /** @type {?} */ value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n/**\n * Appends a header to existing list of header values for a given header name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nappend(name: string, value: string): void {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n/**\n * Deletes all header values for the given name.\n * @param {?} name\n * @return {?}\n */\ndelete (name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n/**\n * Returns first header that matches given name.\n * @param {?} name\n * @return {?}\n */\nget(name: string): string|null {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n/**\n * Checks for existence of header by given name.\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n/**\n * Returns the names of the headers\n * @return {?}\n */\nkeys(): string[] { return Array.from(this._normalizedNames.values()); }\n/**\n * Sets or overrides header value for given name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nset(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n/**\n * Returns values of all headers.\n * @return {?}\n */\nvalues(): string[][] { return Array.from(this._headers.values()); }\n/**\n * @return {?}\n */\ntoJSON(): {[name: string]: any} {\n    const /** @type {?} */ serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const /** @type {?} */ split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[ /** @type {?} */((this._normalizedNames.get(name)))] = split;\n    });\n\n    return serialized;\n  }\n/**\n * Returns list of header values for a given name.\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n/**\n * This method is not implemented.\n * @return {?}\n */\nentries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate mayBeSetNormalizedName(name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\nfunction Headers_tsickle_Closure_declarations() {\n/**\n * \\@internal header names are lower case\n * @type {?}\n */\nHeaders.prototype._headers;\n/**\n * \\@internal map lower case names to actual names\n * @type {?}\n */\nHeaders.prototype._normalizedNames;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n * \n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n * \n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n * \n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n * \n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n * \n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n * \n * \\@experimental\n */\nexport class ResponseOptions {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n */\nbody: string|Object|ArrayBuffer|Blob|null;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n */\nstatus: number|null;\n/**\n * Response {\\@link Headers headers}\n */\nheaders: Headers|null;\n/**\n * \\@internal\n */\nstatusText: string|null;\n/**\n * \\@internal\n */\ntype: ResponseType|null;\n  url: string|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: ResponseOptionsArgs = {}) {\n    const {body, status, headers, statusText, type, url} = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n/**\n * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n * override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * This may be useful when sharing a base `ResponseOptions` object inside tests,\n * where certain properties may change from test to test.\n * \n * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: {name: 'Jeff'}\n * });\n * var res = new Response(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('options.url:', options.url); // null\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * console.log('res.url:', res.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\nfunction ResponseOptions_tsickle_Closure_declarations() {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n * @type {?}\n */\nResponseOptions.prototype.body;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n * @type {?}\n */\nResponseOptions.prototype.status;\n/**\n * Response {\\@link Headers headers}\n * @type {?}\n */\nResponseOptions.prototype.headers;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.statusText;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.type;\n/** @type {?} */\nResponseOptions.prototype.url;\n}\n\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n * \n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n * \n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n * \n * \\@experimental\n */\nexport class BaseResponseOptions extends ResponseOptions {\nconstructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseResponseOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseResponseOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseResponseOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Abstract class from which real backends are derived.\n * \n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class ConnectionBackend {\n/**\n * @abstract\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: any) {} }\n/**\n * Abstract class from which real connections are derived.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class Connection {\n  readyState: ReadyState;\n  request: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\nfunction Connection_tsickle_Closure_declarations() {\n/** @type {?} */\nConnection.prototype.readyState;\n/** @type {?} */\nConnection.prototype.request;\n/** @type {?} */\nConnection.prototype.response;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class XSRFStrategy {\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request) {} }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface RequestOptionsArgs {\n  url?: string|null;\n  method?: string|RequestMethod|null;\n  /** @deprecated from 4.0.0. Use params instead. */\n  search?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  params?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  headers?: Headers|null;\n  body?: any;\n  withCredentials?: boolean|null;\n  responseType?: ResponseContentType|null;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string|null; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface ResponseOptionsArgs {\n  body?: string|Object|FormData|ArrayBuffer|Blob|null;\n  status?: number|null;\n  statusText?: string|null;\n  headers?: Headers|null;\n  type?: ResponseType|null;\n  url?: string|null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RequestMethod} from './enums';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint8Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint16Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * \\@experimental \n * \n */\nexport class QueryEncoder {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n * \n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n * \n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n * \n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n * \n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n * \n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n * \n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n/**\n * @param {?=} rawParams\n * @param {?=} queryEncoder\n */\nconstructor(\npublic rawParams: string = '',\nprivate queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n/**\n * @return {?}\n */\nclone(): URLSearchParams {\n    const /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean { return this.paramsMap.has(param); }\n/**\n * @param {?} param\n * @return {?}\n */\nget(param: string): string|null {\n    const /** @type {?} */ storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nset(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nsetAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nappend(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nappendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nreplaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ndelete (param: string): void { this.paramsMap.delete(param); }\n}\n\nfunction URLSearchParams_tsickle_Closure_declarations() {\n/** @type {?} */\nURLSearchParams.prototype.paramsMap;\n/** @type {?} */\nURLSearchParams.prototype.rawParams;\n/** @type {?} */\nURLSearchParams.prototype.queryEncoder;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nexport abstract class Body {\n/**\n * \\@internal\n */\nprotected _body: any;\n/**\n * Attempts to return body as parsed `JSON` object, or raises an exception.\n * @return {?}\n */\njson(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse( /** @type {?} */((<string>this._body)));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n/**\n * Returns the body as a string, presuming `toString()` can be called on the response body.\n * \n * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n * bytes in the buffer will be interpreted. Valid values are:\n * \n * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n *   into consideration. This is the default behavior to avoid breaking apps, but should be\n *   considered deprecated.\n * \n * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n * @param {?=} encodingHint\n * @return {?}\n */\ntext(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array( /** @type {?} */((this._body as ArrayBuffer))));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array( /** @type {?} */((this._body as ArrayBuffer))));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n/**\n * Return the body as an ArrayBuffer\n * @return {?}\n */\narrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return /** @type {?} */(( <ArrayBuffer>this._body));\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n/**\n * Returns the request's body as a Blob, assuming that body exists.\n * @return {?}\n */\nblob(): Blob {\n    if (this._body instanceof Blob) {\n      return /** @type {?} */(( <Blob>this._body));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\nfunction Body_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nBody.prototype._body;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n/**\n * Creates `Response` instances from provided values.\n * \n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n * \n * ### Example\n * \n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n * \n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n * \n * \\@experimental\n */\nexport class Response extends Body {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n */\ntype: ResponseType;\n/**\n * True if the response's status is within 200-299\n */\nok: boolean;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n */\nurl: string;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n */\nstatus: number;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n */\nstatusText: string|null;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n */\nbytesLoaded: number;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n */\ntotalBytes: number;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n */\nheaders: Headers|null;\n/**\n * @param {?} responseOptions\n */\nconstructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status !;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type !;\n    this.url = responseOptions.url !;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\nfunction Response_tsickle_Closure_declarations() {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n * @type {?}\n */\nResponse.prototype.type;\n/**\n * True if the response's status is within 200-299\n * @type {?}\n */\nResponse.prototype.ok;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n * @type {?}\n */\nResponse.prototype.url;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n * @type {?}\n */\nResponse.prototype.status;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n * @type {?}\n */\nResponse.prototype.statusText;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n * @type {?}\n */\nResponse.prototype.bytesLoaded;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n * @type {?}\n */\nResponse.prototype.totalBytes;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n * @type {?}\n */\nResponse.prototype.headers;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nlet /** @type {?} */ _nextRequestId = 0;\nexport const /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\nlet /** @type {?} */ _jsonpConnections: {[key: string]: any}|null = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const /** @type {?} */ w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\nexport class BrowserJsonp {\n/**\n * @param {?} url\n * @return {?}\n */\nbuild(url: string): any {\n    const /** @type {?} */ node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n/**\n * @return {?}\n */\nnextRequestID(): string { return `__req${_nextRequestId++}`; }\n/**\n * @param {?} id\n * @return {?}\n */\nrequestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n/**\n * @param {?} id\n * @param {?} connection\n * @return {?}\n */\nexposeConnection(id: string, connection: any) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nremoveConnection(id: string) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nsend(node: any) { document.body.appendChild( /** @type {?} */((<Node>(node)))); }\n/**\n * @param {?} node\n * @return {?}\n */\ncleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */((<Node>(node))));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserJsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPConnection implements Connection {\n/**\n * The {\\@link ReadyState} of this request.\n */\nreadyState: ReadyState;\n/**\n * The outgoing HTTP request.\n */\nrequest: Request;\n/**\n * An observable that completes with the response, when the request is finished.\n */\nresponse: Observable<Response>;\n/**\n * Callback called when the JSONP request completes, to notify the application\n * of the new data.\n * @abstract\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {}\n}\n\nfunction JSONPConnection_tsickle_Closure_declarations() {\n/**\n * The {\\@link ReadyState} of this request.\n * @type {?}\n */\nJSONPConnection.prototype.readyState;\n/**\n * The outgoing HTTP request.\n * @type {?}\n */\nJSONPConnection.prototype.request;\n/**\n * An observable that completes with the response, when the request is finished.\n * @type {?}\n */\nJSONPConnection.prototype.response;\n}\n\nexport class JSONPConnection_ extends JSONPConnection {\nprivate _id: string;\nprivate _script: Element;\nprivate _responseData: any;\nprivate _finished: boolean = false;\n/**\n * @param {?} req\n * @param {?} _dom\n * @param {?=} baseResponseOptions\n */\nconstructor(\n      req: Request,\nprivate _dom: BrowserJsonp,\nprivate baseResponseOptions?: ResponseOptions) {\n    super();\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n/**\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\nfunction JSONPConnection__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPConnection_.prototype._id;\n/** @type {?} */\nJSONPConnection_.prototype._script;\n/** @type {?} */\nJSONPConnection_.prototype._responseData;\n/** @type {?} */\nJSONPConnection_.prototype._finished;\n/** @type {?} */\nJSONPConnection_.prototype._dom;\n/** @type {?} */\nJSONPConnection_.prototype.baseResponseOptions;\n}\n\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPBackend extends ConnectionBackend {}\nexport class JSONPBackend_ extends JSONPBackend {\n/**\n * @param {?} _browserJSONP\n * @param {?} _baseResponseOptions\n */\nconstructor(private _browserJSONP: BrowserJsonp,\nprivate _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): JSONPConnection {\n    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserJsonp, },\n{type: ResponseOptions, },\n];\n}\n\nfunction JSONPBackend__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPBackend_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSONPBackend_.ctorParameters;\n/** @type {?} */\nJSONPBackend_.prototype._browserJSONP;\n/** @type {?} */\nJSONPBackend_.prototype._baseResponseOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ɵgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * \\@experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n */\nresponse: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name !, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * \\@experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class RequestOptions {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n */\nmethod: RequestMethod|string|null;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n */\nheaders: Headers|null;\n/**\n * Body to be used when creating a {\\@link Request}.\n */\nbody: any;\n/**\n * Url with which to perform a {\\@link Request}.\n */\nurl: string|null;\n/**\n * Search parameters to be included in a {\\@link Request}.\n */\nparams: URLSearchParams;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @return {?}\n */\nget search(): URLSearchParams { return this.params; }\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @param {?} params\n * @return {?}\n */\nset search(params: URLSearchParams) { this.params = params; }\n/**\n * Enable use credentials for a {\\@link Request}.\n */\nwithCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * const req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n/**\n * @param {?=} params\n * @return {?}\n */\nprivate _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n/**\n * @param {?=} objParams\n * @return {?}\n */\nprivate _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const /** @type {?} */ params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const /** @type {?} */ value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} params\n * @return {?}\n */\nprivate _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.params;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates `Request` instances from provided values.\n * \n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n * \n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n * \n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n * \n * \\@Injectable() \n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n * \n * \\@experimental\n */\nexport class Request extends Body {\n/**\n * Http method with which to perform the request.\n */\nmethod: RequestMethod;\n/**\n * {\\@link Headers} instance\n */\nheaders: Headers;\n/**\n * Url of the remote resource\n */\nurl: string;\n/**\n * Type of the request body *\n */\nprivate contentType: ContentType;\n/**\n * Enable use credentials\n */\nwithCredentials: boolean;\n/**\n * Buffer to store the response\n */\nresponseType: ResponseContentType;\n/**\n * @param {?} requestOptions\n */\nconstructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url !;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method !);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials !;\n    this.responseType = requestOptions.responseType !;\n  }\n/**\n * Returns the content type enum based on header options.\n * @return {?}\n */\ndetectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n/**\n * Returns the content type of request's body based on its type.\n * @return {?}\n */\ndetectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n/**\n * Returns the request's body according to its type. If body is undefined, return\n * null.\n * @return {?}\n */\ngetBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction Request_tsickle_Closure_declarations() {\n/**\n * Http method with which to perform the request.\n * @type {?}\n */\nRequest.prototype.method;\n/**\n * {\\@link Headers} instance\n * @type {?}\n */\nRequest.prototype.headers;\n/**\n * Url of the remote resource\n * @type {?}\n */\nRequest.prototype.url;\n/**\n * Type of the request body *\n * @type {?}\n */\nRequest.prototype.contentType;\n/**\n * Enable use credentials\n * @type {?}\n */\nRequest.prototype.withCredentials;\n/**\n * Buffer to store the response\n * @type {?}\n */\nRequest.prototype.responseType;\n}\n\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const /** @type {?} */ searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const /** @type {?} */ value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst /** @type {?} */ noop = function() {};\nconst /** @type {?} */ w = typeof window == 'object' ? window : noop;\nconst /** @type {?} */ FormData = ( /** @type {?} */((w as any)) /** TODO #9100 */)['FormData'] || noop;\nconst /** @type {?} */ Blob = ( /** @type {?} */((w as any)) /** TODO #9100 */)['Blob'] || noop;\nexport const /** @type {?} */ ArrayBuffer: ArrayBufferConstructor =\n    ( /** @type {?} */((w as any)) /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const /** @type {?} */ newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return /** @type {?} */(( newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs));\n  }\n\n  return /** @type {?} */(( newOptions.merge(new RequestOptions({method, url})) as RequestArgs));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n * \n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n * \n * ### Example\n * \n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({ \n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n * \n * \n * ### Example\n * \n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n * \n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n * \n * ### Example\n * \n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n * \n * \\@experimental\n */\nexport class Http {\n/**\n * @param {?} _backend\n * @param {?} _defaultOptions\n */\nconstructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url)))));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n/**\n * Performs a request with `get` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n/**\n * Performs a request with `post` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n/**\n * Performs a request with `put` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n/**\n * Performs a request with `delete` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n/**\n * Performs a request with `patch` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n/**\n * Performs a request with `head` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n/**\n * Performs a request with `options` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Http_tsickle_Closure_declarations() {\n/** @type {?} */\nHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttp.ctorParameters;\n/** @type {?} */\nHttp.prototype._backend;\n/** @type {?} */\nHttp.prototype._defaultOptions;\n}\n\n/**\n * \\@experimental\n */\nexport class Jsonp extends Http {\n/**\n * @param {?} backend\n * @param {?} defaultOptions\n */\nconstructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * \n * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n * supported by all current browsers. Because JSONP creates a `<script>` element with\n * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n * source could expose your application to XSS risks. Data exposed by JSONP may also be\n * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n * future security issues (e.g. content sniffing).  For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url))));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Jsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend, JSONPBackend_} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n/**\n * @return {?}\n */\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n * \n * \\@experimental\n */\nexport class HttpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpModule.ctorParameters;\n}\n\n/**\n * The module that includes jsonp's providers\n * \n * \\@experimental\n */\nexport class JsonpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    {provide: JSONPBackend, useClass: JSONPBackend_},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JsonpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonpModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * \\@stable\n */\nexport const VERSION = new Version('4.4.7');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {BrowserXhr} from './backends/browser_xhr';\nexport {JSONPBackend, JSONPConnection} from './backends/jsonp_backend';\nexport {CookieXSRFStrategy, XHRBackend, XHRConnection} from './backends/xhr_backend';\nexport {BaseRequestOptions, RequestOptions} from './base_request_options';\nexport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nexport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nexport {Headers} from './headers';\nexport {Http, Jsonp} from './http';\nexport {HttpModule, JsonpModule} from './http_module';\nexport {Connection, ConnectionBackend, RequestOptionsArgs, ResponseOptionsArgs, XSRFStrategy} from './interfaces';\nexport {Request} from './static_request';\nexport {Response} from './static_response';\nexport {QueryEncoder, URLSearchParams} from './url_search_params';\nexport {VERSION} from './version';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\nexport {BrowserXhr,JSONPBackend,JSONPConnection,CookieXSRFStrategy,XHRBackend,XHRConnection,BaseRequestOptions,RequestOptions,BaseResponseOptions,ResponseOptions,ReadyState,RequestMethod,ResponseContentType,ResponseType,Headers,Http,Jsonp,HttpModule,JsonpModule,Connection,ConnectionBackend,RequestOptionsArgs,ResponseOptionsArgs,XSRFStrategy,Request,Response,QueryEncoder,URLSearchParams,VERSION} from './src/index';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {BrowserXhr,JSONPBackend,JSONPConnection,CookieXSRFStrategy,XHRBackend,XHRConnection,BaseRequestOptions,RequestOptions,BaseResponseOptions,ResponseOptions,ReadyState,RequestMethod,ResponseContentType,ResponseType,Headers,Http,Jsonp,HttpModule,JsonpModule,Connection,ConnectionBackend,RequestOptionsArgs,ResponseOptionsArgs,XSRFStrategy,Request,Response,QueryEncoder,URLSearchParams,VERSION} from './public_api';\n\nexport {BrowserJsonp as ɵg} from './src/backends/browser_jsonp';\nexport {JSONPBackend_ as ɵa} from './src/backends/jsonp_backend';\nexport {Body as ɵf} from './src/body';\nexport {_createDefaultCookieXSRFStrategy as ɵb,httpFactory as ɵc,jsonpFactory as ɵd} from './src/http_module';\nexport {RequestArgs as ɵe} from './src/interfaces';"]}