import {
  Component,
  Input,
  Directive,
  Inject,
  ElementRef,
  ContentChildren,
  QueryList,
  HostListener,
  Pipe,
  ChangeDetectionStrategy, OnInit, ChangeDetectorRef,
  EventEmitter, OnDestroy
} from '@angular/core';

import {UDFModel} from '../models/udf.model';

/*
@Component ({
  selector: 'pf-compound',
  template: `<h1>CompoundComponent</h1>
  <ng-container *ngIf="model.size > 1">
    <div>{{model}}</div>
    <ng-container *pfFor="let record of model">
      <div>pfFor level {{record.level}} single record</div>
    </ng-container>
  </ng-container>
  `
})
export class OFFCompoundComponent {
  @Input() model: UDFModel;
}
*/

@Component ({
  selector: 'pf-empty',
  template: `[empty-component]`
})
export class EmptyComponent {
  @Input() model: UDFModel;
}

@Component ({
  selector: 'pf-default',
  template: `<h1>Pfinder - Default Component</h1>
  <ng-container *pfDynComp="data"></ng-container>`
})
export class BaseComponent implements OnInit, OnDestroy {
  // @Input() model: UDFModel;
  static changeCound: number;

  private _model: UDFModel;
  private _changeSubscription;
  public data; /* need to compile */


  constructor(private changeDetectionRef: ChangeDetectorRef) {}
  ngOnInit() {
    if (BaseComponent.changeCound === void 0) BaseComponent.changeCound = 0;
    this.changeDetectionRef.detach();
  }
  ngOnDestroy() {
    if (this._changeSubscription) {
      this._changeSubscription.unsubscribe();
    }
  }
  set model(model) {
    this._model = model;
    this._changeSubscription = this._model.onchange.subscribe(
      change => {
        // console.log('BaseComponent changes ' + (BaseComponent.changeCound++))
        this.changeDetectionRef.detectChanges();
      }
    )
    this.changeDetectionRef.detectChanges();
  }
  get model(): UDFModel {
    return this._model;
  }
}


@Component({
  selector: 'pf-compound',
  // changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <ng-container>{{model | unveil:10}}</ng-container>
    <pre class="dev">{{model.toText()}}</pre>
    <span>{{model.desc}}</span><span *ngIf="model.count"> (count:{{model.count}})</span>
    <ng-container *ngIf="model.size > 1">
      <table class="compound-table horizontal">
        <tr><td class="dev-OFF" style="background-color: #FFF;"><!-- dev info column for record info--></td>
          
          <th *ngFor="let head of model.header">
            <pre class="dev">{{head.toText()}}</pre>
            {{head.desc}}
          </th>
          
        </tr>
        <ng-container *pfFor="let record of model">
          <tr>
            <td class="td-record">
              <pre class="dev">{{record.toText()}}</pre>
              {{record.desc}}
            </td>
            <ng-container *pfFor="let cell of record">
              <td>
                <pre class="dev">{{cell.toText()}}</pre>
                <ng-container  *pfFor="let value of cell">

                  <ng-container *ngIf="value.level === 'value'">
                    {{value.desc}}:<div [innerHTML]="value.value | safeValue"></div>
                  </ng-container>
                  <ng-container *ngIf="value.level !== 'value'">
                    <ng-container *pfDynComp="value"></ng-container>
                  </ng-container>
                </ng-container>
              </td>
            </ng-container>
          </tr>
        </ng-container>
      </table>
    </ng-container>
    
    <ng-container *ngIf="model.size === 1">
      <table class="compound-table vertical">
        <tr>
          <th colspan="2">
          <pre class="dev udf-head">{{model.children[0].toText()}}</pre>
          {{model.children[0].desc}}
          </th>
        </tr>
        <tr *pfFor="let head of model.header; let i = index;">
          <th>
            <pre class="dev udf-head">{{head.toText()}}</pre>
            {{head.desc}}
          </th>
          <td>
            <ng-container  *pfFor="let value of model.children[0].children[i]">
              <ng-container *ngIf="value.level === 'value'">
                <div [innerHTML]="value.value | safeValue"></div>
              </ng-container>
              <ng-container *ngIf="value.level !== 'value'">
                <ng-container *pfDynComp="value"></ng-container>
              </ng-container>
            </ng-container>
          </td>
        </tr>
      </table>
    </ng-container>
    `
})
export class CompoundComponent extends BaseComponent {}

@Component({
  selector: 'pf-record',
  template: `    
      <pre class="dev">{{model.toText()}}</pre>
      <table>
        <tr><th colspan="2">{{model.desc}}</th></tr>
        <ng-container *ngFor="let cell of model.children">
          <tr>
            <th>
              <pre class="dev">{{cell.toText()}}</pre>
              {{cell.desc}}
            </th>
            <td>
            <div *ngFor="let value of cell.children">
              <pre class="dev">{{value.toText()}}</pre>
              <ng-container *ngIf="value.level === 'value'">{{value.value}}</ng-container>
              <ng-container *ngIf="value.level !== 'value'">
                <ng-container *pfDynComp="value"></ng-container>
              </ng-container>
             </div>
            </td>
          </tr>
        </ng-container>
      </table>`
})
export class RecordComponent extends BaseComponent {}

@Component({
  selector: 'pf-cell',
  template: `
    <pre class="dev">{{model.toText()}}</pre>
    <table>
      <tr>
        <th>{{model.desc}}</th>
        <ng-container *ngFor="let value of model.children">
          <td>
          <ng-container *ngIf="value.level === 'value'">{{value.value}}</ng-container>
          <ng-container *ngIf="value.level !== 'value'">
            <ng-container *pfDynComp="value"></ng-container>
          </ng-container>
          </td>
        </ng-container>
      </tr>
    </table>`
})
export class CellComponent extends BaseComponent {}

@Component({
  selector: 'pf-value',
  // template: `<div [innerHTML]="model.value"></div>`
  template: `
    <pre class="dev">{{model.toText()}}</pre>
    <table>
      <tr>
        <th>{{model.desc}}</th>
        <td>
          <div [innerHTML]="model.value | safeValue"></div>
        </td>
      </tr>
    </table>
  `
})
export class ValueComponent {
  @Input() model: UDFModel;
}

@Component({
  selector: 'pf-detail',
  styles: [],
  template: `    
    <pf-tabs *ngIf="model?.children[0]">
      <ng-container *ngFor="let cell of model.children[0].children">
        <pf-tab title="{{cell.desc}}">
          <ng-container *ngFor="let value of cell.children">
            <ng-container *pfDynComp="value"></ng-container>
          </ng-container>
        </pf-tab>
      </ng-container>
    </pf-tabs>`,
})
export class DetailComponent {
  @Input() model: UDFModel;
  setActive($event) {
    alert('setActive: ' + $event);
  }
}

@Component ({
  selector: 'pf-downloads',
  template: `
    <div>{{model.level}}: {{model.name}}: {{model.desc}}</div>
    <ng-container *ngFor="let cell of model.query('cell')">
      <div>{{cell.level}}: {{cell.name}}: {{cell.desc}}</div>
      <ng-container *ngFor="let value of cell.children">
        <div *ngIf="value.value"><b>{{value.name}}:</b> {{value.value}}</div>
      </ng-container>
    </ng-container>
  <!--
  <div ng-switch="data.level">
    <div ng-switch-when="cell">
      <ng-container *ngFor="let value of model.query('value')">
        <div *ngIf="value.value">{{value.name}}:{{value.value}}</div>
      </ng-container>
    </div>
    <div ng-switch-default>
      <ng-container *ngFor="let child of model.children">
      <ng-container *pfDynComp="child"></ng-container>
      </ng-container>
    </div>
  </div>
  -->
  `
})
export class DownloadsComponent {
  @Input() model: UDFModel;

}
