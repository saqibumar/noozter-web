
export class PFCONST {

  static resp_ok = 1; // Default client chaching set in config.
  static resp_force_nocache = 2; // Force client sided chaching ok.
  static resp_force_cache = 3; // Force client sided chaching off.

  /* Login States */
  static login_failed = 1;
  static login_external_ok = 2;
  static login_internal_ok = 3;
  static login_nop = 4;
  static login_failed_external_system = 5;
  static login_failed_external_user = 6;
  static login_failed_external_pw = 7;
  static login_failed_external_group = 8;
  static login_failed_internal_user = 9;
  static login_failed_internal_pw = 10;
  static login_internal_too_many_users = 11;
  static login_session = 12;

  static smt_Configuration = 0;  // Konfiguration
  static smt_MetaConfiguation = 4;  // Metakonfig, Zu maske o weiter
  static smt_CatalogsEN = 10; // Katalogeinstieg, portal
  static smt_Class = 28; // Class, weiter

  // Attribut SMU 2er Potenzen Konfiguration
  static smu_SearchFullO = 0x0001;  // 1 Suche Objektname
  static smu_SearchFullM = 0x0002;  // 2 Suche merkmalbasiert
  static smu_ContainerV = 0x0004;  // 4 Container Varianten
  static smu_TrefferL2 = 0x0008;  // 8
  static smu_AccessoryProduct = 0x0010;  // 16 Verwendung Zubehör-Produkt
  static smu_Dependency = 0x0020;  // 32
  static smu_ContainerL1 = 0x0040;  // 64
  static smu_ContainerL3 = 0x0080;  // 128
  static smu_ContainerL3G = 0x0100;  // 256
  static smu_ContainerDZ = 0x0200;  // 512 Download Zubehör
  static smu_TrefferL1 = 0x0400;  // 1024
  static smu_TrefferL3 = 0x0800;  // 2048
  static smu_ContainerL2 = 0x1000;  // 4096
  static smu_CatalogExtern = 0x2000;  // 8192
  static smu_ProductAccessory = 0x4000;  // 16384 Verwendung Produkt-Zubehör
  static smu_ContainerZ = 0x8000;  // 32768 Zubehör
  static smu_Classes = 0x10000; // 65536  Combo mit Klassen
  static smu_References = 0x20000; // 131072 Referenzen der Objekte verwenden
  static smu_ComboHasConfigs = 0x80000; // 524288

  // Attribut SGO 2er Potenzen
  static sgo_AllProductsInCombo = 0x0001;  // 1  Produkte statt Klassen in die Combo
  static sgo_Hide = 0x0002;  // 2  Combo/Eintrag nicht anzeigen, aber verwenden
  static sgo_Config_P_with_F = 0x0004;  // 4  Konfiguration mit Familien
  static sgo_Config_P = 0x0008;  // 8  Konfiguration ohne Familien
  static sgo_Config_TS = 0x0010;  // 16 Konfiguration Typenschlüsselprodukte
  static sgo_ComboAND = 0x0020;  // 32 Logik= Combo
  static sgo_CheckOR = 0x0040;  // 64 Logik= Checkbox Oder
  static sgo_CheckAND = 0x0080;  // 128 Logik= Checkbox Und
  static sgo_PanelUp = 0x0100;  // 256 Control oben
  static sgo_PanelDown = 0x0200;  // 512 Control unten
  static sgo_RadioAND = 0x0400;  // 1024 Logik Radio And
  static sgo_NewColumn = 0x0800;  // 2048 Control in neue Spalte
  static sgo_Highlight = 0x1000;  // 4095 Hervorheben


  // {at_OBT, Produkt/Objekttypen}
  static obt_TSProduct = 1;  // Typenschl�sselprodukte
  // {at_OBA, Produkt/Objekttypnumber}
  static oba_TSInclusiv = 1;  // Einschlussliste
  static oba_TSExclusiv = 2;  // Ausschlussliste

  // {Dateitypen,at_var frt}
  static frt_FileReferenz = 1;
  static frt_FilePicture = 2;
  static frt_FileWebPicture = 3;
  static frt_FilePDF = 4;
  static frt_HREF = 5;
  static frt_WebQuery = 6;   // Anfrageknopf im Web, Webanfrage
  static frt_DLLTypeKey = 7;
  static frt_BarCodeEAN13 = 8;
  static frt_BarCodeEAN8 = 9;
  static frt_Cart = 10;  // Anfrageknopf im Web, Webanfrage
  static frt_CartButton = 11;  // Anfrageknopf im Web, Webanfrage
  static frt_FileZIP = 12;
  static frt_HREF_Content = 13;  // Link to external content to be loeaded into dom via function ACTION_EXTERNAL_CONTENT
  static frt_Zint = 100; // zint barcodes
  static frt_ZintMax = 187; // Number of zint barcodes

  // Target where to open frt_HREF
  static frs_Internet = 2; // self
  static frs_Internet_ex = 3; // blank

  static dt_Text = 0;
  static dt_Memo = 1;
  static dt_Number = 2;
  static dt_Boolean = 3;
  static dt_Object = 4;
  static dt_Table = 5;
  static dt_FileRef = 6;
  static dt_ObjectRef = 7;
  static dt_iHref = 100; // internal Link
  // Fake data types
  static dt_Html = 101; // DAT == static dt_Memo + FRD == static frd_HtmlEncoded


  // {Dateiquelle,at_var frs}
  static frs_FileSystem = 1;
  // static frs_Internet        		= 2;
  // static frs_Internet_ex     		= 3;
  static frs_Image_DB_M = 4; // M@rs
  static frs_Image_DB_F = 5; // Fluxiom

  /* Database note types */
  static nt_Unknown = 0;     // Oder freie Fläche
  static nt_Base = 1;     // Basisnode fuer allgem. Objekte
  static nt_Property = 2;     // Merkmal
  static nt_PropertyGroup = 3;     // Merkmalgruppe
  static nt_Compound = 4;     // Verbund
  static nt_CompoundGroup = 5;     // Verbundgruppe
  static nt_User = 6;     // Benutzer
  static nt_UserGroup = 7;     // Benutzergruppe
  static nt_ValuelistGroup = 8;     // Wertelistegruppe
  static nt_Valuelist = 9;     // Werteliste
  static nt_ValueGroup = 10;     // WerteGruppe
  static nt_ValuelistValue = 11;     // Werte der Werteliste
  static nt_LanguageGroup = 12;     // Sprachgruppe
  static nt_Language = 13;     // Sprache
  static nt_Unit = 14;     // Einheit
  static nt_UnitGroup = 15;     // Einheitengruppe
  static nt_Currency = 16;     // Währung
  static nt_CurrencyGroup = 17;     // Währungsgruppe
  static nt_ScriptGroup = 18;     // Scriptinggruppe
  static nt_Script = 19;     // Script
  static nt_CatalogClass = 20;     // Katalogklasse (nicht verwendet)
  static nt_Catalog = 21;     // Katalog
  static nt_Class = 22;     // Klasse
  static nt_Product = 23;     // Objekt
  static nt_Variant = 24;     // Variante
  static nt_Value = 25;     // Wert eines Merkmals            (Kein wirklicher Nodetyp)
  static nt_MValue = 26;     // Mehrfachwert eines Merkmals    (Kein wirklicher Nodetyp)
  static nt_RValue = 27;     // Ein Wert mit Rechteinformation (Kein wirklicher Nodetyp)
  static nt_Printer = 28;     // Ein Drucker Client
  static nt_Device = 29;     // Ein anwendung
  static nt_PrintCommand = 30;     // Seitenumbruch
  static nt_PrintCatalog = 31;     // Druckkatalog
  static nt_PrintSection = 32;     // Druckabschnitt
  static nt_Level = 33;     // Z-Level (Kein wirklichern Nodetyp) vw in Form Relationen
  static nt_Group = 34;     // Produktgruppen
  static nt_ClassCatalog = 35;     // Katalog für Klassifizierungen
  static nt_Customer = 36;     // Kunde
  static nt_CustomerGroup = 37;     // Kundengruppe
  static nt_Supplier = 38;     // Lieferant
  static nt_SupplierGroup = 39;     // Lieferantengruppe
  static nt_KeyWord = 40;     // *** frei Schlagwort ***
  static nt_KeyWordGroup = 41;     // *** frei Schlagwortgruppe  ***
  static nt_File = 42;     // Datei auf Festplatte
  static nt_FileGroup = 43;     // Dateiordner
  static nt_Image = 44;     // Bildknoten
  static nt_Country = 45;     // Land
  static nt_CountryGroup = 46;     // Landergruppe
  static nt_PrintDocument = 47;     // PrintDokument
  static nt_PDF = 48;     // PDF Folder
  static nt_SearchMask = 49;     // Suchdefinition
  static nt_SearchGroup = 50;     // Suchgruppe
  static nt_Workflow = 51;     // Workflow
  static nt_SearchValueGrp = 52;     // Suchwertgruppe
  static nt_InDesignT = 53;     // Template
  static nt_InDesignM = 54;     // Master
  static nt_Task = 55;     // Aufgabe
  static nt_InDesignB = 56;     // InDesign Buch
  static nt_Info = 57;     // Info
  static nt_Family = 58;
  static nt_TSProduct = 59;
  static nt_NumberOfTypes = 60;     // Erweitern; falls ein Nodetyp dazukommt=max+1
  static nt_PDFOnDemand = 61;     // PDF on Demand
  // static XXX    = 62
  static nt_Configuration = 63;     //
  static nt_LogicGroup = 64;     // Logische Gruppe

  //Linkt types
  static lt_Normal = 1;     //  2 Normaler Link unter Objekten, z.B. Klasse zu Produkt
  static lt_ObjectLink = 2;     //  4 Objektmerkmal ohne Vererbung
  static lt_Link = 3;     //  8 Verweislink
  static lt_Cross = 4;     // 16 Zur Vermeidung von Loops auf gleichem Level z.B. Link zum Hauptobjekt, z.B. Benutzer->Benutzergruppe
  static lt_VariantLink = 5;     // 32 Variantenmerkmal
  static lt_ProductLink = 6;     // 64 Produktmerkmal
  static lt_Info1Link = 7;     // 128 Fuer diverse Zwecke
  static lt_Info2Link = 8;     // 256 Fuer diverse Zwecke, dependency link webcon
  static lt_PropLink = 9;     // 512 Normaler Link zu einem vererbten Merkmal, Vererbungstiefe ist per Def 1 Ebene


  static level_Objects = 0;	// Allgemein
  static level_Users = 1;	// Benutzer
  static level_Properties = 2;	// Merkmale
  static level_WorkFlows = 3;	// Workflow
  static level_Compounds = 4;	// Verbuende
  static level_Valuelists = 5;    // Wertelisten
  static level_Classes = 6;    // Klassifizierungen
  static level_Languages = 7;    // *** nicht verwendet ***
  static level_Units = 8;    // Einheiten
  static level_Currenciesx = 9;    // *** nicht verwendet *** frueher Waehrungen
  static level_Scripting = 10;   // Scripting
  static level_Print = 11;   // Printvorlagen
  static level_Preferences = 12;   // Globale Einstellungen
  static level_Webconfig = 13;   // Webkonfiguration
  static level_Recycle = 14;   // *** geloescht *** Papierkorb, ist jetzt Version!!
  static level_Customers = 15;   // Kunden
  static level_Suppliers = 16;   // Lieferanten
  static level_KeyWords = 17;   // *** nicht verwendet *** Schlagwortregister
  static level_Images = 18;   // *** nicht verwendet *** Bilddatenbank
  static level_Count = 19;   // Nummer erhaehen f�r neue Levels

  static level_V_Recycle = -10;  // Papierkorb ID_V

  // {Merkmaloptionen at_CLX, 2er Potenzen}
  // static clx_ExtendProperty  = 1;
  static clx_ProduktMerkmal = 2;
  static clx_FamilienMerkmal = 4;
  static clx_FamilienObjekt = 8;
  static clx_Objekt = 16;
  static clx_GruppenObjekt = 32;
  static clx_GruppenMerkmal = 64;
  static clx_Wertegruppe = 128;

  static wso_NoSort = 1;
  static wso_Regular = 2;
  static wso_Numeric = 4;
  static wso_String = 8; // AlphaNum

  // Conditions for actions client sided
  static frd_MainImage = 1;
  static frd_ProdDesc = 2;  // in client hyperlink text
  static frd_OrderNumber = 3;  //
  static frd_Price = 4;
  static frd_Line = 5;
  static frd_Tag1 = 6;
  static frd_Tag2 = 7;
  static frd_Tag3 = 8;
  static frd_Tag4 = 9;
  static frd_Tag5 = 10;
  static frd_Hide = 11;
  static frd_MaskDesc = 12; // Link in Seach for jump to mask
  // This is bull shit!!
  // static frd_HtmlEncoded = 12;
  static frd_SeriesDesc = 13;  // Link in Seach for jump to mask


  static cnf_OptionalConfig = 8;

  // Compound/Record template types
  static tpl_tplTable = 1;
  static tpl_tplTiles = 2;
  static tpl_tplTabs = 3;
  static tpl_tplPanels = 4;
  static tpl_tplTaged = 5;
  static tpl_tplExtcont = 6;

  // Use: var tplId = (cpd_attrs.TPL!=null) ? cpd_attrs.TPL : con['tpld_'+this.name+'Default'];
  static tpld_default = 2;

  // Multivalue layout
  static cef_ol = 1;
  static cef_ul = 2;
  static cef_br = 4;
  static cef_hr = 8;
  static cef_table = 16;


  // Column Options
  // if max column exeed x then handle those columns
  static cop_ColumnOptCut = 1; // Not used. Is done on server side
  static cop_ColumnOptHide = 2; // Hides vertical table
  static cop_ColumnOptTableCell = 3; // Shows vertival table

  // Order Column
  static con_purchasableDefault = 0;
  static con_purchasableOn = 1; // (if generally switch on in config.js)
  static con_purchasableOff = 2;

  // Tablesort 0=off >0 number of rows or 9999 for max
  static tpn_Tablesort = 0;

  // Pager
  static tso_PagerDefault = 0;
  static tso_PagerOn = 1;
  static tso_PagerOff = 2;

  // Max Columns in Mask Result
  // CMS=x 0=maximum

  // Workflow
  static wkf_Normal = -1; // 2er Potenzen
  static wkf_ReadOnly = 1;
  static wkf_Disable = 2;
  static wkf_Country = 4;
  static wkf_Catalog = 8;
  static wkf_Construction = 16;
  static wkf_Internet = 32;
  static wkf_DisabledPermanent = 64;
  static wkf_EnableAll = 128;
  static wkf_Datasheet = 256;
  static wkf_Classification = 512;
  static wkf_Activate = 1024;
  static wkf_InActive = 2048;


  /* Sorable */
  static soc_Sortable = 1;

  /* Temp attrs */
  // TMS
  static tms_SortError = 1;   // Falls Contextsortierung lueckenhaft
  static tms_SortRoot = 2;   // Hinweis Stammpfadsortierung weil keine Contextsortierung
  static tms_SortWOSOC = 4;   // Sortierung ohne SOC
  static tms_SortAlpha = 8;   // Sortierung Alphabetisch bei SOC=true
  static tms_SortSOCNo = 16;  // Sortierung SOC ohne mindestens einem sortiertem Knoten
  static tms_SortAnyway = 32;  // Sortierung anfordern, obwohl kein SOC, z.B. Typenschluessel
  static tms_SortOverflow = 64;  // Sortierung mit doppelten sortpos, ->resort
  static tms_SortEqual = 128; // Sortierung mit gleicher aufeinanderfallenden nummer, ->resort
  static tms_SortContext = 256; // Contextsortierung

  /****************** CLIENT SIDE ONLY *********************/
  // DISPLAY_SERVER_ERROR

  static DISPLAY_OFF = 0;
  static DISPLAY_LOG = 1;
  static DISPLAY_WIN = 2;

  /* Ajax actions */
  static ACTION_LOGIN_SITEMAP = 'getData&function=0';
  static ACTION_LOGIN = 'getData&function=1'; // User credentials
  // Values for argument "mode" for ACTION_PORTAL
  static por_full = 0; // mode: full data, loaded object
  static por_name = 1; // mode: only basic date, unloaded object

  static ACTION_PORTAL = 'getData&function=2'; // Index listing. Argument mode, depth, pid
  static ACTION_MASK_PUR = 'getData&function=3'; // Test function (kommt weg)
  static ACTION_HITCOLUMNS = 'getData&function=4'; // Treffer spalten, brauch ich nicht (kommt weg)
  static ACTION_FAMILYVIEW = 'getData&function=5'; // Mask, Search controles
  static ACTION_FAMILYLIST = 'getData&function=6'; // Result from mask
  // static ACTION_VARIANTVIEW			= 'getData&function=7'; // Detail view of item (variante/family) from result from mask selection
  static ACTION_PRODUCTDETAIL = 'getData&function=8';
  static ACTION_CONTAINERVIEW = 'getData&function=9'; // Meta information to each pid
  static ACTION_PFINDERTEXTMARCOS = 'getData&function=10'; // Print f strings like page % of %
  static ACTION_PFINDERGUI = 'getData&function=11'; // Translation table Pfinder
  static ACTION_PDFODTEXTMARCOS = 'getData&function=12'; // Print f strings like page % of %
  static ACTION_PDFODGUI = 'getData&function=13'; // Translation table Pdfondemand
  static ACTION_WEBPORTALTEXTMARCOS = 'getData&function=14'; // Print f strings like page % of %
  static ACTION_WEBPORTALGUI = 'getData&function=15'; // Translation table Web portal
  static ACTION_INI = 'getData&function=17'; // Basic configuration stuff
  static ACTION_TSVIEW = 'getData&function=18'; // Type Key configuration data
  static ACTION_SEARCH = 'getData&function=19'; //
  static ACTION_RESTRICTIONCOUNTRY = 'getData&function=20';
  static ACTION_COLLECTION_GET = 'getData&function=25'; // key, del=1
  static ACTION_COLLECTION_SET = 'getData&function=26';
  static ACTION_SENDORDER = 'getData&function=27';
  // static ACTION_SENDMAIL			= 'getData&function=27';
  static ACTION_SHOPCART = 'getData&function=28';
  static ACTION_SEARCHLOOKUP = 'getData&function=29';
  static ACTION_FAMILYINFO = 'getData&function=30'; // like Result List of Mask but takes a pid instead of psg psh
  static ACTION_PRODUCTVIEW = 'getData&function=31'; // Final Product view, Variantview or Productview, if only 1 article
  // 32 frei
  static ACTION_PORTAL_SITEMAP = 'getData&function=33';  // Tree nur name, descr, and attribs
  static ACTION_EXTERNAL_CONTENT = 'getData&function=34';  // Get DOM parts and write it in view inc, css, js, and html
  static ACTION_SENDFORM = 'getData&function=35';
  static ACTION_UNSET_SESSION = 'getData&function=36';
  static ACTION_LOAD_TPLS = 'getData&function=37';

  static ACTION_TEASER = 'teaser&function=1'; // Getting teaser Compounds

  static ACTION_PRODUCTCARD = 'productcard&function=1'; // Getting single product tile in same formate then mask result

  static ACTION_ROOT_LEVEL = 'getRootLevel'; //
  static ACTION_CHILD_NODES = 'getChildNodes'; //
  static ACTION_CHILD_NODES_SORTED = 'getSortedChildNodes'; //
  static ACTION_COMPS_AND_PROPS = 'collectCompoundsAndProperties'; // 'collectCompoundsAndProperties';
  static ACTION_COMPS_PROPS_VALS = 'getCompoundsPropertiesAndValues';
  static ACTION_NODE_VALUES = 'getValuesOfNodes'; //

  static ACTION_CREATE_NODE = 'insertNode'; //
  static ACTION_READ_NODE = 'getNode'; //
  static ACTION_UPDATE_NODE = 'updateNode'; //
  static ACTION_DELETE_NODE = 'deleteNode'; //

  static ACTION_CREATE_VALUE = 'insertValue'; //
  static ACTION_READ_VALUE = 'getValue'; // Will read value by value id
  static ACTION_READ_VALUES = 'getValues'; // Will read values by id_prop and optional [id_comp, id_ownder]
  static ACTION_UPDATE_VALUE = 'updateValue'; //
  static ACTION_DELETE_VALUE = 'deleteValue'; //

  static ACTION_CREATE_LINK = 'insertLink'; //
  static ACTION_DELETE_LINK = 'deleteLink'; //

  static ACTION_GET_VALLISTS_OF_PROP = 'getValuelistsOfProperty'; //
  static ACTION_VALUES_BY_PATH = 'searchValuesByPath'; //

  static ACTION_SAVE_SORTPOS = 'setContextPos'; //


  static ACTION_GET_FILE_INFO = 'getFileInfo';

  // getData&function=34&url=http://koxharvester.amirada.net/stage_0/html/ueber_uns.html&tag=div[id=ueber_uns]
  static ACTION_INFO = 'info';

  static byKey = {};
}


/* This will create a lookup for each const group */
PFCONST.byKey = {};
for (const key in PFCONST) {
  const key_arr = key.split('_');
  const group_str = key_arr.shift();
  if (!PFCONST.byKey[group_str]) PFCONST.byKey[group_str] = {};
  if (PFCONST.byKey[group_str][String(PFCONST[key])]) {
    console.warn('Constants "' + key + '" in group "' + group_str + '" with same value "' + PFCONST[key] + '"');
  }
  PFCONST.byKey[group_str][String(PFCONST[key])] = key_arr.join('_');
}




