import { ObservableModel } from './obs.model';
import { PfDataService, IContextModel, ILoginParams } from '../data.service';

export class ContextModel<T> extends ObservableModel<T> implements IContextModel{
  public params;

  public user?: string;
  public login?: string;
  public path?: string;
  public lcc?: string;
  public lcd?: string;
  public fnc?: number;
  public from?: number;
  public count?: number;

  constructor(context: ObservableModel<any> | any ) {
    super(context);

    let params = {};
    Object.defineProperty(this, 'params', {
      get: () => {
        const result = {};
        for (const prop in params) {
          // If param exists in params (like fn) use that one.
          if (params[prop] !== void 0) {
            result[prop] = params[prop];
          } else if (this[prop] !== void 0) {
            // Otherwise use bindable one.
            result[prop] = this[prop];
          }
        }
        return result;
      },
      set: (p) => {
        params = p;
        for (const prop in p) {

          if (!this.hasOwnProperty(prop))
            this.setProperty(prop, ((params[prop] !== void 0) ? params[prop] : this[prop]) );
        }
      }
    });

    if (context instanceof ObservableModel)
      context.bind(context, (this as any));





  };

}
