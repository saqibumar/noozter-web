
// https://github.com/Microsoft/TypeScript/blob/master/lib/lib.es6.d.ts
export class XArray<T> {
  length: number;
  push: (...items: any[]) => number;
  pop: () => any | undefined;
  concat: (...items: any[][]) => any[];
  join: (separator?: string) => string;
  reverse: () => any[];
  shift: () => any | undefined;
  slice: (start?: number, end?: number) => any[];
  sort: (comparefn?: (a: any, b: any) => number) => any[];
  splice: (start: number, deleteCount?: number, ...items: any[]) => any[];
  unshift: (...items: any[]) => number;
  indexOf: (searchElement: any, fromIndex?: number) => number;
  lastIndexOf: (searchElement: any, fromIndex?: number) => number;
  every: (callbackfn: (value: any, index: number, array: any[]) => boolean, thisArg?: any) => boolean;
  some: (callbackfn: (value: any, index: number, array: any[]) => boolean, thisArg?: any) => boolean;
  forEach: (callbackfn: (value: any, index: number, array: any[]) => void, thisAtg?: any) => void;
  map: (callbackfn: (value: any, index: number, array: any[]) => any, thisArg?: any) => any;
  filter: (callbackfn: (value: any, index: number, array: any[]) => any, thisArg?: any) => any[];
  reduce: (callbaackfn: (previusValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue?: any) => any;
  reduceRight: (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue?: any) => any;
  includes: (searchElement: any, fromIndex?: number) => boolean;
  constructor(...args: any[]) {
    Array.apply(this, arguments);
  }
}
XArray['prototype'] = new Array();

// Array.prototype.
